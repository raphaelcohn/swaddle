core_usesIn core variable

xmlwriter_declaration()
{
	local version="$1"
	local encoding="$2"
	local standalone="$3"
	if core_variable_isTrue "$standalone"; then
		printf '<?xml version="%s" encoding="%s" standlone="yes"?>' "$version" "$encoding"
	else
		printf '<?xml version="%s" encoding="%s"?>' "$version" "$encoding"
	fi
}

xmlwriter_dtd()
{
	local name="$1"
	local path="$2"
	printf '<!DOCTYPE %s PUBLIC "%s" "%s.dtd">' "$name" "$path" "$name"
}

xmlwriter_open()
{
	local nodeName="$1"
	shift 1
	
	printf '<%s' "$nodeName"
	
	local attributeName
	local attributeValue
	while [ $# -gt 1 ]
	do
		attributeName="$1"
		attributeValue="$2"
		shift 2
		
		printf ' %s="' "$attributeName"
		xmlwriter_escape_attributeValue "$attributeValue"
		printf '"'
	done
	printf '>'
}

xmlwriter_close()
{
	printf '</%s>' "$1"
}

xmlwriter_leaf()
{
	local nodeName="$1"
	shift 1
	
	printf '<%s' "$nodeName"
	
	local attributeName
	local attributeValue
	while [ $# -gt 1 ]
	do
		attributeName="$1"
		attributeValue="$2"
		shift 2
		
		printf ' %s="' "$attributeName"
		xmlwriter_escape_attributeValue "$attributeValue"
		printf '"'
	done
	
	if [ $# -eq 1 ]; then
		printf '>'
		xmlwriter_escape_value "$1"
		printf '</%s>' "$nodeName"
	else
		printf '/>'
	fi
}

core_dependency_requires '*' sed
xmlwriter_escape_attributeValue()
{
	local value="$1"

	# We do all replacements as capturing the value again causes line feeds to be lost
	if [ "$value" != "${value%*&*}" ]; then
		printf '%s' "$value" | sed -e 's/\&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e "s/'/\&apos;/g" -e 's/"/\&quot;/g'
	elif [ "$value" != "${value%*<*}" ]; then
		printf '%s' "$value" | sed -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e "s/'/\&apos;/g" -e 's/"/\&quot;/g'
	elif [ "$value" != "${value%*>*}" ]; then
		printf '%s' "$value" | sed -e 's/>/\&gt;/g' -e "s/'/\&apos;/g" -e 's/"/\&quot;/g'
	elif [ "$value" != "${value%*\'*}" ]; then
		printf '%s' "$value" | sed -e "s/'/\&apos;/g" -e 's/"/\&quot;/g'
	elif [ "$value" != "${value%*\"*}" ]; then
		printf '%s' "$value" | sed -e 's/"/\&quot;/g'
	else
		printf '%s' "$1"
	fi
}

core_dependency_requires '*' sed
xmlwriter_escape_value()
{
	local value="$1"
	
	# We do all replacements as capturing the value again causes line feeds to be lost
	if [ "$value" != "${value%*&*}" ]; then
		printf '%s' "$value" | sed -e 's/\&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g'
	elif [ "$value" != "${value%*<*}" ]; then
		printf '%s' "$value" | sed -e 's/</\&lt;/g' -e 's/>/\&gt;/g'
	elif [ "$value" != "${value%*>*}" ]; then
		printf '%s' "$value" | sed -e 's/>/\&gt;/g'
	else
		printf '%s' "$1"
	fi
}
