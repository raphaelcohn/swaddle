xmlwriter_version10()
{
	printf '%s' "<?xml version='1.0' encoding='UTF-8'?>"
}

xmlwriter_open()
{
	local nodeName="$1"
	shift 1
	
	printf '<%s' "$nodeName"
	
	local attributeName
	local attributeValue
	while [ $# -gt 1 ]
	do
		attributeName="$1"
		attributeValue="$2"
		shift 2
		
		printf " %s='" "$attributeName"
		xmlwriter_escape_attributeValue "$attributeValue"
		printf "'"
	done
	printf '>'
}

xmlwriter_close()
{
	printf '</%s>' "$1"
}

xmlwriter_leaf()
{
	local nodeName="$1"
	shift 1
	
	printf '<%s' "$nodeName"
	
	local attributeName
	local attributeValue
	while [ $# -gt 1 ]
	do
		attributeName="$1"
		attributeValue="$2"
		shift 2
		
		printf " %s='" "$attributeName"
		xmlwriter_escape_attributeValue "$attributeValue"
		printf "'"
	done
	
	if [ $# -eq 1 ]; then
		printf '>'
		xmlwriter_escape_value "$1"
		printf '</%s>' "$nodeName"
	else
		printf '/>'
	fi
}

core_dependency_requires '*' sed
xmlwriter_escape_attributeValue()
{
	local value="$1"
	
	if [ "$value" != "${value%*<*}" ]; then
		# We do all replacements as capturing the value again causes line feeds to be lost
		printf '%s' "$value" | sed -e 's/</&lt;/g' -e 's/>/&gt;/g' -e 's/&/&amp;/g' -e "s/'/&apos;/g"
		return 0
	fi
	
	if [ "$value" != "${value%*>*}" ]; then
		printf '%s' "$value" | sed -e 's/>/&gt;/g' -e 's/&/&amp;/g' -e "s/'/&apos;/g"
		return 0
	fi
	
	if [ "$value" != "${value%*&*}" ]; then
		printf '%s' "$value" | sed -e 's/&/&amp;/g' -e "s/'/&apos;/g"
		return 0
	fi
	
	if [ "$value" != "${value%*\'*}" ]; then
		printf '%s' "$value" | sed -e "s/'/&apos;/g"
		return 0
	fi
	
	printf '%s'
}

core_dependency_requires '*' sed
xmlwriter_escape_value()
{
	local value="$1"
	
	if [ "$value" != "${value%*<*}" ]; then
		# We do all replacements as capturing the value again causes line feeds to be lost
		printf '%s' "$value" | sed -e 's/</&lt;/g' -e 's/>/&gt;/g' -e 's/&/&amp;/g'
		return 0
	fi
	
	if [ "$value" != "${value%*>*}" ]; then
		printf '%s' "$value" | sed -e 's/>/&gt;/g' -e 's/&/&amp;/g'
		return 0
	fi
	
	if [ "$value" != "${value%*&*}" ]; then
		printf '%s' "$value" | sed -e 's/&/&amp;/g'
		return 0
	fi
	
	printf '%s'
}
