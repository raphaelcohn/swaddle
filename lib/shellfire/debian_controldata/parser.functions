# This file is part of raphaelcohn swaddle. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT. No part of raphaelcohn swaddle, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of raphaelcohn swaddle. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT.


debian_controldata_parser()
{
	local debian_controldata_parser_eventHandler="$1"
	local debian_controldata_parser_raiseStartOfParagraphEvent="$2"
	local commentsAllowed="$3" # Only for source control files (debian/control)
	local controlDataFilePath="$4"
	
	# These should be defined as a result of calling debian_controldata_parser_raiseStartOfParagraphEvent
	local debian_controldata_parser_raiseStartOfFieldEvent
	local debian_controldata_parser_raiseContinuationOfFieldEvent
	local debian_controldata_parser_raiseEndOfFieldEvent
	local debian_controldata_parser_raiseEndOfParagraphEvent
	# Defined by debian_controldata_parser_raiseStartOfFieldEvent:-
	# - singleLine
	# - foldedCommas (eg Uploaders; rare and only for source control files)
	# - foldedWhitespace (eg .changes Binary; rare and only for source control files)
	# - multilineListBlankFirstLine (eg Checksums-Sha1)
	# - multilineList (eg Upstream-Contact)
	# - multilineWithSynopsis (eg License, Description)
	# - multilineWithoutSynopsis (eg Comment)
	local debian_controldata_parser_fieldType
	local debian_controldata_parser_mandatoryFields
	local debian_controldata_parser_mandatoryFields_initialised
	core_variable_array_initialise debian_controldata_parser_mandatoryFields
	
	local debian_controldata_parser_fieldsInParagraph
	local debian_controldata_parser_fieldsInParagraph_initialised
	core_variable_array_initialise debian_controldata_parser_fieldsInParagraph
	
	local debian_controldata_parser_fieldName
	local debian_controldata_parser_fieldValue
	local debian_controldata_parser_fieldValueFirstLine
	local debian_controldata_parser_fieldValueContinuationLine
	local debian_controldata_parser_continuationLines
	local debian_controldata_parser_continuationLines_initialised
	core_variable_array_initialise debian_controldata_parser_continuationLines
	local debian_controldata_parser_rawLines
	local debian_controldata_parser_rawLines_initialised
	core_variable_array_initialise debian_controldata_parser_rawLines
	
	local paragraphsParsed=0
	local weAreCurrentlyParsingAParagraph=0
	local weAreCurrentlyParsingAField=0
	
	_debian_controldata_parser_endOfField()
	{
		${debian_controldata_parser_raiseEndOfFieldEvent}
		weAreCurrentlyParsingAField=0
	}
	
	_debian_controldata_parser_endOfParagraph()
	{
		_debian_controldata_parser_endOfField
		paragraphsParsed=$((paragraphsParsed+1))
		
		_debian_controldata_parser_endOfParagraph_callback()
		{
			local mandatoryField="$core_variable_array_element"
			if ! core_variable_array_contains debian_controldata_parser_fieldsInParagraph "$mandatoryField"; then
				debian_controldata_parser_warning "Missing mandatory field '$mandatoryField'"
			fi
		}
		core_variable_array_iterate debian_controldata_parser_mandatoryFields _debian_controldata_parser_endOfParagraph_callback
		
		# MUST update paragraphParser / field events (even to empty)
		${debian_controldata_parser_raiseEndOfParagraphEvent}
		weAreCurrentlyParsingAParagraph=0
	}
	
	# This design forces read to read any trailing line which does not end in a newline
	local lineCount=0
	local DONE=false
	until $DONE
	do
		lineCount=$((lineCount+1))
		IFS='' read -r line || DONE=true
		
		# https://www.debian.org/doc/debian-policy/ch-controlfield
		
		# Empty lines, or lines consisting solely of space and tab, delimit paragraphs, although this seems to interfere with continuation lines
		if [ "$(core_variable_trimSpaceAndHorizontalTab "$line")" ]; then
			if [ $weAreCurrentlyParsingAParagraph -eq 1 ]; then
				_debian_controldata_parser_endOfParagraph
			fi
			continue
		fi
		
		case "$line" in
					
			# Continuation Line
			[[:blank:]]*)
				if [ $weAreCurrentlyParsingAParagraph -eq 0 ]; then
					debian_controldata_parser_warning "A continuation line is not allowed to start a paragraph"
				fi
				
				if [ $weAreCurrentlyParsingAField -eq 0 ]; then
					debian_controldata_parser_warning "A continuation line is not allowed to start a field"
				fi
				
				core_variable_array_append debian_controldata_parser_rawLines "$line"
				
				# Remove leading space/tab
				debian_controldata_parser_fieldValueContinuationLine="$(core_variable_allButFirst "$line")"
	
				# Remove all trailing space/tab (rtrim)
				debian_controldata_parser_fieldValueContinuationLine="${debian_controldata_parser_fieldValueContinuationLine#"${debian_controldata_parser_fieldValueContinuationLine%%[![:blank:]]*}"}"
				
				# Replace '.' lines with line feeds
				case "$debian_controldata_parser_fieldValueContinuationLine" in
				
					'.')
						debian_controldata_parser_fieldValueContinuationLine="
"									
					;;
					
				esac
				
				# Note: We do not process 'indented' lines
				
				core_variable_array_append debian_controldata_parser_continuationLines "$debian_controldata_parser_fieldValueContinuationLine"
				# In scope:-
				# - debian_controldata_parser_fieldName
				# - debian_controldata_parser_fieldValueFirstLine
				# - debian_controldata_parser_fieldValueContinuationLine
				# - debian_controldata_parser_continuationLines (array)
				${debian_controldata_parser_raiseContinuationOfFieldEvent}
				
				case "$debian_controldata_parser_fieldType" in
					
					# comma or whitespace separated
					foldedWhitespace)
						debian_controldata_parser_fieldValue="${debian_controldata_parser_fieldValue} ${debian_controldata_parser_fieldValueFirstLine}"
					;;
					
					foldedCommas)
						debian_controldata_parser_fieldValue="${debian_controldata_parser_fieldValue},${debian_controldata_parser_fieldValueFirstLine}"
					;;
					
				esac
				
			;;
		
			# Comment Line (only in debian/control source files)
			'#'*)
				if core_variable_isFalse "$commentsAllowed"; then
					debian_controldata_parser_warning "A comment line is not allowed"
				fi
			;;
		
			# Field Line
			*:*)
				if [ $weAreCurrentlyParsingAField -eq 1 ]; then
					_debian_controldata_parser_endOfField
				elif [ $weAreCurrentlyParsingAParagraph -eq 0 ]; then
					core_variable_array_unset debian_controldata_parser_fieldsInParagraph
					core_variable_array_initialise debian_controldata_parser_fieldsInParagraph
					
					core_variable_array_unset debian_controldata_parser_mandatoryFields
					core_variable_array_initialise debian_controldata_parser_mandatoryFields
					
					${debian_controldata_parser_raiseStartOfParagraphEvent}
					weAreCurrentlyParsingAParagraph=1
				fi
				
				debian_controldata_parser_fieldName="$(core_variable_trimSpaceAndHorizontalTab "${line%%:*}")"
				debian_controldata_parser_fieldValueFirstLine="$(core_variable_trimSpaceAndHorizontalTab "${line#*:}")"
				debian_controldata_parser_fieldValue="$debian_controldata_parser_fieldValueFirstLine"
				core_variable_array_unset debian_controldata_parser_continuationLines
				core_variable_array_initialise debian_controldata_parser_continuationLines
				core_variable_array_unset debian_controldata_parser_rawLines
				core_variable_array_initialise debian_controldata_parser_rawLines
				
				core_variable_array_append debian_controldata_parser_rawLines "$line"
				
				if core_variable_array_contains debian_controldata_parser_fieldsInParagraph "$debian_controldata_parser_fieldName"; then
					debian_controldata_parser_warning "A duplicate field '$debian_controldata_parser_fieldName' is not allowed"
				else
					core_variable_array_append debian_controldata_parser_fieldsInParagraph "$debian_controldata_parser_fieldName"
				fi
				
				# In scope:-
				# - debian_controldata_parser_fieldName
				# - debian_controldata_parser_fieldValueFirstLine (suitable for single value, formatted text with synopsis or empty line delimiting a list, eg for Checksums-Sha1)
				${debian_controldata_parser_raiseStartOfFieldEvent}
				
				case "$debian_controldata_parser_fieldType" in
					
					multilineList|multilineWithoutSynopsis)
						core_variable_array_append debian_controldata_parser_continuationLines "$debian_controldata_parser_fieldValueFirstLine"
					;;
					
				esac
			;;
		
			*)
				debian_controldata_parser_warning "Unintelligble data"
			;;
		
		esac
		
	done <"$controlDataFilePath"

	if [ $weAreCurrentlyParsingAParagraph -eq 1 ]; then
		_debian_controldata_parser_endOfParagraph
	fi
	
	if [ $paragraphsParsed -eq 0 ]; then
		debian_controldata_parser_warning "No paragraphs found"
	fi
}

_debian_controldata_parser_outputRawFieldLines_outputRawLines()
{
	printf '%s\n' "$core_variable_array_element"
}

debian_controldata_parser_outputRawFieldLines()
{
	core_variable_array_iterate debian_controldata_parser_rawLines _debian_controldata_parser_outputRawFieldLines_outputRawLines
}

debian_controldata_parser_continuationEventNotWanted()
{
	debian_controldata_parser_warning 'Continuation line is not allowed for field '$debian_controldata_parser_fieldName''
}

debian_controldata_parser_warning()
{
	core_message WARN "$1 at line $lineCount ('$line') in debian control file '$controlDataFilePath'"
	return $core_commandLine_exitCode_DATAERR
}
