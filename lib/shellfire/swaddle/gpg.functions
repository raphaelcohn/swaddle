# This file is part of swaddle. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT. No part of swaddle, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of swaddle. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT.


core_usesIn configure

core_dependency_requires '*' gpg
swaddle_gpg()
{
	gpg --home "$(configure_getValue swaddle keyring)" "$@"
}

swaddle_gpg_exportSigningKey()
{
	local toFilePath="$1"

	if core_variable_isFalse "$(swaddle_configure_sign)"; then
		return 0
	fi
	
	swaddle_gpg --quiet --no-verbose --armor --export "$(swaddle_configure_signer)" >"$toFilePath"
	swaddle_touch_setMtimeAndAtime "$toFilePath"
}

core_dependency_requires '*' awk
swaddle_gpg_exportSigningKeyFingerprint()
{
	swaddle_gpg --with-colons --fingerprint "$(swaddle_configure_signer)" --fingerprint | awk -v FS=':' '$1 ~ /pub/ {print $5}'
}

core_dependency_requires '*' rm touch
swaddle_gpg_sign()
{
	local filePath="$1"
	if [ $# -eq 2 ]; then
		local extension="$2"
	else
		local extension='asc'
	fi
	
	rm -f "$filePath"."$extension"
	
	swaddle_gpg --default-key "$(swaddle_configure_signer)" --output "$filePath"."$extension" --armor --sign --detach-sig "$filePath"
	
	touch -r "$filePath" "$filePath"."$extension"
}

swaddle_gpg_clearsign()
{
	local filePath="$1"
	local outputFilePath="$2"
	
	rm -f "$outputFilePath"
	
	swaddle_gpg --default-key "$(swaddle_configure_signer)" --output "$outputFilePath" --armor --sign --clearsign "$filePath"
	
	touch -r "$filePath" "$$outputFilePath"
}

core_snippet_embed raw sks_keyservers_netCA
swaddle_gpg_publishSigningKey()
{
	if core_variable_isFalse "$(swaddle_configure_sign)"; then
		return 0
	fi
	
	local keyserver="$(configure_getValue swaddle keyserver)"
	if [ -z "$keyserver" ]; then
		return 0
	fi
	
	local options
	local options_initialised
	core_variable_array_initialise options
	
	core_variable_array_append options --keyserver "$keyserver"
	
	_swaddle_gpg_publishSigningKey_keyserverOptions()
	{
		if [ "$keyserver" = "$_swaddle_default_keyserver" ]; then
			local TMP_FILE
			core_temporaryFiles_newFileToRemoveOnExit
			core_snippet_retrieve sks_keyservers_netCA no "$TMP_FILE"
			set -- ca-cert-file="$TMP_FILE"
		else
			set --
		fi
		
		local afterFirst=0
		_swaddle_gpg_publishSigningKey_keyserverOptions_callback()
		{
			if [ "$afterFirst" -eq 1 ]; then
				printf ','
			else
				afterFirst=1
			fi
			printf '%s' "$core_variable_array_element"
		}
		configure_iterateOverArrayWithDefaultsIfEmpty 'swaddle' 'keyserver_options' _swaddle_gpg_publishSigningKey_keyserverOptions_callback "$@"
	}
	local keyserverOptions="$(_swaddle_gpg_publishSigningKey_keyserverOptions)"
	if [ -n "$keyserverOptions" ]; then
		core_variable_array_append options --keyserver-options "$keyserverOptions"
	fi
	
	core_variable_array_append options --send-keys "$(swaddle_gpg_exportSigningKeyFingerprint)"
	
	if [ $(core_init_verbosity) -gt 0 ]; then
		core_variable_array_passToFunctionAsArguments options swaddle_gpg || core_message WARN "Could not publish signing key to keyserver"
	else
		core_variable_array_passToFunctionAsArguments options swaddle_gpg 2>/dev/null || core_message WARN "Could not publish signing key to keyserver (run again with  --verbose 2  to find out why)"
	fi
}

core_dependency_requires '*' sed
swaddle_gpg_signatureMarkdown()
{
	local preamble="$1"
	local unavailable="$2"
	
	if core_variable_isTrue "$(swaddle_configure_sign)"; then
	
		local keyserver="$(configure_getValue swaddle keyserver)"
		if [ -z "$keyserver" ]; then
			printf '%s' "$preamble key \`$(swaddle_configure_signer)\` with fingerprint \`$(swaddle_gpg_exportSigningKeyFingerprint)\`."
		else
			local keyserverWithHttpProtocol="$(printf '%s' "$keyserver" | sed -e s/^hkp/http/g)"
			printf '%s' "$preamble key \`$(swaddle_configure_signer)\` with fingerprint [\`$(swaddle_gpg_exportSigningKeyFingerprint)\`]($keyserverWithHttpProtocol/pks/lookup?op=get&search=0x$(swaddle_gpg_exportSigningKeyFingerprint) \"Retrieve key '$(swaddle_gpg_exportSigningKeyFingerprint)' from keyserver\")."
		fi
	else
		printf '%s' "${unavailable}."
	fi
}
