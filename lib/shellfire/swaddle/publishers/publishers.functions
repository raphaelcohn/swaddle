# This file is part of swaddle. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT. No part of swaddle, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of swaddle. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT.


core_usesIn swaddle/publishers githubpages githubreleases

swaddle_publishers_initialise()
{
	core_variable_array_initialise _swaddle_publishers
	core_variable_array_append _swaddle_publishers githubpages githubreleases
}

swaddle_publishers_iterate()
{
	local publishAction="$1"
	shift 1
	
	_swaddle_publishers_iterate()
	{
		swaddle_publishers_${core_variable_array_element}_${publishAction} "$@"
	}
	
	core_variable_array_iterate _swaddle_publishers _swaddle_publishers_iterate "$@"
}

swaddle_publishers_publish()
{
	swaddle_publishers_iterate publish "$@"
}

swaddle_publishers_tagAndPush()
{
	local gitRepositoryPath="$1"
	local tagBase="$2"
	
	local repositoryName="$(configure_getValue swaddle repository_name)"
	local version="$(configure_getValue swaddle version)"
	local timestampInEpochSeconds="$(swaddle_configure_timestamp)"
	
	if [ -z "$tagBase" ]; then
		local tagMessage="Packaged repository '$repositoryName' version '$version' at epoch seconds '$timestampInEpochSeconds'"
		local tagName="${version}"
	else
		local tagMessage="Packaged repository '$repositoryName' version '$version' ($tagBase) at epoch seconds '$timestampInEpochSeconds'"
		local tagName="${tagBase}_${version}"
	fi
	
	pushd "$gitRepositoryPath"
	
		git fetch --all --prune --quiet
		git fetch --tags --quiet
		
		_swaddle_publishers_tagRetry

		if core_variable_isTrue "$(swaddle_configure_sign)"; then
			git push --quiet --signed origin "$actualTagName" 2>/dev/null || git push --quiet origin "$actualTagName"
		else
			git push --quiet origin "$actualTagName"
		fi
		
	popd
}

core_dependency_requires '*' grep
_swaddle_publishers_tagRetry()
{
	local iterationCount=1
	local thisAttemptTagMessage
	local thisAttemptTagName
	
	while true
	do
		if [ $iterationCount -ne 0 ]; then
			thisAttemptTagMessage="$tagMessage (revision $iterationCount)"
			thisAttemptTagName="${tagName}-${iterationCount}"
		else
			thisAttemptTagMessage="$tagMessage"
			thisAttemptTagName="$tagName"
		fi
	
		if git tag -l | grep -q "^${thisAttemptTagName}\$"; then
			core_message INFO "Tag '${thisAttemptTagName}' already in use"
			iterationCount=$((iterationCount+1))
			continue
		fi
	
		break
	done
	
	if core_variable_isTrue "$(swaddle_configure_sign)"; then
		set -- --local-user="$(swaddle_configure_signer)"
	else
		set -- --annotate
	fi
	
	if ! git tag "$@" --message="$thisAttemptTagMessage" "$$thisAttemptTagName"; then
		core_exitError $core_commandLine_exitCode_CANTCREAT "Could not tag with '$thisAttemptTagName' in '$(pwd)'"
	fi
	
	actualTagName="$thisAttemptTagName"
	actualIterationCount="$iterationCount"
}
