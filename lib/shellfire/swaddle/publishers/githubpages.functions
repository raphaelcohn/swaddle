# This file is part of swaddle. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT. No part of swaddle, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of swaddle. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT.


core_dependency_requires '*' git grep rsync rm awk
core_usesIn swaddle git publishers
swaddle_publishers_githubpages_prepare()
{
	_swaddle_canPublishToGithubPages=0
	
	if core_variable_isFalse "$swaddle_publishGithub"; then
		return 0
	fi
	
	if swaddle_git_swaddlingCanNotUseGit; then
		core_message WARN "Can't publish to GitHub pages (git unavailable or swaddling is not in a git repository)"
		return 0
	fi
	
	# Yes, this is probably wrong. But doing a git rm (see below) on a working tree and switching the branch for the current user is also wrong - it'll screw them over.
	if [ ! -e "$swaddle_outputPath"/.git ]; then
		if [ -d "$_swaddle_git_swaddlingPathGitRoot"/.git ]; then
			rsync -a -q "$_swaddle_git_swaddlingPathGitRoot"/.git/ "$swaddle_outputPath"/.git/
		# Might be a submodule
		elif [ -f "$_swaddle_git_swaddlingPathGitRoot"/.git ]; then
			# Handle a submodule
			
			# git clone --no-hardlinks --shared /path
			# cd new-repo
			# git repack -a
			
			local absolutePathToGitDir
			pushd "$_swaddle_git_swaddlingPathGitRoot"/"$(awk -F ': ' '$1 ~ /^gitdir$/ {print $2}' "$_swaddle_git_swaddlingPathGitRoot"/.git)"
				absolutePathToGitDir="$(pwd)"
			popd
			
			# 	worktree = ../../../../tools/fatten
			rsync -a -q "$absolutePathToGitDir"/ "$swaddle_outputPath"/.git/
		else
			core_message WARN "Can't publish to GitHub pages (we expect a .git GIT_DIR; we don't support out-of-tree folders, bare repos, etc. If you're a git guru please help us out and improve this logic. Thanks)."
			return 0
		fi
	fi
	
	# strip out worktree - this is usually a problem when dealing with submodules (-f above)
	pushd "$swaddle_outputPath"
		git config --local --unset core.worktree
	popd

	pushd "$swaddle_outputPath"
		
		if ! git fetch --all --prune --tags --quiet; then
			core_message WARN "Can't publish to GitHub pages (can't fetch in '$swaddle_outputPath')"
			return 0
		fi
		
		# Upstream exists
		if git ls-remote --exit-code . origin/gh-pages 1>/dev/null; then
			local branchExists=true
			local remoteExists=true
		# Local branch exists, but no upstream
		elif git ls-remote --exit-code . gh-pages 1>/dev/null; then
			local branchExists=true
			local remoteExists=false
		else
			local branchExists=false
			local remoteExists=false
		fi
		
		if $branchExists; then
			if ! git checkout --quiet gh-pages; then
				core_message WARN "Can't publish to GitHub pages (can't checkout the 'gh-pages' orphan branch in '$swaddle_outputPath')"
				return 0
			fi
			
			if ! $remoteExists; then
				git push --quiet --set-upstream 1>/dev/null	
			fi
			
		else
			if ! git checkout --quiet --orphan gh-pages; then
				core_message WARN "Can't publish to GitHub pages (can't create 'gh-pages' orphan branch in '$swaddle_outputPath'; create it yourself using either 'git checkout --orphan gh-pages' or, preferrably, GitHub's site generator)"
				return 0
			fi
			
			core_message NOTICE "Create a CNAME file in '$swaddle_outputPath' (check https://help.github.com/articles/my-custom-domain-isn-t-working/ )"
		
			# Fails on a subsequent run if previous run aborted (pathspec does not match)
			git rm --quiet --force -r -- . 1>/dev/null 2>/dev/null || true
		
			# Why this logic?
			# - command above leaves empty folder rubble behind
			# - a previous run may have aborted, leaving stuff not yet checked in
			set +f
			local folder
			for folder in *
			do
				set -f
				if [ ! -e "$folder" ]; then
					continue
				fi
				if [ "$folder" = '.git' ]; then
					continue
				fi
				rm -rf "$folder"
			done
			set +f
		fi
	popd
	
	_swaddle_canPublishToGithubPages=1
}

swaddle_publishers_githubpages_publish()
{
	:
}

swaddle_publishers_githubpages_finish()
{
	if core_variable_isFalse "$_swaddle_canPublishToGithubPages"; then
		return 0
	fi
	
	local repositoryName="$(configure_getValue swaddle repository_name)"
	local version="$(configure_getValue swaddle version)"
	local timestampInEpochSeconds="$(swaddle_configure_timestamp)"
		
	pushd "$swaddle_outputPath"
		
		git add --all . 1>/dev/null
		
		if core_variable_isTrue "$(swaddle_configure_sign)"; then
			git commit --quiet --all --author="$(swaddle_configure_maintainer)" --signoff --date="$timestampInEpochSeconds" -m "Packaged repository '$repositoryName' version '$version' at epoch seconds '$timestampInEpochSeconds'" --gpg-sign="$(swaddle_configure_signer)"
		else
			git commit --quiet --all --author="$(swaddle_configure_maintainer)" --signoff --date="$timestampInEpochSeconds" -m "Packaged repository '$repositoryName' version '$version' at epoch seconds '$timestampInEpochSeconds'"
		fi
		
		# Push commit
		git push --quiet origin gh-pages 1>/dev/null
		
	popd

	
	local actualTagName=''
	swaddle_publishers_tagAndPush "$swaddle_outputPath" gh-pages gh-pages
}
