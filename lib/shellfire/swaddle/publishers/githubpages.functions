core_dependency_requires '*' git grep rsync rm
core_usesIn swaddle git publishers
swaddle_publishers_githubpages_prepare()
{
	_swaddle_canPublishToGithubPages=0
	
	if core_variable_isFalse "$swaddle_publishGithub"; then
		return 0
	fi
	
	if swaddle_git_swaddlingCanNotUseGit; then
		core_message WARN "Can't publish to GitHub pages (git unavailable or swaddling is not in a git repository)"
		return 0
	fi
	
	if [ ! -d "$swaddle_outputPath"/.git ]; then
		rsync -a -q "$_swaddle_git_swaddlingPathGitRoot"/.git/ "$swaddle_outputPath"/.git/
	fi

	pushd "$swaddle_outputPath"
	
		if ! git fetch --all --quiet; then
			core_message WARN "Can't publish to GitHub pages (can't fetch in '$swaddle_outputPath')"
			return 0
		fi
		
		if ! git branch --list --no-color | grep -q ' gh-pages$'; then
		
			if ! git checkout --quiet --orphan gh-pages; then
				core_message WARN "Can't publish to GitHub pages (can't create 'gh-pages' orphan branch in '$swaddle_outputPath'; create it yourself using either 'git checkout --orphan gh-pages' or, preferrably, GitHub's site generator)"
				return 0
			fi
			
			core_message NOTICE "Create a CNAME file in '$swaddle_outputPath' (check https://help.github.com/articles/my-custom-domain-isn-t-working/ )"
		
			# Fails on a subsequent run if previous run aborted (pathspec does not match)
			git rm --quiet --force -r -- . 1>/dev/null 2>/dev/null || true
		
			# Why this logic?
			# - command above leaves empty folder rubble behind
			# - a previous run may have aborted, leaving stuff not yet checked in
			set +f
			local folder
			for folder in *
			do
				set -f
				if [ ! -e "$folder" ]; then
					continue
				fi
				if [ "$folder" = '.git' ]; then
					continue
				fi
				rm -rf "$folder"
			done
			set +f
			
		else
	
			if ! git checkout --quiet gh-pages; then
				core_message WARN "Can't publish to GitHub pages (can't checkout the 'gh-pages' orphan branch in '$swaddle_outputPath')"
				return 0
			fi
			
			# Failures: It may be that  git branch --set-upstream-to=origin/gh-pages gh-pages  or  git push --set-upstream origin gh-pages  hasn't happened yet for the gh-pages branch, ie this is still a local branch
			git pull --quiet --all 2>/dev/null || true
		fi
		
	popd
	
	_swaddle_canPublishToGithubPages=1
}

swaddle_publishers_githubpages_publish()
{
	:
}

swaddle_publishers_githubpages_finish()
{
	if core_variable_isFalse "$_swaddle_canPublishToGithubPages"; then
		return 0
	fi
	
	local repositoryName="$(configure_getValue swaddle repository_name)"
	local version="$(configure_getValue swaddle version)"
	local timestampInEpochSeconds="$(swaddle_configure_timestamp)"
		
	pushd "$swaddle_outputPath"
		
		git add --all . 1>/dev/null
		
		if core_variable_isTrue "$(swaddle_configure_sign)"; then
			git commit --quiet --all --author="$(swaddle_configure_maintainer)" --signoff --date="$timestampInEpochSeconds" -m "Packaged repository '$repositoryName' version '$version' at epoch seconds '$timestampInEpochSeconds'" --gpg-sign="$(swaddle_configure_signer)"
		else
			git commit --quiet --all --author="$(swaddle_configure_maintainer)" --signoff --date="$timestampInEpochSeconds" -m "Packaged repository '$repositoryName' version '$version' at epoch seconds '$timestampInEpochSeconds'"
		fi
		
	popd
	
	local actualTagName=''
	swaddle_publishers_tagAndPush "$swaddle_outputPath" gh-pages gh-pages
}
