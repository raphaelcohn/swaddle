core_usesIn swaddle git

core_functions_register _swaddle_configure_register_functions swaddle_git_findSwaddlesPathGitRoot

core_functions_register _swaddle_configure_register_functions swaddle_configure_register_configuration
swaddle_configure_register_configuration()
{
	# derive name from folderpath
	local repositoryName="$(core_compatibility_basename "$swaddle_swaddlesPath")"
	configure_register Value NotEmpty swaddle repository_name "$repositoryName"
	
	# Might want to use github pages going forward...
	#http://blog.teamtreehouse.com/using-github-pages-to-host-your-website
	##https://bintray.com/
	configure_register Value NotEmpty swaddle hostBaseUrl
	
	if core_variable_isSet HOME; then
		if core_path_isReadableAndSearchableFolderPath "$HOME/.gnupg"; then
			configure_register Value ReadableSearchableFolderPath swaddle keyring "$HOME/.gnupg"
			configure_register Value Boolean swaddle sign yes
		else
			configure_register Value ReadableSearchableFolderPath swaddle keyring
			configure_register Value Boolean swaddle sign no
		fi
	else
		configure_register Value ReadableSearchableFolderPath swaddle keyring
		configure_register Value Boolean swaddle sign no
	fi

	configure_register Value NotEmpty swaddle maintainer_name
	configure_register Value NotEmpty swaddle maintainer_comment
	configure_register Value NotEmpty swaddle maintainer_email

	_swaddle_default_keyserver='hkps://hkps.pool.sks-keyservers.net'
	#https://sks-keyservers.net/overview-of-pools.php
	# Disable by using ''
	configure_register Value Any swaddle keyserver "$_swaddle_default_keyserver"
	# comma-separated list
	configure_register Array NotEmpty swaddle keyserver_options
}

core_dependency_requires '*' git date awk
core_functions_register _swaddle_configure_register_functions swaddle_configure_register_attemptToDiscoverVersionAndMtime
swaddle_configure_register_attemptToDiscoverVersionAndMtime()
{
	if swaddle_git_swaddlesCanUseGit; then
		configure_register Value NotEmpty swaddle timestamp 0
		configure_register Value NotEmpty swaddle version '0'
		configure_register Value NotEmpty swaddle iteration '1'
		return 0
	fi
	
	pushd "$swaddle_swaddlesPath"
		
		local iso8601Date="$(git log -n 1 --format='%ci')"
		
		local timestamp="$(date -d "$iso8601Date" +'%s')"
		configure_register Value NotEmpty swaddle timestamp "$timestamp"
		
		local version="$(date -d "$iso8601Date" '+%Y.%m%d.%H%M')"
		configure_register Value NotEmpty swaddle version "$version"
		
		local pendingChanges="$(git diff --minimal --no-color --name-status)"
		if [ -n "$pendingChanges" ]; then
			# We bump iteration; not a perfect solution, but at least we differentiate
			configure_register Value NotEmpty swaddle iteration '2'
		else
			configure_register Value NotEmpty swaddle iteration '1'
		fi
		
	popd
}

core_dependency_requires '*' head
core_functions_register _swaddle_configure_register_functions swaddle_configure_register_attemptToDiscoverRpmLicence
swaddle_configure_register_attemptToDiscoverRpmLicence()
{
	if swaddle_git_swaddlesCanUseGit; then
		configure_register Value RpmLicence swaddle_rpm licence
		return 0
	fi
	
	local currentPath="$swaddle_swaddlesPath"
	local licenceFilePath
	while true
	do
		licenceFilePath="$currentPath"/LICENSE
		if core_path_isReadableNonEmptyFilePath "$licenceFilePath"; then
			break
		fi
		
		licenceFilePath="$currentPath"/LICENCE
		if core_path_isReadableNonEmptyFilePath "$licenceFilePath"; then
			break
		fi
		
		if [ -d "$currentPath"/.git ]; then
			configure_register Value RpmLicence swaddle_rpm licence
			return 0
		fi
		
		currentPath="$currentPath"/..
	done
		
	local licence
	case "$(head -n 1 "$licenceFilePath")" in
		
		'The MIT License (MIT)')
			licence='MIT'
		;;
		
		*)
			core_message NOTICE "Could not determine your licence automatically, please submit a pull request for swaddle"
			configure_register Value RpmLicence swaddle_rpm licence
			return 0
		;;
		
	esac

	configure_register Value RpmLicence swaddle_rpm licence "$licence"
}

core_dependency_requires '*' git awk
core_functions_register _swaddle_configure_register_functions swaddle_configure_register_attemptToDiscoverUrl
swaddle_configure_register_attemptToDiscoverUrl()
{
	configure_register Value Any swaddle bugs_url ''
	
	if swaddle_git_swaddlesCanUseGit; then
		configure_register Value NotEmpty swaddle url
		return 0
	fi
	
	local fetchUrl
	pushd "$swaddle_swaddlesPath"
	
		fetchUrl="$(git remote show -n origin | awk '$1 ~ /Fetch/ {print $3}')"
		if [ "$fetchUrl" = 'origin' ]; then
			return 0
		fi
		
	popd
	
	configure_register Value NotEmpty swaddle url "$fetchUrl"
}

core_dependency_requires '*' date
core_functions_register _swaddle_configure_register_functions swaddle_configure_register_attemptToDiscoverRpmChangelog
swaddle_configure_register_attemptToDiscoverRpmChangelog()
{
	if swaddle_git_swaddlesCanUseGit; then
		return 0
	fi
	
	local epochSeconds
	local author
	local authorEmail
	local commitHash
	local subject
	local changelogDate
	pushd "$swaddle_swaddlesPath"
		
		_swaddle_configure_register_attemptToDiscoverRpmChangelog_internal()
		{
			git log --format='%at%x09%aN%x09%aE%x09%H%x09%s' | while IFS="$(printf '\t')" read -r epochSeconds author authorEmail commitHash subject
			do
				changelogDate="$(date -u -d @${epochSeconds} '+%a %b %d %Y')"
				printf '* %s %s <%s> - %s\n' "$changelogDate" "$author" "$authorEmail" "$commitHash"
				printf '%s %s\n' '-' "$subject"
				printf '\n'
			done
		}
		
		configure_register Value NotEmpty swaddle_rpm changelog "$(_swaddle_configure_register_attemptToDiscoverRpmChangelog_internal)"
		
	popd
}

core_functions_register _swaddle_configure_register_functions swaddle_configure_register_miscellany
swaddle_configure_register_miscellany()
{
	configure_register Value NotEmpty swaddle epoch '0'
	configure_register Value NotEmpty swaddle vendor
	configure_register Value NotEmpty swaddle_package description
	configure_register Value Any swaddle fix_permissions 'swaddle_fakeroot_fixPermissions'
}

core_functions_register _swaddle_configure_register_functions swaddle_configure_register_byPackageKind
swaddle_configure_register_byPackageKind()
{
	local packageKind
	for packageKind in tar zip 7z rar file deb rpm
	do
		swaddle_build_package_${packageKind}_registerConfiguration	
	done
}

core_functions_register _swaddle_configure_register_functions swaddle_configure_register_byRepositoryKind
swaddle_configure_register_byRepositoryKind()
{
	swaddle_repository_apt_registerConfiguration
	swaddle_repository_yum_registerConfiguration
}

core_functions_register _swaddle_configure_register_functions swaddle_configure_register_webserverFiles
swaddle_configure_register_webserverFiles()
{
	swaddle_webserverFiles_registerConfiguration
}
