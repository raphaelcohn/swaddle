# This file is part of swaddle. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT. No part of swaddle, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of swaddle. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT.


core_usesIn swaddle digest webserverFiles

swaddle_repository_apt()
{
	local repositoryPath="$_swaddle_repository_parentPath"/dists/"$(configure_getValue swaddle repository_name)"
	
	swaddle_repository_apt_createTemporaryFolderPath
	swaddle_repository_apt_createDistsFolderPath
	swaddle_repository_apt_createDistsContentsTmp
	swaddle_repository_apt_parseDebsInPool
	swaddle_repository_apt_createDistsComponentsPackagesFileAndReleaseFile
	swaddle_repository_apt_createDistsComponentsTranslations
	swaddle_repository_apt_createDistsContents
	swaddle_repository_apt_createDistsRelease
	
	# Not strictly required
	swaddle_repository_apt_createInstallScript
	
	swaddle_repository_apt_releaseNotes
}

swaddle_repository_apt_registerConfiguration()
{
	# amd64, arm64, armhf, i386, powerpc, ppc64el for Ubuntu 14.04
	configure_register Array AptArchitecture swaddle_apt architectures
	configure_register Value AptLanguage swaddle_apt language 'en'
	configure_register Array AptLanguage swaddle_apt translations
	configure_register Array AptCompression swaddle_apt compressions
}

core_usesIn swaddle/publishers githubreleases
swaddle_repository_apt_releaseNotes()
{
	local count=0
	swaddle_repository_apt_releaseNotes_callbackToFindCount()
	{
		count=$((count+1))
	}
	swaddle_configure_apt_architectures swaddle_repository_apt_releaseNotes_callbackToFindCount
	
	local index=1
	local architectures=''
	swaddle_repository_apt_releaseNotes_callbackToCreateCommaString()
	{
		local packageArchitecture="$core_variable_array_element"
		
		if [ -z "$architectures" ]; then
			architectures="\`$core_variable_array_element\`"
		else
			if [ $index -eq $count ]; then
				architectures="${architectures} and \`$core_variable_array_element\`"
			else
				architectures="${architectures}, \`$core_variable_array_element\`"
			fi
		fi
		index=$((index+1))
	}
	
	swaddle_configure_apt_architectures swaddle_repository_apt_releaseNotes_callbackToCreateCommaString
	
	local hostBaseUrl
	swaddle_repository_yum_adjustUrl hostBaseUrl "$(configure_getValue swaddle host_base_url)"
	
	swaddle_publishers_githubreleases_augmentReleaseMarkdownBody "
##### Apt Repository

There is an [Apt repository](${hostBaseUrl}apt/dists/$(configure_getValue swaddle repository_name)/ \"Apt repository for $(configure_getValue swaddle repository_name) for the architectures $architectures\") for the architectures ${architectures}. It is $(swaddle_gpg_signatureMarkdown 'signed using the' 'unfortunately unsigned') It is suitable for:-

* Debian
  * Squeeze LTS (Debian 6)
  * Wheezy (Debian 7)
* Ubuntu Server
  * Lucid Lynx (Ubuntu Server 10.04 LTS)
  * Precise Pangolin (Ubuntu Server 12.04 LTS)
  * Trusty Tahr (Ubuntu Server 14.04 LTS)

These releases should also work on Ubuntu Desktop, Ubuntu non-LTS releases, remixes (eg Xubuntu) and Linux Mint, but this is not tested for.

To make it easy to use our repository, you can use our [install.sh](${hostBaseUrl}apt/dists/$(configure_getValue swaddle repository_name)/install.sh \"Apt repository install script for $(configure_getValue swaddle repository_name)\"):-

\`\`\`bash
sh -c \"\$(wget --no-verbose --output-document - '${hostBaseUrl}apt/dists/$(configure_getValue swaddle repository_name)/install.sh')\"
\`\`\`

This script pauses if run interactively. It then asks for permission with sudo for every step. The older versions of \`wget\` in Debian 6 and Ubuntu 10.04 LTS require the additional option \`--no-check-certificate\` to work around a bug in their certificate validation logic:-\*

\`\`\`bash
sh -c \"\$(wget --no-check-certificate --no-verbose --output-document - '${hostBaseUrl}apt/dists/$(configure_getValue swaddle repository_name)/install.sh')\"
\`\`\`

If you don't want to use our install script, then you can repeat the steps it takes below:-

* $(swaddle_gpg_signatureMarkdown 'Import our' 'Trust the unsigned repository is OK') You can do this using \`apt-key add\`.
* Create the file \`/etc/apt/sources.list.d/00$(configure_getValue swaddle repository_name).sources.list\` and add \`$(_swaddle_repository_apt_createAptSourcesListContent)\` to it.
* Install the \`apt-transport-https\` package using \`sudo apt-get install apt-transport-https\` (typically needed on Debian installs; \`sudo apt-get update\` may be needed first).
* Update the Apt sources using \`sudo apt-get update\`

\* These versions do not seem to use the \`subjectAltName\` field.
"
}

core_dependency_requires '*' rm mkdir
swaddle_repository_apt_createTemporaryFolderPath()
{
	_swaddle_repository_apt_temporaryFolderPath="$_swaddle_temporaryFolderPath"/apt
	rm -rf "$_swaddle_repository_apt_temporaryFolderPath"
	mkdir -m 0755 -p "$_swaddle_repository_apt_temporaryFolderPath"
}

swaddle_repository_apt_createDistsFolderPath()
{
	mkdir -m 0755 -p "$repositoryPath"
	
	swaddle_touch_setMtimeAndAtime "$_swaddle_repository_parentPath"/dists
}

swaddle_repository_apt_createDistsContentsTmp()
{
	_swaddle_repository_apt_createDistsContentsTmp_callback()
	{
		local packageArchitecture="$core_variable_array_element"
		
		pushd "$repositoryPath"
		
			printf '' >Contents-"$packageArchitecture".tmp
			
		popd
	}
	
	swaddle_configure_apt_architectures _swaddle_repository_apt_createDistsContentsTmp_callback
}

swaddle_repository_apt_parseDebsInPool()
{
	core_variable_array_initialise _swaddle_repository_apt_components 
	
	pushd "$_swaddle_repository_parentPath"/pool
	set +f
	local poolComponent
	for poolComponent in *
	do
		set -f
		if [ -d "$poolComponent" ]; then
			
			core_variable_array_append _swaddle_repository_apt_components "$poolComponent"
			
			pushd "$poolComponent"
			set +f
			local poolAZ
			for poolAZ in *
			do
				set -f
				if [ -d "$poolAZ" ]; then
					pushd "$poolAZ"
					set +f
					local poolSource
					for poolSource in *
					do
						set -f
						if [ -d "$poolSource" ]; then
							pushd "$poolSource"
							set +f
							local poolDebFile
							for poolDebFile in *.deb
							do
								set -f
								if [ -f "$poolDebFile" ]; then
									local debFilePath="$(pwd)"/"$poolDebFile"
									swaddle_repository_apt_parseDeb
								fi
							done
							set -f
							popd
						fi
					done
					set -f
					popd
				fi
			done
			set -f
			popd
		fi
	done
	set -f
	popd
}

core_dependency_requires '*' rm
swaddle_repository_apt_createDistsComponentsPackagesFileAndReleaseFile()
{
	_swaddle_repository_apt_createDistsComponentsPackagesFileAndReleaseFile_callback()
	{
		local packageArchitecture="$core_variable_array_element"
	
		pushd "$_swaddle_repository_parentPath"/pool
		set +f
		for poolComponent in *
		do
			set -f
			if [ -d "$poolComponent" ]; then
				local componentFilesFolderPath="$repositoryPath"/"$poolComponent"/binary-"$packageArchitecture"
				
				pushd "$componentFilesFolderPath"
					
					_swaddle_repository_apt_sortAndConcatenateFragments Packages
					swaddle_repository_apt_createDistsComponentReleaseFile
					
				popd
				
			fi
		done
		set -f
	}
	
	swaddle_configure_apt_architectures _swaddle_repository_apt_createDistsComponentsPackagesFileAndReleaseFile_callback
}

_swaddle_repository_apt_additionalLanguageCodes()
{
	local languageCode="$1"
	local callback="$2"
	shift 2
	
	case "$languageCode" in
		
		en)
			$callback "$@" en_AU en_CA en_GB en_US en_ZA
		;;
		
		fr)
			$callback "$@" fr_FR
		;;
		
		no)
			$callback "$@" no_NB
		;;
		
		pt)
			$callback "$@" pt_BR
		;;
		
		zh)
			$callback "$@" zh_CN zh_HK zh_TW
		;;
		
	esac
}

core_usesIn swaddle digest
core_dependency_requires '*' mkdir cat sort rm
swaddle_repository_apt_createDistsComponentsTranslations()
{
	# In Debian 6 and Ubuntu 10.04, there is a bug in apt-get which tries to retrieve, say, Translation-en AND THEN Translation-en_GB, and ignores a 404 for Translation-en_GB
	# This logic creates these extra files, but will fail if they are explicitly called out
	# However, in Debian 6 / Ubuntu 10.04, the underlying language is NOT created
	local allLanguagesToGenerateFor
	local allLanguagesToGenerateFor_initialised
	_swaddle_repository_apt_createDistsComponentsTranslations_findAllLanguagesToGenerateFor()
	{
		local languageCode="$core_variable_array_element"
		core_variable_array_appendUniquely allLanguagesToGenerateFor "$languageCode"
	
		set -x
		_swaddle_repository_apt_additionalLanguageCodes "$languageCode" core_variable_array_appendUniquely allLanguagesToGenerateFor
		set +x
	}
	configure_iterateOverArrayWithDefaultsIfEmpty swaddle_apt translations _swaddle_repository_apt_createDistsComponentsTranslations_findAllLanguagesToGenerateFor "$(configure_getValue swaddle_apt language)"
	
	local configurationSettingValue
	_configure_configurationSettingValue 'swaddle_apt' 'translations'
	local translationsArrayName="$configurationSettingValue"
	
	pushd "$repositoryPath"
		set +f
		local poolComponent
		for poolComponent in *
		do
			set -f
			if [ -d "$poolComponent" ]; then
				mkdir -m 0755 -p "$poolComponent"/i18n
				pushd "$poolComponent"/i18n
					
					{
						printf 'SHA1:\n'
						
						_swaddle_repository_apt_createDistsComponentsTranslations_callback()
						{
							local languageCode="$core_variable_array_element"
							
							_swaddle_repository_apt_createDistsComponentsTranslations_writeToIndex_callback()
							{
								local compressedFileName="$1"
								printf ' %s %7s %s\n' "$(swaddle_digest sha1 "$compressedFileName")" "$(stat -c '%s' "$compressedFileName")" "$compressedFileName"
							}
							_swaddle_repository_apt_sortAndConcatenateFragments "Translation-$languageCode" _swaddle_repository_apt_createDistsComponentsTranslations_writeToIndex_callback
						}
						
						core_variable_array_iterate allLanguagesToGenerateFor _swaddle_repository_apt_createDistsComponentsTranslations_callback
						
					} >Index

					swaddle_touch_setMtimeAndAtime Index
				popd
			fi
		done
		set -f
	popd
}

core_dependency_requires '*' rm sort
core_usesIn core snippet
core_snippet_embed raw swaddle_apt_contents
swaddle_repository_apt_createDistsContents()
{
	_swaddle_repository_apt_createDistsContents_callback()
	{
		local packageArchitecture="$core_variable_array_element"
		
		pushd "$repositoryPath"
			
			# Bug: We do not remove duplicate keys, eg for busybox:-
			# bin/busybox                                                 shells/busybox-static,universe/utils/busybox
			# we do
			# bin/busybox  shells/busybox-static
			# bin/busybox  universe/utils/busybox
			
			core_snippet_retrieve 'swaddle_apt_contents' no Contents-"$packageArchitecture"
			{
				printf '\n'
				sort -d Contents-"$packageArchitecture".tmp
			}>>Contents-"$packageArchitecture"

			swaddle_touch_setMtimeAndAtime Contents-"$packageArchitecture"
			compress_gzip Contents-"$packageArchitecture"
			
			# Yes, really delete it. apt-file only looks for a gz file ordinarily.
			rm Contents-"$packageArchitecture"
			
			# Clean up
			rm Contents-"$packageArchitecture".tmp
			
		popd
	}
	
	swaddle_configure_apt_architectures _swaddle_repository_apt_createDistsContents_callback
}

core_usesIn swaddle configure
core_dependency_requires '*' cat ln stat
swaddle_repository_apt_createDistsRelease()
{
	local parentPath="$repositoryPath"
	local releaseFilePath="$parentPath"/Release
	
	local architectures=''
	_swaddle_repository_apt_createDistsRelease_callback()
	{
		local architecture="$core_variable_array_element"
		if [ -z "$architectures" ]; then
			architectures="$core_variable_array_element"
		else
			architectures="$architectures $core_variable_array_element"
		fi
	}
	swaddle_configure_apt_architectures _swaddle_repository_apt_createDistsRelease_callback
	
	{
		cat <<-EOF
			Origin: $(configure_getValue swaddle vendor)
			Label: $(configure_getValue swaddle vendor)
			Suite: $(configure_getValue swaddle repository_name)
			Version: $(configure_getValue swaddle version)
			Codename: $(configure_getValue swaddle repository_name)
			Date: $(swaddle_configure_releaseDate)
			Architectures: ${architectures}
			Components: $(core_variable_array_string _swaddle_repository_apt_components ' ')
			Description: $(configure_getValue swaddle vendor) $(configure_getValue swaddle repository_name) $(configure_getValue swaddle version)
			NotAutomatic: no
			ButAutomaticUpgrades: no
		EOF
		
		_swaddle_repository_apt_createDistsRelease_componentCallback()
		{
			local poolComponent="$core_variable_array_element"
			local filePath
			
			_swaddle_repository_apt_createDistsRelease_componentCallback_printHashValue()
			{
				if [ -f "$filePath" ]; then
					printf " %s%18s %s\n" "$(swaddle_digest ${digest} "$filePath")" "$(stat -c '%s' "$filePath")" "$filePath"
				fi
			}
			
			_swaddle_repository_apt_createDistsRelease_componentCallback_architectureCallback()
			{
				local architecture="$core_variable_array_element"
				set +f
				for filePath in \
					"$poolComponent"/binary-"$architecture"/Packages \
					"$poolComponent"/binary-"$architecture"/Packages.* \
					"$poolComponent"/binary-"$architecture"/Release \
					"$poolComponent"/debian-installer/binary-"$architecture"/Packages \
					"$poolComponent"/debian-installer/binary-"$architecture"/Packages.*
				do
					set -f
					_swaddle_repository_apt_createDistsRelease_componentCallback_printHashValue
				done
				set -f
			}
			
			swaddle_configure_apt_architectures _swaddle_repository_apt_createDistsRelease_componentCallback_architectureCallback
			
			# Translation-* will match Translation-en and Translation-en.gz, etc
			set +f
			for filePath in \
				"$poolComponent"/i18n/Index \
				"$poolComponent"/i18n/Translation-* \
				"$poolComponent"/source/Sources \
				"$poolComponent"/source/Sources.* \
				"$poolComponent"/source/Release
			do
				set -f
				_swaddle_repository_apt_createDistsRelease_componentCallback_printHashValue
			done
			set -f
		}

		pushd "$parentPath"
		
			local digest
			local width
			
			printf 'MD5Sum:\n'
			digest=md5
			width=10
			core_variable_array_iterate _swaddle_repository_apt_components _swaddle_repository_apt_createDistsRelease_componentCallback
			
			printf 'SHA1:\n'
			digest=sha1
			width=10
			core_variable_array_iterate _swaddle_repository_apt_components _swaddle_repository_apt_createDistsRelease_componentCallback
			
			printf 'SHA256:\n'
			digest=sha256
			width=10
			core_variable_array_iterate _swaddle_repository_apt_components _swaddle_repository_apt_createDistsRelease_componentCallback
			
		popd
		
	} >"$releaseFilePath"

	swaddle_touch_setMtimeAndAtime "$releaseFilePath"

	if core_variable_isFalse "$(swaddle_configure_sign)"; then
		core_message WARN "Signing is disabled. Unsigned apt repositories are a very bad idea."
	fi
	swaddle_digest_signFile "$releaseFilePath" gpg
}

_swaddle_repository_apt_createAptSourcesListContent()
{
	local hostBaseUrl="$(configure_getValue swaddle host_base_url)"
	if core_variable_endsWith "$hostBaseUrl" '/'; then
		local length=${#hostBaseUrl}
		hostBaseUrl="$(core_variable_allButLastN "$hostBaseUrl" 1)"
	fi
	
	local repositoryName="$(configure_getValue swaddle repository_name)"
	
	printf '%s\n' "deb $hostBaseUrl/apt $repositoryName $(core_variable_array_string  _swaddle_repository_apt_components ' ')"
}

swaddle_repository_apt_createInstallScript()
{
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	local exportedSigningKey="$TMP_FILE"
	swaddle_gpg_exportSigningKey "$exportedSigningKey"
	
	
	local filePath="$repositoryPath"/install.sh
	local repositoryName="$(configure_getValue swaddle repository_name)"
	
	local mktemp="\$(mktemp --tmpdir $repositoryName.key.XXXXXXXXX)"
	local temporaryKeyFile='$temporaryKeyFile'
	cat >"$filePath" <<EOA
#!/usr/bin/env sh
set -e
set -u

if [ -t 1 ]; then
	printf '%s\n' 'This script will install the apt repository $repositoryName' 'It will change your apt keys, create or replace /etc/apt/sources.list.d/00$repositoryName.sources.list, install apt-transport-https and update apt.' 'Press the [Enter] key to continue.'
	read -r garbage
fi

sudo -p "Password for %p to allow root to update from new sources before installing apt-transport-https: " apt-get --quiet update
sudo -p "Password for %p to allow root to  apt-get install apt-transport-https (missing in Debian default installs)" apt-get install apt-transport-https

temporaryKeyFile="${mktemp}"
trap 'rm -rf "$temporaryKeyFile"' EXIT HUP INT QUIT TERM
cat >"$temporaryKeyFile" <<EOF
$(cat "$exportedSigningKey")
EOF
sudo -p "Password for %p is required to allow root to install repository '$repositoryName' public key to apt: " apt-key add "$temporaryKeyFile"

echo '$(_swaddle_repository_apt_createAptSourcesListContent)' | sudo -p "Password for %p is required to allow root to install repository '$repositoryName' apt sources list to '/etc/apt/sources.list.d/00$repositoryName.sources.list': " tee /etc/apt/sources.list.d/00$repositoryName.list >/dev/null
sudo -p "Password for %p to allow root to update from new sources: " apt-get --quiet update
EOA
	
	chmod +x "$filePath"
	swaddle_touch_setMtimeAndAtime "$filePath"
}

core_usesIn swaddle compress
core_dependency_requires '*' sort cat rm
_swaddle_repository_apt_sortAndConcatenateFragments()
{
	local concatenatedFileName="$1"
	if [ $# -eq 2 ]; then
		local callbackPerCompressedFile="$2"
	else
		local callbackPerCompressedFile=''
	fi
	
	swaddle_compress_variants_clean "$concatenatedFileName"
	
	set +f
	set -- *."$concatenatedFileName"
	set -f
	
	{
		if [ -e "$1" ]; then
			local fragmentFile
			{
				for fragmentFile in "$@"
				do
					printf '%s\n' "$fragmentFile"
				done
			} | sort -d | while IFS='' read -r fragmentFile
			do
				cat "$fragmentFile"
				rm "$fragmentFile"
			done
		fi
	} >>"$concatenatedFileName"
	swaddle_touch_setMtimeAndAtime "$concatenatedFileName"
	
	swaddle_compress_variants 'swaddle_apt' 'compressions' "$concatenatedFileName" "$callbackPerCompressedFile" 'none' 'gzip' 'bzip2' 'lzma' 'xz'
}

core_dependency_requires '*' cat
swaddle_repository_apt_createDistsComponentReleaseFile()
{
	cat >Release <<-EOF
		Archive: $(configure_getValue swaddle repository_name)
		Version: $(configure_getValue swaddle version)
		Component: ${poolComponent}
		Origin: $(configure_getValue swaddle vendor)
		Label: $(configure_getValue swaddle vendor)
		Architecture: ${packageArchitecture}
	EOF
	swaddle_touch_setMtimeAndAtime Release
}

core_dependency_requires '*' ar tar rm
swaddle_repository_apt_parseDeb()
{
	pushd "$_swaddle_repository_apt_temporaryFolderPath"
		
		ar -x "$debFilePath"
		
		set +f
			set -- control.tar* data.tar*
			local controlTarFileName="$1"
			local dataTarFileName="$2"
		set -f
		
		tar --extract --file "$controlTarFileName" ./control
		
		local packageArchitecture
		local package
		local section
		swaddle_repository_apt_parseDeb_transformControlToPackagesFileEntry
		swaddle_repository_apt_parseDeb_extractContentsList
		
		rm debian-binary "$controlTarFileName" "$dataTarFileName" control
		
	popd
}

core_dependency_requires '*' ln rm
core_usesIn swaddle configure
swaddle_repository_apt_parseDeb_transformControlToPackagesFileEntry()
{	
	packageArchitecture="$(swaddle_repository_apt_parseDeb_extractField Architecture all)"
	package="$(swaddle_repository_apt_parseDeb_extractField Package "$poolSource")"
	section="$(swaddle_repository_apt_parseDeb_extractField Section "$(configure_getValue swaddle_deb section)")"
	
	local ourBugsUrl="$(swaddle_configure_bugsUrl)"
	local bugsUrlDefault="$(swaddle_repository_apt_parseDeb_extractField Homepage "$ourBugsUrl")"
	
	{
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Package "$package"
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Essential 'no'
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Priority "$(configure_getValue swaddle_deb priority)"
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Section "$section"
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Installed-Size '1'
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Maintainer "$(swaddle_configure_maintainer)"
		swaddle_repository_apt_parseDeb_extractAndPrintControlFieldSynonyms Original-Maintainer Orig-Maintainer Orginal-Maintainer
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Architecture "$packageArchitecture"
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Source "$poolSource"
		
		# Over the years, I've seen Version to be missing
		local _swaddle_build_package_deb_debianVersion
		swaddle_build_package_deb_computeDebianVersion
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Version "$_swaddle_build_package_deb_debianVersion"

		local fieldName
		for fieldName in Replaces Provides Depends Pre-Depends Recommends Suggests Conflicts Breaks
		do
			swaddle_repository_apt_parseDeb_extractAndPrintControlField "$fieldName"
		done
		
		swaddle_repository_apt_parseDeb_printControlField Filename pool/"$poolComponent"/"$poolAZ"/"$poolSource"/"$poolDebFile"
		swaddle_repository_apt_parseDeb_printControlField Size "$(stat -c '%s' "$debFilePath")"
		swaddle_repository_apt_parseDeb_printControlField MD5sum "$(swaddle_digest md5 "$debFilePath")"
		swaddle_repository_apt_parseDeb_printControlField SHA1 "$(swaddle_digest sha1 "$debFilePath")"
		swaddle_repository_apt_parseDeb_printControlField SHA256 "$(swaddle_digest sha256 "$debFilePath")"
		
		local description="$(swaddle_repository_apt_deb_extractFieldDescription)"
		swaddle_repository_apt_parseDeb_printControlField Description "$description"
		swaddle_repository_apt_parseDeb_createTranslationFragment
		
		# Ruby-Versions is a LIST which is NOT comma separated
		for fieldName in Xul-Appid Enhances Built-Using Multi-Arch Python-Runtime Python-Version Ruby-Versions Tag
		do
			swaddle_repository_apt_parseDeb_extractAndPrintControlField "$fieldName"
		done

		swaddle_repository_apt_parseDeb_extractAndPrintControlField Homepage "$(configure_getValue swaddle url)"
		
		for fieldName in Npp-Applications Npp-Description Npp-Filename Npp-Mimetype Npp-Name Gstreamer-Decoders Gstreamer-Elements Gstreamer-Encoders Gstreamer-Uri-Sinks Gstreamer-Uri-Sources Gstreamer-Version
		do
			swaddle_repository_apt_parseDeb_extractAndPrintControlField "$fieldName"
		done

		swaddle_repository_apt_parseDeb_extractAndPrintControlField Bugs "$bugsUrlDefault"
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Build-Essential 'no'
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Origin "$(configure_getValue swaddle vendor)"
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Supported "$(configure_getValue swaddle_deb supported)"
		swaddle_repository_apt_parseDeb_extractAndPrintControlField Task

		printf '\n'
	} >"$_swaddle_repository_apt_temporaryFolderPath"/package
	
	_swaddle_repository_apt_parseDeb_transformControlToPackagesFileEntry_callback()
	{
		local packageArchitecture="$core_variable_array_element"
		local packagesFolderPath="$repositoryPath"/"$poolComponent"/binary-"$packageArchitecture"
		mkdir -m 0755 -p "$packagesFolderPath"
		
		ln -f "$_swaddle_repository_apt_temporaryFolderPath"/package "$packagesFolderPath"/"$poolDebFile".Packages
	}
	
	if [ "$packageArchitecture" = 'all' ]; then
		swaddle_configure_apt_architectures _swaddle_repository_apt_parseDeb_transformControlToPackagesFileEntry_callback
	else
		local core_variable_array_element="$packageArchitecture"
		_swaddle_repository_apt_parseDeb_transformControlToPackagesFileEntry_callback
	fi
		
	rm "$_swaddle_repository_apt_temporaryFolderPath"/package
}

core_dependency_requires '*' cat rm
swaddle_repository_apt_parseDeb_extractContentsList()
{
	local fragmentFilePath="$repositoryPath"/Contents.tmp
	
	local filePathWithLeadingDotSlash
	tar --list --file "$dataTarFileName" | while IFS=' ' read -r filePathWithLeadingDotSlash
	do
		# Exclude folders
		if [ "$(core_variable_lastCharacter "$filePathWithLeadingDotSlash")" = '/' ]; then
			continue
		fi
		
		if [ "$poolComponent" = 'main' ]; then
			local location="$section"/"$package"
		else
			local location="$poolComponent"/"$section"/"$package"
		fi
		
		printf '%-60s%s\n' "$(core_variable_allButFirstN "$filePathWithLeadingDotSlash" 2)" "$location"
	done >"$fragmentFilePath"
	
	_swaddle_repository_apt_parseDeb_extractContentsList_callback()
	{
		local packageArchitecture="$core_variable_array_element"
		cat "$fragmentFilePath" >>"$repositoryPath"/Contents-"$packageArchitecture".tmp
	}
	
	if [ "$packageArchitecture" = 'all' ]; then
		swaddle_configure_apt_architectures _swaddle_repository_apt_parseDeb_extractContentsList_callback
	else
		local core_variable_array_element="$packageArchitecture"
		_swaddle_repository_apt_parseDeb_extractContentsList_callback
	fi
	
	rm "$fragmentFilePath"
}

core_dependency_requires '*' grep
swaddle_repository_apt_parseDeb_extractField()
{
	local fieldName="$1"
	local defaultValue="$2"
	
	local line="$(grep -E "^${fieldName}: " control)"
	if [ -z "$line" ]; then
		printf '%s' "$defaultValue"
		return 0
	fi
	local length=${#fieldName}
	printf '%s' "$(core_variable_allButFirstN "$line" $((length+2)))"
}

core_dependency_requires '*' grep
swaddle_repository_apt_deb_extractFieldDescription()
{
	local line
	local isFirst=0
	grep -A 40 '^Description: ' control | while IFS='' read -r line
	do
		if [ $isFirst -eq 0 ]; then
			# 13 is 'Description :'
			printf '%s\n' "$(core_variable_allButFirstN "$line" 13)"
			isFirst=1
		else
			if ! core_variable_firstCharacter "$line" ' '; then
				break
			fi
			if [ -z "$line" ]; then
				break
			fi
			printf '%s\n' "$(core_variable_allButFirstN "$line" 1)"
		fi
	done
}

core_dependency_requires '*' grep
swaddle_repository_apt_parseDeb_extractAndPrintControlField()
{
	local fieldName="$1"
	
	local line="$(grep -E "^${fieldName}: " control)"
	if [ -z "$line" ]; then
		if [ $# -eq 2 ]; then
			local fieldDefault="$2"
			printf '%s: %s\n' "$fieldName" "$fieldDefault"
		fi
	else
		printf '%s\n' "$line"
	fi
}

core_dependency_requires '*' grep
swaddle_repository_apt_parseDeb_extractAndPrintControlFieldSynonyms()
{
	local fieldName="$1"
	
	local synonymFieldName
	for synonymFieldName in "$@"
	do
		local line="$(grep -E "^${fieldName}: " control)"
		if [ -n "$line" ]; then
			local length=${#fieldName}
			fieldValue="$(core_variable_allButFirstN "$line" $((length+2)))"
			printf '%s: %s\n' "$fieldName" "$fieldValue"
			return 0
		fi
	done
}

swaddle_repository_apt_parseDeb_printControlField()
{
	local fieldName="$1"
	local fieldValue="$2"
	printf '%s: %s\n' "$fieldName" "$fieldValue"
}

core_dependency_requires '*' mkdir md5sum
swaddle_repository_apt_parseDeb_createTranslationFragment()
{
	local languageCode="$(configure_getValue swaddle_apt language)"
	local translationPath="$repositoryPath"/"$poolComponent"/i18n
	
	mkdir -m 0755 -p "$translationPath"
	
	local descriptionMd5
	local uselessFileName
	# The \n is significant
	IFS=' ' read -r descriptionMd5 uselessFileName <<-EOF
		$(printf '%s\n' "$description" | md5sum)
	EOF
	
	# We may overwrite an existing translation, as they are per package, not per package/version/architecture
	{
		printf "%s: %s\n" 'Package' "$package"
		printf "%s: %s\n" 'Description-md5' "$descriptionMd5"
		printf "%s: %s\n" "Description-$languageCode" "$description"
		printf '\n'
	} >"$translationPath"/"$package".Translation-"$languageCode"
	
	# This logic exists to support Debian 6 and Ubuntu 10.04 which have bugs in downloading Translation-en
	swaddle_repository_apt_parseDeb_createTranslationFragment_callback()
	{
		local additionalLanguageCode
		for additionalLanguageCode in "$@"
		do
			cp "$translationPath"/"$package".Translation-"$languageCode" "$translationPath"/"$package".Translation-"$additionalLanguageCode"
		done
	}
	_swaddle_repository_apt_additionalLanguageCodes "$languageCode" swaddle_repository_apt_parseDeb_createTranslationFragment_callback
}
