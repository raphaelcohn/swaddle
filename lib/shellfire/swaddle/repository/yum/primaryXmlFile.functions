# This file is part of swaddle. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT. No part of swaddle, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of swaddle. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT.


core_usesIn xmlwriter
core_usesIn swaddle/repository/yum rpmxml
core_usesIn swaddle digest
core_usesIn version
core_usesIn swaddle/build/package rpm

core_dependency_requires '*' rpm stat
swaddle_repository_yum_primaryXmlFile()
{
	{
		xmlwriter_declaration '1.0' 'UTF-8' 'no'
		
		xmlwriter_open metadata xmlns "http://linux.duke.edu/metadata/common" xmlns:rpm "http://linux.duke.edu/metadata/rpm" packages "$(swaddle_repository_yum_rpmxml_packageCount)"
		
			_swaddle_repository_yum_primaryXmlFile_callback()
			{
				local rpmName
				local rpmArchitecture
				local rpmEpoch
				local rpmVersion
				local rpmRelease
				local rpmSummary
				local rpmPackager
				local rpmUrl
				local rpmBuildTime
				local rpmInstalledSize
				local rpmArchiveSize
				local rpmLicense
				local rpmVendor
				local rpmGroup
				local rpmBuildHost
				local rpmSourceRpm
				
				# Aren't supported on CentOS 5
				local rpmPackageSize
				local rpmHeaderRangeStart
				local rpmHeaderRangeEnd
	
				local rpmSha256Sum
				local rpmTimestamp
				local rpmDescription
				local rpmFileName
				
				# PACKAGESIZE doesn't work on less than 5.1.2
				# HEADERSTARTOFF & HEADERENDOFF were introduced sometime at or before 5.2.0
				if swaddle_build_package_rpm_versionIsGreaterThanOrEqualTo 5.2.0; then
					IFS="$(printf '\t')" read -r rpmName rpmArchitecture rpmEpoch rpmVersion rpmRelease rpmSummary rpmPackager rpmUrl rpmBuildTime rpmInstalledSize rpmArchiveSize rpmLicense rpmVendor rpmGroup rpmBuildHost rpmSourceRpm rpmPackageSize rpmHeaderRangeStart rpmHeaderRangeEnd <<-EOF
						$(rpm --query --package "$rpmFilePath" --queryformat '%{NAME}\t%{ARCH}\t%{EPOCH}\t%{VERSION}\t%{RELEASE}\t%{SUMMARY}\t%{PACKAGER}\t%{URL}\t%{BUILDTIME}\t%{SIZE}\t%{ARCHIVESIZE}\t%{LICENSE}\t%{VENDOR}\t%{GROUP}\t%{BUILDHOST}\t%{SOURCERPM}\t%{PACKAGESIZE}\t%{HEADERSTARTOFF}\t%{HEADERENDOFF}')
					EOF
				else
					# Note the use of --quiet to suppress RPM 4 warnings about signatures
					IFS="$(printf '\t')" read -r rpmName rpmArchitecture rpmEpoch rpmVersion rpmRelease rpmSummary rpmPackager rpmUrl rpmBuildTime rpmInstalledSize rpmArchiveSize rpmLicense rpmVendor rpmGroup rpmBuildHost rpmSourceRpm <<-EOF
						$(rpm --nosignature --query --package "$rpmFilePath" --queryformat '%{NAME}\t%{ARCH}\t%{EPOCH}\t%{VERSION}\t%{RELEASE}\t%{SUMMARY}\t%{PACKAGER}\t%{URL}\t%{BUILDTIME}\t%{SIZE}\t%{ARCHIVESIZE}\t%{LICENSE}\t%{VENDOR}\t%{GROUP}\t%{BUILDHOST}\t%{SOURCERPM}')
					EOF
					
					rpmPackageSize="$(stat -c '%s' "$rpmFilePath")"
					
					# It is possible to reimplement in shell script using od / dd (after all these are just offsets), etc, the logic of def _get_header_byte_range(self) in  http://yum.baseurl.org/gitweb?p=yum.git;a=blob;f=yum/packages.py;h=f72c068200587288a7c42371f7dacb2faba60991;hb=refs/heads/yum-3_2_X
					# But this rpm issue suggests the data isn't used: http://rpm.org/ticket/850
					if core_variable_isUnset _swaddle_repository_yum_warnedAboutHeaderOffsets; then
						core_message WARN "Older versions of RPM don't support any way of extracting Header Start and End Offsets. Forcing these to 0, which may break old yum clients."
						_swaddle_repository_yum_warnedAboutHeaderOffsets=true
					fi
					rpmHeaderRangeStart=0
					rpmHeaderRangeEnd=0
				fi
				
				rpmSha256Sum="$(swaddle_digest sha256 "$rpmFilePath")"
				rpmTimestamp="$(stat -c '%Y' "$rpmFilePath")"
				set +e
				local rpmDescriptionCanCauseSegmentationFault="$(rpm --nosignature --query --package "$rpmFilePath" --queryformat '%{DESCRIPTION}')" # Note the use of --quiet to suppress RPM 4 warnings about signatures
				local exitCode=$?
				set -e
				if [ $exitCode -ne 0 ]; then
					rpmDesciption="RPM segmentation fault producing description"
				else
					rpmDescription="$rpmDescriptionCanCauseSegmentationFault"
				fi
				rpmFileName="$(core_compatibility_basename "$rpmFilePath")"
				
				xmlwriter_open package type 'rpm'
					xmlwriter_leaf name "$rpmName"
					xmlwriter_leaf arch "$rpmArchitecture"
					xmlwriter_leaf version epoch "$rpmEpoch" ver "$rpmVersion" rel "$rpmRelease"
					xmlwriter_leaf checksum type 'sha256' pkgid 'YES' "$rpmSha256Sum"
					xmlwriter_leaf summary "$rpmSummary"
					xmlwriter_leaf description "$rpmDescription"
					xmlwriter_leaf packager "$rpmPackager"
					xmlwriter_leaf url "$rpmUrl"
					xmlwriter_leaf time file "$rpmTimestamp" build "$rpmBuildTime"
					xmlwriter_leaf size package "$rpmPackageSize" installed "$rpmInstalledSize" archive "$rpmArchiveSize"
					xmlwriter_leaf location href "$rpmArchitecture/$rpmFileName"
					xmlwriter_open format
						xmlwriter_leaf rpm:license "$rpmLicense"
						xmlwriter_leaf rpm:vendor "$rpmVendor"
						xmlwriter_leaf rpm:group "$rpmGroup"
						xmlwriter_leaf rpm:buildhost "$rpmBuildHost"
						xmlwriter_leaf rpm:sourcerpm "$rpmSourceRpm"
						xmlwriter_leaf rpm:header-range start "$rpmHeaderRangeStart" end "$rpmHeaderRangeEnd"
						swaddle_repository_yum_primaryXmlFile_entries rpm:provides '[%{PROVIDES}\t%{PROVIDEVERSION}\t%{PROVIDEFLAGS:depflags}\n]'
						swaddle_repository_yum_primaryXmlFile_entries rpm:requires '[%{REQUIRENAME}\t%{REQUIREVERSION}\t%{REQUIREFLAGS:depflags}\n]'
						swaddle_repository_yum_primaryXmlFile_entries rpm:conflicts '[%{CONFLICTS}\t%{CONFLICTVERSION}\t%{CONFLICTFLAGS:depflags}\n]'
						swaddle_repository_yum_primaryXmlFile_entries rpm:obsoletes '[%{OBSOLETES}\t%{OBSOLETEVERSION}\t%{OBSOLETEFLAGS:depflags}\n]'
						swaddle_repository_yum_rpmxml_files _swaddle_repository_yum_filelistsXmlFile_onlyBinaryFilesFilterCallback
					xmlwriter_close format
				xmlwriter_close package
			}
			swaddle_repository_yum_rpmxml_iterateRpmFiles _swaddle_repository_yum_primaryXmlFile_callback
			
		xmlwriter_close metadata
	} >"$_swaddle_repository_yum_repodataPath"/primary.xml
	
	swaddle_repository_yum_rpmxml_addToRepodata primary
}

# It is possible other things should be included
_swaddle_repository_yum_filelistsXmlFile_onlyBinaryFilesFilterCallback()
{
	if [ "$fileClass" = 'directory' ]; then
		return 1
	fi
	
	case "$filePath" in
		
		/bin/*)
			return 0
		;;
		
		/sbin/*)
			return 0
		;;
		
		/usr/bin/*)
			return 0
		;;
		
		/usr/sbin/*)
			return 0
		;;
		
		/usr/local/bin/*)
			return 0
		;;
		
		/usr/local/sbin/*)
			return 0
		;;
		
		*)
			return 1
		;;
		
	esac
}

core_dependency_requires '*' rpm cat
swaddle_repository_yum_primaryXmlFile_entries()
{
	local section="$1"
	local querystring="$2"
	
	# This revolting logic exists because some yum repodata parsers don't like having empty entries sections, eg <rpm:conflicts></rpm:conflicts>, instead preferring they are omitted.
	local hasAtLeastOneEntry=false
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	local temporaryRpmEntriesXmlFragmentToOnlyUseIfNonZeroNumberOfEntriesFilePath="$TMP_FILE"
	{
		xmlwriter_open "$section"
	
			local entryName
			local entryEpochVersionRelease
			local entryFlags
			local entryFlagsConverted
	
			local lastEntryName
			local lastEntryEpochVersionRelease
			local lastEntryFlags
			local lastEntryCount
			lastEntryName=''
			lastEntryEpochVersionRelease=''
			lastEntryFlags=''
			lastEntryCount=0
	
			local entryEpoch
			local entryRemainder
			local entryVersion
			local entryRelease
			# Note the use of --quiet to suppress RPM 4 warnings about signatures
			rpm --nosignature --query --package "$rpmFilePath" --queryformat "$querystring" 2>/dev/null | while IFS="$(printf '\t')" read -r entryName entryEpochVersionRelease entryFlags
			do
				set -- rpm:entry name "$entryName"
		
				# This revolting mess is to handle that things like /bin/sh can appear up to 4 times, but are recorded as a duplicate in the XML only on the second occurrence. Weird.
				if [ "$lastEntryName" = "$entryName" ]; then
					if [ $lastEntryCount -eq 1 ]; then
						continue
					fi
					if [ "$lastEntryEpochVersionRelease" = "$entryEpochVersionRelease" ]; then
						if [ "$lastEntryFlags" = "$entryFlags" ]; then
							if [ $lastEntryCount -eq 0 ]; then
								set -- "$@" pre 1
								xmlwriter_leaf "$@"
								continue
							else
								lastEntryCount=1
							fi
						else
							lastEntryCount=0
						fi
					else
						lastEntryCount=0
					fi
				else
					lastEntryCount=0
				fi
		
		
				if [ -n "$entryFlags" ]; then
					case "$entryFlags" in
						
						# RPM 5 surrounds with spaces, RPM 4 doesn't
						# RPM 5|RPM 4
						' < '|'<')
							entryFlagsConverted=LT
						;;
				
						' > '|'>')
							entryFlagsConverted=GT
						;;
				
						' >= '|'>=')
							entryFlagsConverted=GE
						;;
				
						' <= '|'<=')
							entryFlagsConverted=LE
						;;
				
						' = '|'=')
							entryFlagsConverted=EQ
						;;
				
						' != '|'!=')
							entryFlagsConverted=NE
						;;
				
						*)
							core_exitError $core_commandLine_exitCode_SOFTWARE "Unknown entry constraint '$entryFlags'"
						;;
				
					esac
			
					# Parse the entryEpochVersionRelease
			
					IFS=':' read -r entryEpoch entryRemainder <<-EOF
						$entryEpochVersionRelease
					EOF
			
					# Problems due to leading ':' and bash / sh's bizarre splitting rules
					if [ -z "$entryRemainder" ]; then
						entryRemainder="$entryEpoch"
						entryEpoch='0'
					# prefixed by ':' not '0:'
					elif [ -z "$entryEpoch" ]; then
						entryEpoch='0'
					fi
			
					IFS='-' read -r entryVersion entryRelease <<-EOF
						$entryRemainder
					EOF
			
					set -- "$@" flags "$entryFlagsConverted" epoch "$entryEpoch" ver "$entryVersion"
			
					if [ -n "$entryRelease" ]; then
						set -- "$@" rel "$entryRelease"
					fi
				fi
		
				xmlwriter_leaf "$@"
				hasAtLeastOneEntry=true
		
				lastEntryName="$entryName"
				lastEntryEpochVersionRelease="$entryEpochVersionRelease"
				lastEntryFlags="$entryFlags"
			done
	
		xmlwriter_close "$section"
	} >"$temporaryRpmEntriesXmlFragmentToOnlyUseIfNonZeroNumberOfEntriesFilePath"
	
	if $hasAtLeastOneEntry; then
		cat "$temporaryRpmEntriesXmlFragmentToOnlyUseIfNonZeroNumberOfEntriesFilePath"
	fi
}
