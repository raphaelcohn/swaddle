core_usesIn swaddle webserverFiles

core_dependency_requires '*' rm
swaddle_compress_variants_clean()
{
	local existingFilePath="$1"
	
	local compressor
	for compressor in none lzop zip gzip bzip2 rzip lzma xz lzip zpaq lrzip
	do
		rm -f "$existingFilePath"$(swaddle_compress_extension "$compressor")
	done
}

core_dependency_requires '*' rm
swaddle_compress_variants()
{
	local namespace="$1"
	local valueName="$2"
	local originalFilePath="$3"
	local callbackPerCompressedFile="$4"
	shift 4

	local keepUncompressedFile=no
	_swaddle_build_package_tar_compress_callback()
	{
		local compressor="$core_variable_array_element"
		if [ "$compressor" = 'none' ]; then
			keepUncompressedFile=yes
		else
			swaddle_compress_${compressor} "$originalFilePath"
		fi
		local compressedFileName="$originalFilePath"$(swaddle_compress_extension "$compressor")
		if [ -n "$callbackPerCompressedFile" ]; then
			$callbackPerCompressedFile "$compressedFileName"
		fi
	}
	
	configure_iterateOverArrayWithDefaultsIfEmpty "$namespace" "$valueName" _swaddle_build_package_tar_compress_callback "$@"
	
	if core_variable_isFalse "$keepUncompressedFile"; then
		rm "$originalFilePath"
	fi
}

swaddle_compress_extension()
{
	case "$1" in
		
		none)
			printf ''
		;;
		
		lzop)
			printf '.lzo'
		;;
		
		zip)
			printf '.zip'
		;;
		
		gzip)
			printf '.gz'
		;;
		
		bzip2)
			printf '.bz2'
		;;
		
		rzip)
			printf '.rz'
		;;
		
		lzma)
			printf '.lzma'
		;;
		
		xz)
			printf '.xz'
		;;
		
		lzip)
			printf '.lz'
		;;
		
		zpaq)
			printf '.zpaq'
		;;
		
		lrzip)
			printf '.lrz'
		;;
		
	esac
}

swaddle_compress_mimeType()
{
	case "$1" in
		
		none)
			printf 'application/octet-stream'
		;;
		
		lzop)
			printf 'application/x-lzop'
		;;
		
		zip)
			printf 'application/zip'
		;;
		
		gzip)
			printf 'application/gzip'
		;;
		
		bzip2)
			printf 'application/x-bzip2'
		;;
		
		rzip)
			printf 'application/octet-stream'
		;;
		
		lzma)
			printf 'application/x-lzma'
		;;
		
		xz)
			printf 'application/x-xz'
		;;
		
		lzip)
			printf 'application/x-lzip'
		;;
		
		zpaq)
			printf 'application/octet-stream'
		;;
		
		lrzip)
			printf 'application/x-lrzip'
		;;
		
	esac
}

core_dependency_requires '*' cat lzop touch
swaddle_compress_lzop()
{
	# This way seems odd but reduces compressed file size as mode, timestamp not stored (and unlike gzip, -n does not work for compression)
	cat "$1" | lzop -9 -c -q >"$1".lzo
	touch -r "$1" "$1".lzo
}

# Strictly, zip is an archive with compression; this technique creates single-file archives, useful mostly for Windows or specialist settings.
core_dependency_requires '*' pigz
swaddle_compress_zip()
{
	pigz -K -11 -c -q -f -- "$1" >"$1".gz
}

core_dependency_requires '*' pigz zopfli gzip touch
core_usesIn configure
swaddle_compress_gzip()
{
	local fileName="$1"
	if core_compatibility_whichNoOutput pigz; then
		# -T strips the timestamp - not an option on gzip, it seems
		# -I <iterations> does not work in Ubuntu 14.04
		# Compression sizes varies from run to run... and corrupt archives seem possible
		pigz -11 -c -q -f -n -T -- "$1" >"$1".gz
	elif core_compatibility_whichNoOutput zopfli; then
		zopfli -c --gzip --i15 -- "$1" >"$1".gz
	else
		gzip -9 -c -q -f -n -- "$1" >"$1".gz
	fi
	touch -r "$1" "$1".gz
}

core_dependency_requires '*' pbzip2 touch
swaddle_compress_bzip2()
{
	if core_compatibility_whichNoOutput bzip2; then
		bzip2 -9 -c -q -f "$1" >"$1".bz2
	else
		# Parallel bzip has worse compression
		pbzip2 -9 -c -q -f "$1" >"$1".bz2
	fi
	touch -r "$1" "$1".bz2
}

core_dependency_requires '*' lzma touch
swaddle_compress_lzma()
{
	lzma -9 -c -q -f "$1" >"$1".lzma
	touch -r "$1" "$1".lzma
}

core_dependency_requires '*' rzip touch
swaddle_compress_rzip()
{
	rzip -9 -f -k -o "$1".rz "$1"
	touch -r "$1" "$1".rz
}

# pixz
core_dependency_requires '*' pixz xz touch
swaddle_compress_xz()
{
	# pixz is c. 4 bytes worse in 3M, but much faster
	if core_compatibility_whichNoOutput pixz; then
		pixz -t -9 -e -i "$1" -o "$1".xz
	else
		# --format=raw knocks off 32 bytes+ but is not auto-detectable.
		xz -9 -c -q -f -e "$1" >"$1".xz
	fi
	touch -r "$1" "$1".xz
}

# lzip beats xz on tarballs, even when xz uses --format=raw
core_dependency_requires '*' plzip lzip touch
swaddle_compress_lzip()
{
	if core_compatibility_whichNoOutput lzip; then
		lzip -9 -c -q -f "$1" >"$1".lz
	else
		# Parallel plzip has worse compression
		plzip -9 -c -q -f "$1" >"$1".lz
	fi
	touch -r "$1" "$1".lz
}

# Works far better than tar, of course...
core_dependency_requires '*' zpaq touch
swaddle_compress_zpaq()
{
	zpaq a "$1".zpaq "$1"
	touch -r "$1" "$1".zpaq
}

core_dependency_requires '*' lrzip touch
swaddle_compress_lrzip()
{
	lrzip -q -k -f -z -L 9 -o "$1".lrz "$1"
	touch -r "$1" "$1".lrz
}

# Specialised: szip, for scientific data
# Specialised: snzip, for snappy (various formats, some are obsolete)
	