core_usesIn swaddle build repository configure/register
core_usesIn configure

swaddle_all()
{
	core_functions_execute _swaddle_functions "$@"
}

core_functions_register _swaddle_functions swaddle_makeSwaddlesPathAbsolute
swaddle_makeSwaddlesPathAbsolute()
{
	pushd "$swaddle_swaddlingPath"
		swaddle_swaddlingPath="$(pwd)"
	popd
}

core_dependency_requires '*' mkdir
core_functions_register _swaddle_functions swaddle_createOutputFolder
swaddle_createOutputFolder()
{
	mkdir -m 0700 -p "$swaddle_outputPath" 2>/dev/null || true
	pushd "$swaddle_outputPath"
		swaddle_outputPath="$(pwd)"
	popd
	
	if core_variable_isTrue "$swaddle_cleanOutput"; then
		set +f
		rm -rf "$swaddle_outputPath"/*
		set +f
	fi
}

core_dependency_requires '*' mkdir
core_functions_register _swaddle_functions swaddle_createTemporaryFolder
swaddle_createTemporaryFolder()
{
	if core_variable_isUnset swaddle_temporaryPath; then
		local TMP_FOLDER
		core_temporaryFiles_newFolderToRemoveOnExit
		swaddle_temporaryPath="$TMP_FOLDER"
	else
		mkdir -m 0700 -p "$swaddle_temporaryPath" 2>/dev/null || true
		pushd "$swaddle_temporaryPath"
			swaddle_temporaryPath="$(pwd)"
		popd
	fi
}

core_dependency_requires '*' mkdir
core_functions_register _swaddle_functions swaddle_createPackagesFolder
swaddle_createPackagesFolder()
{
	_swaddle_temporaryFolderPath="$swaddle_temporaryPath"/swaddling
	rm -rf "$_swaddle_temporaryFolderPath"|| core_exitError $core_commandLine_exitCode_CANTCREAT "Can not recreate temporary swaddling path '$_swaddle_temporaryFolderPath'."
	mkdir -m 0700 -p "$_swaddle_temporaryFolderPath"
}

core_functions_register _swaddle_functions swaddle_registerConfiguration
swaddle_registerConfiguration()
{
	core_functions_execute _swaddle_configure_register_functions "$@"
}

core_functions_register _swaddle_functions swaddle_resetConfiguration
swaddle_resetConfiguration()
{
	configure_reset swaddle
}

core_functions_register _swaddle_functions swaddle_sourceConfiguration
swaddle_sourceConfiguration()
{
	configure_source "$swaddle_swaddlingPath" swaddling
}

core_usesIn swaddle git
core_functions_register _swaddle_functions swaddle_publishToGithubPagesPrepare
swaddle_publishToGithubPagesPrepare()
{
	if swaddle_git_swaddlingCanUseGit; then
		return 0
	fi
	
	if swaddle_git_pathIsInGitRepository "$swaddle_outputPath"; then
		_swaddle_canPublishToGithubPages=1
	else
		_swaddle_canPublishToGithubPages=0
		return 0
	fi
	
	# https://help.github.com/articles/creating-project-pages-manually/
	
	if [ -d "$swaddle_outputPath"/.git ]; then
		git pull --quiet
	else
		git clone --quiet "$_swaddle_git_swaddlingPathGitRoot" -- "$swaddle_outputPath"
	fi
	
	# Re-entrant
	pushd "$swaddle_outputPath"
		# Can succeed even if branch already created, if branch not commited
		if git checkout --orphan gh-pages 2>/dev/null; then
			# Fails on a subsequent run if previous run aborted (pathspec does not match)
			git rm -rf . 1>/dev/null 2>/dev/null || true
			
			# Why this logic?
			# - command above leaves empty folder rubble behind
			# - a previous run may have aborted, leaving stuff not yet checked in
			set +f
			local folder
			for folder in *
			do
				set -f
				if [ ! -e "$folder" ]; then
					continue
				fi
				if [ "$folder" = '.git' ]; then
					continue
				fi
				rm -rf "$folder"
			done
			set +f
			
		else
			git checkout gh-pages 1>/dev/null 2>/dev/null
		fi
	popd
}

core_functions_register _swaddle_functions swaddle_build
swaddle_build()
{
	core_variable_array_iterate swaddle_swaddling swaddle_build_all
	swaddle_repository apt deb
	swaddle_repository yum rpm
	
	swaddle_webserverFiles_create "$swaddle_outputPath"
	
	swaddle_gpg_publishSigningKey
}

core_functions_register _swaddle_functions swaddle_resetConfiguration
core_functions_register _swaddle_functions swaddle_sourceConfiguration

core_functions_register _swaddle_functions swaddle_publishToGithubPagesFinish
swaddle_publishToGithubPagesFinish()
{
	local repositoryName="$(configure_getConfigurationSetting swaddle repository_name)"
	local version="$(configure_getConfigurationSetting swaddle version)"
	local timestampInEpochSeconds="$(swaddle_configure_timestamp)"
	
	local tagMessage="Packaged repository '$repositoryName' version '$version' at epoch seconds '$timestampInEpochSeconds'"
	local tagName="pages_${repositoryName}_${version}"
	
	swaddle_publishToGithubPagesFinish_tag()
	{
		local iterationCount=$1
		if [ $iterationCount -ne 0 ]; then
			local thisAttemptTagMessage="$tagMessage (revision $iterationCount)"
			local thisAttemptTagName="${tagName}_${iterationCount}"
		else
			local thisAttemptTagMessage="$tagMessage"
			local thisAttemptTagName="$tagName"
		fi
		
		if core_variable_isTrue "$(swaddle_configure_sign)"; then
			git tag --sign --local-user="$(swaddle_configure_signer)" --message="$thisAttemptTagMessage" "$thisAttemptTagName" 2>/dev/null || swaddle_publishToGithubPagesFinish_tag $((iterationCount+1))
		else
			git tag --annotate --message="$thisAttemptTagMessage" "$thisAttemptTagName" 2>/dev/null || swaddle_publishToGithubPagesFinish_tag $((iterationCount+1))
		fi
	}
	
	pushd "$swaddle_outputPath"
		
		git add --all . 1>/dev/null
		
		if core_variable_isTrue "$(swaddle_configure_sign)"; then
			git commit --quiet --all --author="$(swaddle_configure_maintainer)" --signoff --date="$timestampInEpochSeconds" -m "Packaged repository '$repositoryName' version '$version' at epoch seconds '$timestampInEpochSeconds'" --gpg-sign="$(swaddle_configure_signer)"
		else
			git commit --quiet --all --author="$(swaddle_configure_maintainer)" --signoff --date="$timestampInEpochSeconds" -m "Packaged repository '$repositoryName' version '$version' at epoch seconds '$timestampInEpochSeconds'"
		fi
		
		swaddle_publishToGithubPagesFinish_tag 0
		
		git push --quiet --tags --set-upstream origin gh-pages
		
	popd
}
