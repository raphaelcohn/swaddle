core_usesIn swaddle build repository/yum
core_usesIn configure

swaddle_swaddles_all()
{
	core_functions_execute _swaddle_swaddles_functions "$@"
}

core_dependency_requires '*' mkdir
core_functions_register _swaddle_swaddles_functions swaddle_swaddles_createTemporaryFolder
swaddle_swaddles_createTemporaryFolder()
{
	if core_variable_isUnset swaddle_temporaryPath; then
		local TMP_FOLDER
		core_temporaryFiles_newFolderToRemoveOnExit
		swaddle_temporaryPath="$TMP_FOLDER"
	else
		mkdir -m 0700 -p "$swaddle_temporaryPath" 2>/dev/null || true
	fi
}

core_dependency_requires '*' mkdir
core_functions_register _swaddle_swaddles_functions swaddle_swaddles_createPackagesFolder
swaddle_swaddles_createPackagesFolder()
{
	_swaddle_swaddles_temporaryFolderPath="$swaddle_temporaryPath"/swaddles
	rm -rf "$_swaddle_swaddles_temporaryFolderPath"|| core_exitError $core_commandLine_exitCode_CANTCREAT "Can not recreate temporary swaddles path '$_swaddle_swaddles_temporaryFolderPath'."
	mkdir -m 0700 -p "$_swaddle_swaddles_temporaryFolderPath"
}

core_functions_register _swaddle_swaddles_functions swaddle_swaddles_deduceIfSwaddlesAreInGit
swaddle_swaddles_deduceIfSwaddlesAreInGit()
{
	if ! core_compatibility_whichNoOutput git; then
		_swaddle_swaddles_canUseGit=0
		return 0
	fi
		
	if git log -n 0 "$swaddle_swaddlesPath" 2>/dev/null; then
		_swaddle_swaddles_canUseGit=1
	else
		_swaddle_swaddles_canUseGit=0
	fi
}

core_functions_register _swaddle_swaddles_functions swaddle_swaddles_registerConfiguration
swaddle_swaddles_registerConfiguration()
{
	# derive name from folderpath
	local defaultName="$(core_compatibility_basename "$swaddle_swaddlesPath")"
	configure_register Value NotEmpty swaddle repositoryName "$defaultName"
	
	# Might want to use github pages going forward...
	#http://blog.teamtreehouse.com/using-github-pages-to-host-your-website
	##https://bintray.com/
	configure_register Value NotEmpty swaddle hostBaseUrl
	
	if core_variable_isSet HOME; then
		if core_path_isReadableAndSearchableFolderPath "$HOME/.gnupg"; then
			configure_register Value ReadableSearchableFolderPath swaddle keyring "$HOME/.gnupg"
		else
			configure_register Value ReadableSearchableFolderPath swaddle keyring
		fi
	else
		configure_register Value ReadableSearchableFolderPath swaddle keyring
	fi

	configure_register Value NotEmpty swaddle maintainer_name
	configure_register Value NotEmpty swaddle maintainer_comment
	configure_register Value NotEmpty swaddle maintainer_email
	# Cranking up to 50 can produce slight improvements (24 bytes in 1 Mb)
	configure_register Value NotEmpty swaddle zopfli_iterations 15
	
	configure_register Value Boolean swaddle sign
	
	configure_register Array NotEmpty swaddle mirrors
	
	configure_register Array NotEmpty swaddle apt_architectures
}

core_dependency_requires '*' git date awk
core_functions_register _swaddle_swaddles_functions swaddle_swaddles_registerConfiguration_attemptToDiscoverVersionAndMtime
swaddle_swaddles_registerConfiguration_attemptToDiscoverVersionAndMtime()
{
	if core_variable_isFalse "$_swaddle_swaddles_canUseGit"; then
		configure_register Value NotEmpty swaddle timestamp 0
		configure_register Value NotEmpty swaddle version '0'
		configure_register Value NotEmpty swaddle iteration '1'
		return 0
	fi
	
	pushd "$swaddle_swaddlesPath"
		
		local iso8601Date="$(git log -n 1 --format='%ci')"
		
		local timestamp="$(date -d "$iso8601Date" +'%s')"
		configure_register Value NotEmpty swaddle timestamp "$timestamp"
		
		local version="$(date -d "$iso8601Date" '+%Y.%m.%d.%H.%M')"
		configure_register Value NotEmpty swaddle version "$version"
		
		local pendingChanges="$(git diff --minimal --no-color --name-status)"
		if [ -n "$pendingChanges" ]; then
			# We bump iteration; not a perfect solution, but at least we differentiate
			configure_register Value NotEmpty swaddle iteration '2'
		else
			configure_register Value NotEmpty swaddle iteration '1'
		fi
		
	popd
}

core_dependency_requires '*' head
core_functions_register _swaddle_swaddles_functions swaddle_swaddles_registerConfiguration_attemptToDiscoverLicence
swaddle_swaddles_registerConfiguration_attemptToDiscoverLicence()
{
	if core_variable_isFalse "$_swaddle_swaddles_canUseGit"; then
		configure_register Value Licence swaddle licence
		return 0
	fi
	
	local currentPath="$swaddle_swaddlesPath"
	while true
	do
		if [ -d "$currentPath"/.git ]; then
			break
		fi
		currentPath="$currentPath"/..
	done
	
	local licenceFilePath="$currentPath"/LICENCE
	if ! core_path_isReadableNonEmptyFilePath "$licenceFilePath"; then
		return 0
	fi
	
	local licence
	case "$(head -n 1 "$licenceFilePath")" in
		
		'The MIT License (MIT)')
			licence='MIT'
		;;
		
		*)
			core_message NOTICE "Could not determine your licence automatically, please submit a pull request for swaddle"
			return 0
		;;
		
	esac

	configure_register Value Licence swaddle licence "$licence"
}

core_dependency_requires '*' git awk
core_functions_register _swaddle_swaddles_functions swaddle_swaddles_registerConfiguration_attemptToDiscoverUrl
swaddle_swaddles_registerConfiguration_attemptToDiscoverUrl()
{
	if core_variable_isFalse "$_swaddle_swaddles_canUseGit"; then
		configure_register Value NotEmpty swaddle url
		return 0
	fi
	
	local fetchUrl
	pushd "$swaddle_swaddlesPath"
	
		fetchUrl="$(git remote show -n origin | awk '$1 ~ /Fetch/ {print $3}')"
		if [ "$fetchUrl" = 'origin' ]; then
			return 0
		fi
		
	popd
	
	configure_register Value NotEmpty swaddle url "$fetchUrl"
}

core_dependency_requires '*' date
core_functions_register _swaddle_swaddles_functions swaddle_swaddles_registerConfiguration_attemptToDiscoverRpmChangelog
swaddle_swaddles_registerConfiguration_attemptToDiscoverRpmChangelog()
{
	if core_variable_isFalse "$_swaddle_swaddles_canUseGit"; then
		return 0
	fi
	
	local epochSeconds
	local author
	local authorEmail
	local commitHash
	local subject
	local changelogDate
	pushd "$swaddle_swaddlesPath"
		
		_swaddle_swaddles_attemptToDiscoverRpmChangelog_internal()
		{
			git log --format='%at%x09%aN%x09%aE%x09%H%x09%s' | while IFS="$(printf '\t')" read -r epochSeconds author authorEmail commitHash subject
			do
				changelogDate="$(date -u -d @${epochSeconds} '+%a %b %d %Y')"
				printf '* %s %s <%s> - %s\n' "$changelogDate" "$author" "$authorEmail" "$commitHash"
				printf '%s %s\n' '-' "$subject"
				printf '\n'
			done
		}
		
		configure_register Value NotEmpty swaddle_rpm changelog "$(_swaddle_swaddles_attemptToDiscoverRpmChangelog_internal)"
		
	popd
}

core_functions_register _swaddle_build_package_functions swaddle_swaddles_registerConfiguration_miscellany
core_dependency_requires '*' git awk
swaddle_swaddles_registerConfiguration_miscellany()
{
	configure_register Value Architecture swaddle architecture  'all'
	configure_register Value NotEmpty swaddle epoch '0'
	configure_register Value NotEmpty swaddle vendor
	configure_register Value NotEmpty swaddle description
	configure_register Value NotEmpty swaddle fix_permissions 'swaddle_build_package_defaultFixPermissions'
}

core_functions_register _swaddle_build_package_functions swaddle_swaddles_registerConfiguration_byPackageKind
core_dependency_requires '*' git awk
swaddle_swaddles_registerConfiguration_byPackageKind()
{
	swaddle_build_package_deb_registerConfiguration
	swaddle_build_package_rpm_registerConfiguration
	swaddle_build_package_tar_registerConfiguration
}

core_dependency_requires '*' mkdir
core_functions_register _swaddle_swaddles_functions swaddle_swaddles_createOutputFolder
swaddle_swaddles_createOutputFolder()
{
	mkdir -m 0700 -p "$swaddle_outputPath" 2>/dev/null || true
	
	local repositoryName="$(configure_getConfigurationSetting swaddle repositoryName)"
	_swaddle_repository_yum_parentPath="$swaddle_outputPath"/"$repositoryName"/rpm
	_swaddle_repository_deb_parentPath="$swaddle_outputPath"/"$repositoryName"/deb
	_swaddle_repository_tar_parentPath="$swaddle_outputPath"/"$repositoryName"/tar
}

core_functions_register _swaddle_swaddles_functions swaddle_swaddles_buildSwaddles
swaddle_swaddles_buildSwaddles()
{
	core_variable_array_iterate swaddle_swaddles swaddle_build_all
}

core_functions_register _swaddle_swaddles_functions swaddle_swaddles_buildRepositories
swaddle_swaddles_buildRepositories()
{
	swaddle_repository_yum
	swaddle_repository_apt
}
