core_usesIn swaddle/build configuration build

swaddles_all()
{
	core_functions_execute _swaddles_functions "$@"
}

swaddles_deduceIfSwaddlesAreInGit()
{
	if ! core_compatibility_whichNoOutput git; then
		_swaddles_canUseGit=0
		return 0
	fi
		
	if git log -n 0 "$swaddle_swaddlesPath" 2>/dev/null; then
		_swaddles_canUseGit=1
	else
		_swaddles_canUseGit=0
	fi
}

core_dependency_requires '*' mkdir
core_functions_register _swaddles_functions swaddles_createTemporaryFolder
swaddles_createTemporaryFolder()
{
	if core_variable_isUnset swaddle_temporaryPath; then
		local TMP_FOLDER
		core_temporaryFiles_newFolderToRemoveOnExit
		swaddle_temporaryPath="$TMP_FOLDER"
	else
		mkdir -m 0700 -p "$swaddle_temporaryPath" 2>/dev/null || true
	fi
}

core_dependency_requires '*' rm mkdir
core_functions_register _swaddles_functions swaddles_createEmptyFolderSoWeCanLeverageRsyncToRemoveBody
swaddles_createEmptyFolderSoWeCanLeverageRsyncToRemoveBody()
{
	_swaddles_emptyFolderSoWeCanLeverageRsyncToRemoveBodyPath="$swaddle_temporaryPath"/empty
	rm -rf "$_swaddles_emptyFolderSoWeCanLeverageRsyncToRemoveBodyPath" || core_exitError $core_commandLine_exitCode_CANTCREAT "Can not recreate temporary empty path '$_swaddles_emptyFolderSoWeCanLeverageRsyncToRemoveBodyPath'."
	mkdir -m 0700 -p "$_swaddles_emptyFolderSoWeCanLeverageRsyncToRemoveBodyPath"
}

core_dependency_requires '*' mkdir
core_functions_register _swaddles_functions swaddles_createPackagesFolder
swaddles_createPackagesFolder()
{
	_swaddles_temporaryFolderPath="$swaddle_temporaryPath"/swaddles
	rm -rf "$_swaddles_temporaryFolderPath"|| core_exitError $core_commandLine_exitCode_CANTCREAT "Can not recreate temporary swaddles path '$_swaddles_temporaryFolderPath'."
	mkdir -m 0700 -p "$_swaddles_temporaryFolderPath"
}

core_dependency_requires '*' mkdir
core_functions_register _swaddles_functions swaddles_createOutputFolder
swaddles_createOutputFolder()
{
	mkdir -m 0700 -p "$swaddle_outputPath" 2>/dev/null || true
}

core_dependency_requires '*' git date awk md5sum
core_functions_register _swaddles_functions swaddles_attemptToDiscoverVersion
swaddles_attemptToDiscoverVersion()
{
	pushd "$swaddle_swaddlesPath"
		
		local iso8601Date="$(git log -n 1 --format='%ci')"
		local version="$(date -d "$iso8601Date" '+%Y.%m.%d.%H.%M')"
		
		swaddle_build_configuration_register Value NotEmpty swaddle version "$version"

		local pendingChanges="$(git diff --minimal --no-color --name-status)"
		if [ -n "$pendingChanges" ]; then
			# We bump iteration; not a perfect solution, but at least we differentiate
			swaddle_build_configuration_register Value NotEmpty swaddle iteration '1'
		else
			swaddle_build_configuration_register Value NotEmpty swaddle iteration '0'
		fi
		
	popd
}

core_dependency_requires '*' head
core_functions_register _swaddles_functions swaddles_attemptToDiscoverUrl
swaddles_attemptToDiscoverLicence()
{
	if core_variable_isFalse "$_swaddles_canUseGit"; then
		return 0
	fi
	
	local currentPath="$swaddle_swaddlesPath"
	while true
	do
		if [ -d "$currentPath"/.git ]; then
			break
		fi
		currentPath="$currentPath"/..
	done
	
	local licenceFilePath="$currentPath"/LICENCE
	if ! core_path_isReadableNonEmptyFilePath "$licenceFilePath"; then
		return 0
	fi
	
	local licence
	case "$(head -n 1 "$licenceFilePath")" in
		
		'The MIT License (MIT)')
			licence='MIT'
		;;
		
		*)
			core_message NOTICE "Could not determine your licence automatically, please submit a pull request for swaddle"
			return 0
		;;
		
	esac

	swaddle_build_configuration_register Value Licence swaddle licence "$licence"
}

core_dependency_requires '*' git awk
core_functions_register _swaddles_functions swaddles_attemptToDiscoverUrl
swaddles_attemptToDiscoverUrl()
{
	if core_variable_isFalse "$_swaddles_canUseGit"; then
		return 0
	fi
	
	local fetchUrl
	pushd "$swaddle_swaddlesPath"
	
		fetchUrl="$(git remote show -n origin | awk '$1 ~ /Fetch/ {print $3}')"
		if [ "$fetchUrl" = 'origin' ]; then
			return 0
		fi
		
	popd
	
	swaddle_build_configuration_register Value NotEmpty swaddle url "$fetchUrl"
}

core_dependency_requires '*' date
core_functions_register _swaddles_functions swaddles_attemptToDiscoverRpmChangelog
swaddles_attemptToDiscoverRpmChangelog()
{
	if core_variable_isFalse "$_swaddles_canUseGit"; then
		return 0
	fi
	
	local epochSeconds
	local author
	local authorEmail
	local commitHash
	local subject
	local changelogDate
	pushd "$swaddle_swaddlesPath"
		
		_swaddles_attemptToDiscoverRpmChangelog_internal()
		{
			git log --format='%at%x09%aN%x09%aE%x09%H%x09%s' | while IFS="$(printf '\t')" read -r epochSeconds author authorEmail commitHash subject
			do
				changelogDate="$(date -u -d @${epochSeconds} '+%a %b %d %Y')"
				printf '* %s %s <%s> - %s\n' "$epochSeconds" "$author" "$authorEmail" "$commitHash"
				printf '- %s\n' "$subject"
				printf '\n'
			done
		}
		
		swaddle_build_configuration_register Value NotEmpty swaddle_rpm changelog "$(_swaddles_attemptToDiscoverRpmChangelog_internal)"
		
	popd
}

core_functions_register _swaddles_functions swaddles_buildSwaddles
swaddles_buildSwaddles()
{
	core_variable_array_iterate swaddle_swaddles swaddle_build_all
}
