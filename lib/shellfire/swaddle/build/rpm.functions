swaddle_build_package_rpm_registerConfiguration()
{
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm depends
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm provides
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm conflicts
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm replaces
	
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm depends_before_install
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm depends_after_install
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm depends_before_remove
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm depends_after_remove
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm depends_pre_transaction
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm depends_post_transaction
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm depends_verify

	swaddle_build_configuration_register Value Boolean swaddle_rpm autoDepends 'yes'
	swaddle_build_configuration_register Value NotEmpty swaddle_rpm user 'root'
	swaddle_build_configuration_register Value NotEmpty swaddle_rpm group 'root'
	# Was '-'
	swaddle_build_configuration_register Value NotEmpty swaddle_rpm defattrfile '0644'
	# Was '-'
	swaddle_build_configuration_register Value NotEmpty swaddle_rpm defattrdir '0755'
	swaddle_build_configuration_register Value Digest swaddle_rpm digest 'sha512'
	swaddle_build_configuration_register Value Compression swaddle_rpm compression 'xz'
	swaddle_build_configuration_register Value RpmGroup swaddle_rpm compression 'xz'
	swaddle_build_configuration_register Value Boolean swaddle_rpm sign 'no'
	swaddle_build_configuration_register Value Boolean swaddle_rpm autoAddDirectories 'yes'
	swaddle_build_configuration_register Value Boolean swaddle_rpm autoReqProv 'yes'
	swaddle_build_configuration_register Value Boolean swaddle_rpm autoReq 'yes'
	swaddle_build_configuration_register Value Boolean swaddle_rpm autoProv 'yes'
	swaddle_build_configuration_register Value Boolean swaddle_rpm ignoreIterationInDependencies 'yes'
	
	# See https://fedoraproject.org/wiki/Packaging:AutoProvidesAndRequiresFiltering
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm regexFilterFromProvides
	swaddle_build_configuration_register Array NotEmpty swaddle_rpm regexFilterFromRequires
	
	swaddle_build_configuration_register Value NotEmpty swaddle_rpm changelog
}

swaddle_build_package_rpm()
{
	core_functions_execute _swaddle_build_package_rpm_functions "$@"
}

core_functions_register _swaddle_build_package_rpm_functions swaddle_build_package_rpm_setSpecFilePath
swaddle_build_package_rpm_setSpecFilePath()
{
	_swaddle_build_package_rpm_specFile="$_swaddle_build_package_temporaryFolderPath"/"$_swaddle_build_swaddleName".spec
}

core_functions_register _swaddle_build_package_rpm_functions swaddle_build_package_rpm_generateSpecFile
core_snippet_embed raw swaddle_rpm_spec_template
swaddle_build_package_rpm_generateSpecFile()
{
	core_snippet_retrieveAndSourceAsHereDoc swaddle_rpm_spec_template >"$_swaddle_build_package_rpm_specFile"
}

core_dependency_requires '*' rpmbuild
core_functions_register _swaddle_build_package_rpm_functions swaddle_package_rpm_rpmbuild
swaddle_package_rpm_rpmbuild()
{
	# Could this be outputFolder?
	mkdir -m 0700 -p "$_swaddle_build_package_temporaryFolderPath"/RPMS
	mkdir -m 0700 -p "$_swaddle_build_package_temporaryFolderPath"/temp
	
	local options
	local options_initialised
	core_variable_array_initialise options
	
	core_variable_array_append options '-bb'
	
	case "$(core_init_verbosity)" in
		
		0|1)
			:
		;;
		
		2)
			core_variable_array_append options -v
		;;
		
		*)
			core_variable_array_append options -vv
		;;
		
	esac
	
	if core_variable_isTrue "$(_swaddle_build_configuration_getConfigurationSetting swaddle_rpm sign)"; then
		core_variable_array_append options --sign
	fi
	
	echo FAIL
	exit 66
	core_variable_array_append options \
		--target "$(_swaddle_build_package_rpm_architecture)" \
		--define "buildroot $_swaddle_build_package_root" \
		--define "_topdir $_swaddle_build_package_temporaryFolderPath" \
		--define "_sourcedir $_swaddle_build_package_temporaryFolderPath" \
		--define "_rpmdir $_swaddle_build_package_temporaryFolderPath/RPMS" \
		--define "_tmppath $_swaddle_build_package_temporaryFolderPath/temp"
	
	core_variable_array_append options "$_swaddle_build_package_rpm_specFile"
	
	core_variable_array_passToFunctionAsArguments options rpmbuild
}

_swaddle_build_package_rpm_architecture()
{
	case "$(_swaddle_build_configuration_getConfigurationSetting swaddle architecture)" in
		
		all|noarch)
			printf '%s' 'noarch'
		;;
		
		amd64|x86_64)
			printf '%s' 'x86_64'
		;;
		
		# We don't bother with native / uname -m; it's wrong on the Mac (well, mine, as I run a 32-bit kernel on 64-bit machine) and AIX
		# bash's HOSTTYPE is useful but not available under sh
		
		*)
			printf '%s' "$swaddle_architecture"
		;;
		
	esac
}

_swaddle_build_package_rpm_digestAlgorithm()
{
	case "$(_swaddle_build_configuration_getConfigurationSetting swaddle_rpm digest)" in
		
		md5)
			printf '%s' 1
		;;
		
		sha1)
			printf '%s' 2
		;;
		
		sha256)
			printf '%s' 8
		;;
		
		sha384)
			printf '%s' 9
		;;
		
		sha512)
			printf '%s' 10
		;;
		
	esac
}

_swaddle_build_package_rpm_compression()
{
	case "$(_swaddle_build_configuration_getConfigurationSetting swaddle_rpm compression)" in
		
		none)
			printf '%s' 'w0.gzdio'
		;;
		
		gzip)
			printf '%s' 'w9.gzdio'
		;;
		
		bzip2)
			printf '%s' 'w9.bzdio'
		;;
		
		lzma)
			# Level 7 in Fedora's suggestions
			printf '%s' 'w9.lzdio'
		;;
		
		xz)
			# Level 7 in Fedora's suggestions; FPM uses level 2
			printf '%s' 'w9.xzdio'
		;;
		
	esac
}

_swaddle_build_package_rpm_filterFrom()
{
	local tagName="%filter_from_${1}"
	local configurationSettingName="$2"

	local namespace='swaddle_rpm'
	local configurationSettingValue
	_swaddle_build_configuration_configurationSettingValue "$namespace" "$configurationSettingName"
	
	_swaddle_build_package_rpm_filterFrom_callback()
	{
		local regex="$core_variable_array_element"
		printf '%s %s\n' "$tagName" "$regex"
	}
	
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_rpm_filterFrom_callback
}

_swaddle_build_package_rpm_filterSetup()
{
	local namespace='swaddle_rpm'
	local configurationSettingName
	local configurationSettingValue
	local doSetup=0
	for configurationSettingName in "$@"
	do
		_swaddle_build_configuration_configurationSettingValue "$namespace" "$configurationSettingName"
		if ! core_variable_array_isEmpty "$configurationSettingValue"; then
			doSetup=1
			break
		fi
	done
	
	if [ $doSetup -eq 0 ]; then
		return 0
	fi
	
	printf '%s\n' '%filter_setup'
}

_swaddle_build_package_rpm_yesNo()
{
	if core_variable_isTrue "$(_swaddle_build_configuration_getConfigurationSetting swaddle_rpm "$1")"; then
		printf 'yes'
	else
		printf 'no'
	fi
}

_swaddle_build_package_rpm_release()
{
	local iteration="$(_swaddle_build_configuration_getConfigurationSetting swaddle iteration)"
	printf '%s' $((iteration+1))
}

core_dependency_requires '*' head
_swaddle_build_package_rpm_summaryDescription()
{
	printf '%s' "$(_swaddle_build_configuration_getConfigurationSetting swaddle description)" | head -n 1
}

_swaddle_build_package_rpm_iterateDependencies()
{
	local rpmTag="$1"
	local configurationSettingName="$2"

	local namespace='swaddle_rpm'
	local configurationSettingValue
	_swaddle_build_configuration_configurationSettingValue
	
	_swaddle_build_package_rpm_iterateDependencies_callback()
	{
		local dependency="$core_variable_array_element"
		printf '%s: %s\n' "$rpmTag" "$dependency"
	}
	
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_rpm_iterateDependencies_callback
}

core_dependency_requires '*' sed
_swaddle_build_package_rpm_formatDescription()
{
	sed -e 's/^\w*$/ \./g' <<EOF
$(_swaddle_build_configuration_getConfigurationSetting swaddle description)
EOF
}

core_dependency_requires '*' cat
_swaddle_build_package_rpm_script()
{
	local rpmScriptType="$1"
	local scriptType="$2"
	local scriptTypePath="$_swaddle_build_packagesPath"/"$_swaddle_build_package_kind"/scripts/"$scriptType"
	
	core_TODO 'Templated scripts, scripts in other repositories and shellshock scripts'
	
	if ! core_path_isReadableAndSearchableFolderPath "$scriptTypePath"; then
		return 0
	fi
	
	set +f
	set -- "$scriptTypePath"/*.sh
	set -f
	if [ ! -e "$1" ]; then
		return 0
	fi
	
	# https://fedoraproject.org/wiki/How_to_create_an_RPM_package
	# $1 is passed to this script as a number
	# For pre and post, 1 for first install, 2+ for upgrade
	# For preun and postun, 0 is when last version is removed (1 is for upgrade)
	# For verify, not used
	# For pretrans and posttrans, always 0
	
	printf '%s\n' "%${rpmScriptType}"
	local scriptFile
	for scriptFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$scriptFile"; then
			cat "$scriptFile"
			printf '\n'
		fi
	done
}

_swaddle_build_package_rpm_trigger_printIfValid()
{
	if [ -z "$dependency" ]; then
		return 0
	fi
	
	if core_variables_startsWith "$dependency" '#'; then
		return 0
	fi
	
	if [ $isAfterFirst -eq 1 ]; then
		printf ', '
	fi
	
	printf '%s' "$dependency"
}

_swaddle_build_package_rpm_trigger()
{
	local rpmScriptType="$1"
	local scriptType="$2"
	local scriptTypePath="$_swaddle_build_packagesPath"/"$_swaddle_build_package_kind"/scripts/"$scriptType"
	
	if ! core_path_isReadableAndSearchableFolderPath "$scriptTypePath"; then
		return 0
	fi
	
	set +f
	set -- "$scriptTypePath"/*.depends
	set -f
	if [ ! -e "$1" ]; then
	
		set +f
		set -- "$scriptTypePath"/*.sh
		set -f
		if [ ! -e "$1" ]; then
			core_message WARN "No depends files for trigger '$scriptType' (but sh files are present)"
			return 0
		fi
		
		return 0
	fi
	
	printf '%s -- ' "$rpmScriptType"
	local dependency
	local dependsFile
	local isAfterFirst=0
	for dependsFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$dependsFile"; then
			
			while IFS='' read -r dependency
			do
				_swaddle_build_package_rpm_trigger_printIfValid
				isAfterFirst=1
			done <"$dependsFile"
			if [ -n "$dependency" ]; then
				_swaddle_build_package_rpm_trigger_printIfValid
			fi
		fi
	done
	printf '\n'
	
	set +f
	set -- "$scriptTypePath"/*.sh
	set -f
	if [ ! -e "$1" ]; then
		core_message WARN "No sh files for trigger '$scriptType' (but depends files are present)"
		return 0
	fi
	
	local scriptFile
	for scriptFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$scriptFile"; then
			cat "$scriptFile"
			printf '\n'
		fi
	done
}

core_dependency_requires '*' stat id rm sed
_swaddle_build_package_rpm_files_write()
{
	local kind="$1"
	
	local potentiallyShortMode
	local mode
	local user
	local group
	
	IFS=' ' read -r potentiallyShortMode user group <<-EOF
		$(stat -c '%a %U %G' "$objectPath")
	EOF
	
	if [ ${#potentiallyShortMode} -eq 3 ]; then
		mode="0${potentiallyShortMode}"
	else
		mode="$potentiallyShortMode"
	fi
	unset potentiallyShortMode
	
	# Allows 'current user' to be 'root'
	if [ "$(id -un)" = "$user" ]; then
		user="$(_swaddle_build_configuration_getConfigurationSetting swaddle_rpm user)"
	fi
	
	# Allows 'current group' to be 'root'
	if [ "$(id -gn)" = "$group" ]; then
		group="$(_swaddle_build_configuration_getConfigurationSetting swaddle_rpm group)"
	fi
	
	local settingsFilePath="$objectPath".swaddle-settings
	
	local mtime="$(_swaddle_build_configuration_getConfigurationSetting swaddle mtime)"
	local special=''
	# Can override isOwnedDirectory, mode, user, group
	if core_path_isReadableNonEmptyFilePath "$settingsFilePath"; then
		. "$settingsFilePath"
		rm -f "$settingsFilePath" || true
		
		case "$special" in
			
			package-owned-directory)
				if [ "$kind" != 'folder' ]; then
					core_exitError $core_commandLine_exitCode_CONFIG "The special setting '$special' is invalid for anything but folders"
				fi
				printf '%%dir '
			;;
			
			config-file,noreplace)
				if [ ! -f "$objectPath" ]; then
					core_exitError $core_commandLine_exitCode_CONFIG "The special setting '$special' is invalid for anything but files"
				fi
				printf '%%config(noreplace) '
			;;
			
			config-file,replace)
				if [ ! -f "$objectPath" ]; then
					core_exitError $core_commandLine_exitCode_CONFIG "The special setting '$special' is invalid for anything but files"
				fi
				printf '%%config '
			;;
			
			'')
				:
			;;
			
			*)
				core_exitError $core_commandLine_exitCode_CONFIG "The special setting '$special' is unrecognised"
			;;
			
		esac
		
	fi
	
	if [ -n "$mtime" ]; then
		touch -a -m -t "$mtime"
	fi
	
	printf '%%attr(%s, %s, %s) ' "$mode" "$user" "$group"
	
	local fileName="$(core_compatibility_basename "$objectPath")"
	local rpmPath="$relativePath"/"$fileName"
	
	printf '"%s"' "$rpmPath" | sed -e 's;\[;\[\[\];g' -e 's;\*;\[\*\];g' -e 's;\?;\[\?\];g' -e 's;\%;\[\%\];g'
	
	if [ "$kind" = 'folder' ]; then
		_swaddle_build_package_rpm_files_recurse "$objectPath" "$rpmPath"
	fi
}

_swaddle_build_package_rpm_files()
{
	_swaddle_build_package_rpm_files_recurse "$_swaddle_build_package_root" /
}

_swaddle_build_package_rpm_files_recurse()
{
	local currentFolderPath="$1"
	local relativePath="$2"
	
	set +f
	local $objectPath
	local basename
	for objectPath in "$currentFolderPath"/*
	do
		set -f
		if [ ! -e "$objectPath" ]; then
			continue
		fi
		
		basename="$(core_compatibility_basename "$objectPath")"
		if core_variable_endsWidth "$basename" ".swaddle-settings"; then
			core_exitError $core_commandLine_exitCode_CONFIG "swaddle-settings without matching parent '$objectPath'"
		fi
	
		if [ -L "$objectPath" ]; then
			_swaddle_build_package_rpm_files_write file
		elif [ -d "$objectPath" ]; then
			_swaddle_build_package_rpm_files_write folder
		else
			_swaddle_build_package_rpm_files_write file
		fi
	
	done
	set -f
}
