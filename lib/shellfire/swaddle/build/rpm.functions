# Some rules on the GROUP TAG: https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/Packagers_Guide/chap-Packagers_Guide-Spec_File_Reference-Preamble.html

swaddle_build_package_rpm_defaultConfiguration()
{
	swaddle_build_configuration_default swaddle_rpm \
		autoDepends 'yes' \
		user 'root' \
		group 'root' \
		defattrfile '-' \
		defattrdir '-' \
		digest 'sha512' \
		compression 'xz' \
		sign 'no' \
		autoAddDirectories 'yes' \
		autoReqProv 'yes' \
		autoProv 'yes' \
		ignoreIterationInDependencies 'no' \
		regexFilterFromProvides '' \
		regexFilterFromRequires ''
}

swaddle_build_package_rpm_resetConfiguration()
{
	core_variable_array_unset swaddle_rpm_depends
	core_variable_array_unset swaddle_rpm_provides
	core_variable_array_unset swaddle_rpm_conflicts
	core_variable_array_unset swaddle_rpm_replaces
	
	TODO depends et al
	TODO rpmbuild
	TODO files list
	TODO config / directories / special permissions
	
	swaddle_build_configuration_reset swaddle_rpm \
		autoDepends \
		category \
		user \
		group \
		defattrfile \
		defattrdir \
		digest \
		compression \
		sign \
		autoAddDirectories \
		autoReqProv \
		autoReq \
		autoProv \
		ignoreIterationInDependencies \
		regexFilterFromProvides \
		regexFilterFromRequires
}

swaddle_build_package_rpm_validateConfiguration()
{
	swaddle_build_configuration_validateSetAndNotEmpty swaddle_rpm \
		autoDepends \
		user \
		group \
		defattrfile \
		defattrdir \
		digest \
		compression
	
	swaddle_build_configuration_validateSetAndBoolean swaddle_rpm \
		sign \
		autoAddDirectories \
		autoReqProv \
		autoReq \
		autoProv \
		ignoreIterationInDependencies
		
	swaddle_build_configuration_validateSetOnly swaddle_rpm \
		regexFilterFromProvides \
		regexFilterFromRequires
	
	swaddle_build_configuration_validateSetAndHash swaddle_rpm \
		digest
	
	swaddle_build_configuration_validateSetAndCompression swaddle_rpm \
		compression

	swaddle_build_configuration_validateSetAndValidValue swaddle_rpm category \
		category
}

swaddle_build_package_rpm()
{
	core_functions_execute _swaddle_build_package_rpm_functions "$@"
}

core_functions_register _swaddle_build_package_rpm_functions swaddle_build_package_rpm_setSpecFilePath
swaddle_build_package_rpm_setSpecFilePath()
{
	_swaddle_build_package_rpm_specFile="$_swaddle_build_package_temporaryFolderPath"/"$swaddle_package".spec
}

_swaddle_build_package_rpm_architecture()
{
	case "$swaddle_architecture" in
		
		all|noarch)
			printf '%s' 'noarch'
		;;
		
		amd64|x86_64)
			printf '%s' 'x86_64'
		;;
		
		# We don't bother with native / uname -m; it's wrong on the Mac (well, mine, as I run a 32-bit kernel on 64-bit machine) and AIX
		# bash's HOSTTYPE is useful but not available under sh
		
		*)
			printf '%s' "$swaddle_architecture"
		;;
		
	esac
	
	cat >/dev/null <<EOF

	# Fix path name
	# Replace [ with [\[] to make rpm not use globs
	# Replace * with [*] to make rpm not use globs
	# Replace ? with [?] to make rpm not use globs
	# Replace % with [%] to make rpm not expand macros
	def rpm_fix_name(name)
	name = "\"#{name}\"" if name[/\s/]
	name = name.gsub("[", "[\\[]")
	name = name.gsub("*", "[*]")
	name = name.gsub("?", "[?]")
	name = name.gsub("%", "[%]")
	end	
EOF
}

core_functions_register _swaddle_build_package_rpm_functions swaddle_build_package_rpm_generateSpecFile
core_snippet_embed raw rpm_spec_template
swaddle_build_package_rpm_generateSpecFile()
{
	core_snippet_retrieveAndSourceAsHereDoc rpm_spec_template >"$_swaddle_build_package_rpm_specFile"
}

_swaddle_build_package_rpm_digestAlgorithm()
{
	case "$swaddle_rpm_digest" in
		
		md5)
			printf '%s' 1
		;;
		
		sha1)
			printf '%s' 2
		;;
		
		sha256)
			printf '%s' 8
		;;
		
		sha384)
			printf '%s' 9
		;;
		
		sha512)
			printf '%s' 10
		;;
		
	esac
}

_swaddle_build_package_rpm_compression()
{
	case "$swaddle_rpm_compression" in
		
		none)
			printf '%s' 'w0.gzdio'
		;;
		
		gzip)
			printf '%s' 'w9.gzdio'
		;;
		
		bzip2)
			printf '%s' 'w9.bzdio'
		;;
		
		lzma)
			# Level 7 in Fedora's suggestions
			printf '%s' 'w9.lzdio'
		;;
		
		xz)
			# Level 7 in Fedora's suggestions; FPM uses level 2
			printf '%s' 'w9.xzdio'
		;;
		
	esac
}

_swaddle_build_package_rpm_yesNo()
{
	if core_variable_isTrue "$1"; then
		printf 'yes'
	else
		printf 'no'
	fi
}

core_dependency_requires '*' head
_swaddle_build_package_rpm_summaryDescription()
{
	head -n 1 "$swaddle_description"
}

_swaddle_build_package_rpm_iterateDependencies()
{
	_swaddle_build_package_rpm_iterateDependencies_callback()
	{
		local dependency="$core_variable_array_element"
		printf "$rpmName: $dependency"
	}
	
	local rpmName="$1"
	local arrayName="$2"
	core_variable_array_iterate "$arrayName" _swaddle_build_package_rpm_iterateDependencies_callback
}

_swaddle_build_package_rpm_iterateScriptDependencies_printIfValid()
{
	if [ -z "$dependency" ]; then
		return 0
	fi
	
	if core_variables_startsWith "$dependency" '#'; then
		return 0
	fi
	
	printf 'Requires(%s): %s\n' "$rpmScriptType" "$dependency"
}

_swaddle_build_package_rpm_iterateScriptDependencies()
{
	local rpmScriptType="$1"
	local scriptType="$2"
	local scriptTypeDependenciesPath="$_swaddle_package_scriptsFolderPath"/"$scriptType"
	
	if ! core_path_isReadableAndSearchableFolderPath "$scriptTypePath"; then
		return 0
	fi
	
	set +f
	set -- "$scriptTypePath"/*.depends
	set -f
	if [ ! -e "$1" ]; then
		return 0
	fi
	
	local dependsFile
	local dependency
	for dependsFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$dependsFile"; then
			
			while IFS='' read -r dependency
			do
				_swaddle_build_package_rpm_iterateScriptDependencies_printIfValid
			done <"$dependsFile"
			if [ -n "$dependency" ]; then
				_swaddle_build_package_rpm_iterateScriptDependencies_printIfValid
			fi
		fi
	done
}

core_dependency_requires '*' sed
_swaddle_build_package_rpm_formatDescription()
{
	sed -e 's/^\w*$/ \./g' <<EOF
${swaddle_description}
EOF
}

core_dependency_requires '*' cat
_swaddle_build_package_rpm_script()
{
	local rpmScriptType="$1"
	local scriptType="$2"
	local scriptTypePath="$_swaddle_package_scriptsFolderPath"/"$scriptType"
	
	core_TODO 'Templated scripts, scripts in other repositories and shellshock scripts'
	
	if ! core_path_isReadableAndSearchableFolderPath "$scriptTypePath"; then
		return 0
	fi
	
	set +f
	set -- "$scriptTypePath"/*.sh
	set -f
	if [ ! -e "$1" ]; then
		return 0
	fi
	
	# https://fedoraproject.org/wiki/How_to_create_an_RPM_package
	# $1 is passed to this script as a number
	# For pre and post, 1 for first install, 2+ for upgrade
	# For preun and postun, 0 is when last version is removed (1 is for upgrade)
	# For verify, not used
	# For pretrans and posttrans, always 0
	
	printf '%s\n' "%${rpmScriptType}"
	local scriptFile
	for scriptFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$scriptFile"; then
			cat "$scriptFile"
			printf '\n'
		fi
	done
}

_swaddle_build_package_rpm_trigger_printIfValid()
{
	if [ -z "$dependency" ]; then
		return 0
	fi
	
	if core_variables_startsWith "$dependency" '#'; then
		return 0
	fi
	
	if [ $isAfterFirst -eq 1 ]; then
		printf ', '
	fi
	
	printf '%s' "$dependency"
}

_swaddle_build_package_rpm_trigger()
{
	local rpmScriptType="$1"
	local scriptType="$2"
	local scriptTypePath="$_swaddle_package_scriptsFolderPath"/"$scriptType"
	
	if ! core_path_isReadableAndSearchableFolderPath "$scriptTypePath"; then
		return 0
	fi
	
	set +f
	set -- "$scriptTypePath"/*.depends
	set -f
	if [ ! -e "$1" ]; then
	
		set +f
		set -- "$scriptTypePath"/*.sh
		set -f
		if [ ! -e "$1" ]; then
			core_message WARN "No depends files for trigger '$scriptType' (but sh files are present)"
			return 0
		fi
		
		return 0
	fi
	
	printf '%s -- ' "$rpmScriptType"
	local dependency
	local dependsFile
	local isAfterFirst=0
	for dependsFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$dependsFile"; then
			
			while IFS='' read -r dependency
			do
				_swaddle_build_package_rpm_trigger_printIfValid
				isAfterFirst=1
			done <"$dependsFile"
			if [ -n "$dependency" ]; then
				_swaddle_build_package_rpm_trigger_printIfValid
			fi
		fi
	done
	printf '\n'
	
	set +f
	set -- "$scriptTypePath"/*.sh
	set -f
	if [ ! -e "$1" ]; then
		core_message WARN "No sh files for trigger '$scriptType' (but depends files are present)"
		return 0
	fi
	
	local scriptFile
	for scriptFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$scriptFile"; then
			cat "$scriptFile"
			printf '\n'
		fi
	done
}

core_dependency_requires '*' date
_swaddle_build_package_rpm_changelog()
{
	local epochSeconds
	local author
	local authorEmail
	local commitHash
	local subject
	local changelogDate
	git log --format='%at%x09%aN%x09%aE%x09%H%x09%s' | while IFS="$(printf '\t')" read -r epochSeconds author authorEmail commitHash subject
	do
		changelogDate="$(date -u -d @${epochSeconds} '+%a %b %d %Y')"
		printf '* %s %s <%s> - %s\n' "$epochSeconds" "$author" "$authorEmail" "$commitHash"
		printf '- %s\n' "$subject"
		printf '\n'
	done
}


swaddle_package_rpm_rpmbuild()
{
	:
	# --sign
	# --target  "#{architecture}-unknown-#{attributes[:rpm_os]}"  or --target "$(uname -m)"
	# "--define", "buildroot #{build_path}/BUILD",
#"--define", "_topdir #{build_path}",
#"--define", "_sourcedir #{build_path}",
#"--define", "_rpmdir #{build_path}/RPMS",
#"--define", "_tmppath #{attributes[:workdir]}"
}