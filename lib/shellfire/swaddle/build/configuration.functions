core_usesIn core variable
swaddle_build_configuration_default()
{
	local prefix="$1"
	shift 1
	
	local configurationSettingName
	local configurationSettingValue
	local defaultName
	while [ $# -gt 1 ]; then
	do
		configurationSettingName="$1"
		configurationSettingValue="$2"
		shift 2
		
		defaultName="swaddle_configuration_${prefix}_${configurationSettingName}"
		if core_variable_isUnset "$defaultName"; then
			core_variable_setVariable "$defaultName" "$configurationSettingValue"
		fi
	done
	
	if [ $# -ne 0 ]; then
		core_exitError $core_commandLine_exitCode_SOFTWARE "Specify matched pairs for defaults"
	fi
}

swaddle_build_configuration_reset()
{
	local prefix="$1"
	shift 1
	
	local configurationSettingName
	local defaultName
	local core_variable_indirectValue_result
	for configurationSettingName in "$@"
	do
		unset "${prefix}_${configurationSettingName}"
		defaultName="swaddle_configuration_${prefix}_${configurationSettingName}"
		if core_variable_isSet "$defaultName"; then
			core_variable_indirectValue "$defaultName"
			core_variable_setVariable "${prefix}_${configurationSettingName}" "$core_variable_indirectValue_result"
		fi
	done
}

swaddle_build_configuration_source()
{
	local configurationPath="$1"
	local configurationFilePath="$configurationPath"/package.conf
	if core_path_isReadableNonEmptyFilePath "$configurationFilePath"; then
		. "$configurationFilePath" || core_exitError $core_commandLine_exitCode_DATAERR "Could not source configuration '$configurationFilePath' for swaddle '$_swaddle_build_swaddleName'"
	fi
	
	local configurationFolderPath="$configurationPath"/package.conf.d
	if core_path_isReadableAndSearchableFolderPath "$configurationFolderPath"; then
		pushd "$configurationFolderPath"
			set +f
			for configurationFilePath in *.conf
			do
				set -f
				if core_path_isReadableNonEmptyFilePath "$configurationFilePath"; then
					. "$configurationFilePath" || core_exitError $core_commandLine_exitCode_DATAERR "Could not source configuration '$configurationFilePath' for swaddle '$_swaddle_build_swaddleName'"
				fi
			done
			set -f
		popd
	fi
}

# Trailing newlines will be swallowed
swaddle_build_configuration_settingValue()
{
	local core_variable_indirectValue_result
	core_variable_indirectValue "${prefix}_${configurationSettingName}"
	printf '%s' "$core_variable_indirectValue"
}

swaddle_build_configuration_validateSetOnly()
{
	local prefix="$1"
	shift 1
	
	local configurationSettingName
	for configurationSettingName in "$@"
	do
		if core_variable_isUnset "${prefix}_${configurationSettingName}"; then
			core_exitError $core_commandLine_exitCode_CONFIG "The package configuration setting '${prefix}_${configurationSettingName}' has not be specified in configuration for the package '$swaddle_package'"
		fi
	done
}

swaddle_build_configuration_validateSetAndNotEmpty()
{
	swaddle_build_configuration_validateSetOnly "$@"

	local prefix="$1"
	shift 1
	
	local configurationSettingName
	for configurationSettingName in "$@"
	do
		if [ -z "$(swaddle_build_configuration_settingValue)" ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "The package configuration setting '${prefix}_${configurationSettingName}' is empty in configuration for the package '$swaddle_package'"
		fi
			
	done
}

swaddle_build_configuration_validateSetAndBoolean()
{
	swaddle_build_configuration_validateSetOnly "$@"

	local prefix="$1"
	shift 1
	
	local configurationSettingName
	for configurationSettingName in "$@"
	do
		if core_variable_isInvalidBoolean "$(swaddle_build_configuration_settingValue)"; then
			core_exitError $core_commandLine_exitCode_CONFIG "The package configuration setting '${prefix}_${configurationSettingName}' is not a valid boolean for the package '$swaddle_package'"
		fi
	done
}

swaddle_build_configuration_validateSetAndHash()
{
	swaddle_build_configuration_validateSetOnly "$@"
	
	local prefix="$1"
	shift 1
	
	local configurationSettingName
	for configurationSettingName in "$@"
	do
		case "$(swaddle_build_configuration_settingValue)" in
	
			md5|sha1|sha256|sha384|sha512)
				:
			;;
	
			*)
				core_exitError $core_commandLine_exitCode_CONFIG "The package configuration setting '${prefix}_${configurationSettingName}' is '$(swaddle_build_configuration_settingValue)' (it must be one of 'md5', 'sha1', 'sha256', 'sha384' or 'sha512')."
			;;
			
		esac
	done
}

swaddle_build_configuration_validateSetAndCompression()
{
	swaddle_build_configuration_validateSetOnly "$@"
	
	local prefix="$1"
	shift 1
	
	local configurationSettingName
	for configurationSettingName in "$@"
	do
		case "$(swaddle_build_configuration_settingValue)" in
	
			none|gzip|bzip2|lzma|xz)
				:
			;;
	
			*)
				core_exitError $core_commandLine_exitCode_CONFIG "The package configuration setting '${prefix}_${configurationSettingName}' is '$(swaddle_build_configuration_settingValue)' (it must be one of 'none', 'gzip', 'bzip2', 'lzma' or 'xz')."
			;;
			
		esac
	done
}

# Derived from https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing
core_snippet_embed raw swaddle_licence

# Derived from /usr/share/doc/rpm-4.8.0/ on Centos 6.5
core_snippet_embed raw swaddle_rpm_category

swaddle_build_configuration_validateSetAndValidValue()
{
	local prefix="$1"
	local valueKind="$2"
	shift 2
	
	swaddle_build_configuration_validateSetOnly "$prefix" "$@"
	
	local snipptName="${prefix}_${valueKind}"
	
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	core_snippet_retrieve "$snippetName" no "$TMP_FILE"
	local validValuesFilePath="$TMP_FILE"
	
	local configurationSettingName
	local validValue
	for configurationSettingName in "$@"
	do
		local configurationSettingValue="$(swaddle_build_configuration_settingValue)"
		local found=0
		while IFS='' read -r validValue
		do
			if [ "$configurationSettingValue" = "$validValue" ]; then
				found=1
				break
			fi
		done <"$validValuesFilePath"
		
		if [ $found -eq 0 ]; then
			core_message WARN "The package configuration setting '${prefix}_${configurationSettingName}' is an invalid $valueKind: '$configurationSettingValue'."
		fi
	done
	
	rm "$validValuesFilePath"
}
