core_usesIn configure
core_usesIn swaddle fakeroot touch architecture
core_usesIn swaddle/build/package deb rpm tar

swaddle_build_package()
{
	local _swaddle_build_package_architecture="$1"
	shift 1

	local packageArchitecture
	swaddle_architecture_translate "$_swaddle_build_package_kind" "$_swaddle_build_package_architecture"
	_swaddle_build_package_translatedArchitecture="$packageArchitecture"
	
	core_functions_execute _swaddle_build_package_functions "$@"
}

core_functions_register _swaddle_build_package_functions swaddle_build_package_createTemporaryFolder
swaddle_build_package_createTemporaryFolder()
{
	_swaddle_build_package_temporaryFolderPath="$_swaddle_build_temporaryFolderPath"/"$_swaddle_build_package_kind"/"$_swaddle_build_package_architecture"
	mkdir -m 0700 -p "$_swaddle_build_package_temporaryFolderPath"
}

core_dependency_requires '*' mkdir
core_functions_register _swaddle_build_package_functions swaddle_build_package_createRootFolder
swaddle_build_package_createRootFolder()
{
	_swaddle_build_package_root="$_swaddle_build_package_temporaryFolderPath"/"$_swaddle_build_package_architecture"/root
	mkdir -m 0755 -p "$_swaddle_build_package_root"
}

core_functions_register _swaddle_build_package_functions swaddle_build_package_resetConfiguration
swaddle_build_package_resetConfiguration()
{
	configure_reset swaddle
	configure_reset swaddle_web
	configure_reset swaddle_${_swaddle_build_package_kind}
}

core_functions_register _swaddle_build_package_functions swaddle_build_package_sourceConfiguration
swaddle_build_package_sourceConfiguration()
{
	configure_source "$swaddle_swaddlesPath" swaddles
	configure_source "$_swaddle_build_sourcePath" package
	configure_source "$_swaddle_build_sourcePath"/"$_swaddle_build_package_kind" "$_swaddle_build_package_kind"
}

core_functions_register _swaddle_build_package_functions swaddle_build_package_validateConfiguration
swaddle_build_package_validateConfiguration()
{
	configure_validate swaddle
	configure_validate swaddle_package
	configure_validate swaddle_${_swaddle_build_package_kind}
}

core_dependency_requires '*' rsync sort rm mkdir sort
core_functions_register _swaddle_build_package_functions swaddle_build_package_synchroniseToPackageRoot
swaddle_build_package_synchroniseToPackageRoot()
{
	_swaddle_build_package_rootFakerootFilePath="$_swaddle_build_package_root".fakeroot
	
	local destinationFakerootTemporaryFilePath="$_swaddle_build_package_root".fakeroot.tmp
	rm -f "$destinationFakerootTemporaryFilePath"
	printf '' >"$destinationFakerootTemporaryFilePath"

	local fixPermissionsBinaryOrFunction="$(configure_getConfigurationSetting swaddle fix_permissions)"
	
	# If there are file conflicts (eg same file in multiple structures), first sync source wins
	set --
	local folderStructurePath
	local fakerootEnvironmentFilePath
	for folderStructurePath in \
		"$_swaddle_build_sourcePath"/"$_swaddle_build_package_kind"/body/"$_swaddle_build_package_architecture" \
		"$_swaddle_build_sourcePath"/"$_swaddle_build_package_kind"/skeleton/"$_swaddle_build_package_architecture" \
		"$_swaddle_build_sourcePath"/"$_swaddle_build_package_kind"/body/any \
		"$_swaddle_build_sourcePath"/"$_swaddle_build_package_kind"/skeleton/any \
		"$_swaddle_build_sourcePath"/body/any \
		"$_swaddle_build_sourcePath"/skeleton/any \
		"$_swaddle_build_sourcePath"/body/"$_swaddle_build_package_architecture" \
		"$_swaddle_build_sourcePath"/skeleton/"$_swaddle_build_package_architecture"
	do
		fakerootEnvironmentFilePath="$folderStructurePath".fakeroot
		
		# We do this before checking the path exists, so they can create it, too
		if [ -n "$fixPermissionsBinaryOrFunction" ]; then
			
			if core_functions_exists "$fixPermissionsBinaryOrFunction"; then
				$fixPermissionsBinaryOrFunction "$fakerootEnvironmentFilePath" "$folderStructurePath"
			else
				swaddle_fakeroot "$fakerootEnvironmentFilePath" "$fakerootEnvironmentFilePath" $fixPermissionsBinaryOrFunction "$fakerootEnvironmentFilePath" "$folderStructurePath"
			fi
		fi
		
		if [ -f "$fakerootEnvironmentFilePath" ]; then
			cat "$fakerootEnvironmentFilePath" >>"$destinationFakerootTemporaryFilePath"
		fi
		
		if ! core_path_isReadableAndSearchableFolderPath "$folderStructurePath"; then
			continue
		fi
		
		# Trailing '\' matters to rsync, remember!
		set -- "$@" "$folderStructurePath"/
	done
	
	if [ $# -eq 0 ]; then
		core_message WARN "There are no skeleton or body folders to include the package. This is probably not what you want."
		
		# Ensure the package root is completely clean
		rm -rf "$_swaddle_build_package_root"
		mkdir -m 0755 -p "$_swaddle_build_package_root"
		return 0
	fi

	local destinationFakerootFilePath="$_swaddle_build_package_rootFakerootFilePath"
	if [ -f "$destinationFakerootFilePath" ]; then
		cat "$destinationFakerootFilePath" >>"$destinationFakerootTemporaryFilePath"
	fi
	sort -u "$destinationFakerootTemporaryFilePath" >"$destinationFakerootFilePath"
	rm "$destinationFakerootTemporaryFilePath"
	
	swaddle_fakeroot "$_swaddle_build_package_rootFakerootFilePath" "$_swaddle_build_package_rootFakerootFilePath" rsync --quiet --archive --acls --xattrs --hard-links --delete --delete-after --delete-excluded --exclude=.gitignore "$@" "$_swaddle_build_package_root"/
}

core_functions_register _swaddle_build_package_functions swaddle_build_package_kind
swaddle_build_package_kind()
{
	swaddle_build_package_${_swaddle_build_package_kind}
}
