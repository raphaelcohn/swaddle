# This file is part of swaddle. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT. No part of swaddle, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of swaddle. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT.


core_usesIn swaddle webserverFiles

swaddle_build_package_file_registerConfiguration()
{
	configure_register Value Any swaddle_file path ''
	configure_register Array Compression swaddle_file compressions
}

swaddle_build_package_file_generateContent()
{
	:
}

swaddle_build_package_file()
{
	core_functions_execute _swaddle_build_package_file_functions "$@"
}

core_dependency_requires '*' file mkdir rm mv cp
core_functions_register _swaddle_build_package_file_functions swaddle_build_package_file_create
swaddle_build_package_file_create()
{
	local repositoryName="$(configure_getValue swaddle repository_name)"
	local parentPath="$_swaddle_repository_parentPath"/"$repositoryName"
	
	mkdir -m 0755 -p "$parentPath"
	swaddle_touch_setMtimeAndAtime "$parentPath"
	
	local chosenFile="$(configure_getValue swaddle_file path)"
	if [ -n "$chosenFile" ]; then
		if [ ! -f "$_swaddle_build_package_root"/"$chosenFile" ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "The file '$chosenFile' does not exist as a file at '$_swaddle_build_package_root/$chosenFile'"
		fi
	else
		pushd "$_swaddle_build_package_root"
		
			local file
			for file in *
			do
				if [ ! -e "$file" ]; then
					continue
				fi
			
				if [ -L "$file" ]; then
					continue
				fi
			
				if [ -f "$file" ]; then
					if [ -n "$chosenFile" ]; then
						core_exitError $core_commandLine_exitCode_CONFIG "There are multiple files to choose from"
					fi
				
					chosenFile="$file"
				fi
			done
	
		popd
	fi
	local useFilePath="$_swaddle_build_package_root"/"$chosenFile"
	
	_swaddle_build_package_file_filePath="$parentPath"/"${_swaddle_build_swaddleName}_$(swaddle_configure_epochVersionIteration)_${_swaddle_build_package_translatedArchitecture}"
	
	rm -f "$_swaddle_build_package_file_filePath"
	cp "$useFilePath" "$_swaddle_build_package_file_filePath" 
	swaddle_touch_setMtimeAndAtime "$_swaddle_build_package_file_filePath"
}

core_dependency_requires '*' file
core_usesIn swaddle compress
core_functions_register _swaddle_build_package_file_functions swaddle_build_package_file_compress
swaddle_build_package_file_compress()
{
	local description
	if [ -x "$_swaddle_build_package_file_filePath" ]; then
		description='executable'
	else
		description='file'
	fi

	if [ "$_swaddle_build_package_architecture" = 'all' ]; then
		local descriptiveName="${_swaddle_build_swaddleName} archive (RAR)"
	else
		local descriptiveName="${_swaddle_build_swaddleName} ${_swaddle_build_package_translatedArchitecture} archive (RAR)"
	fi
	
	_swaddle_build_package_file_compress_callback()
	{
		if [ "$_swaddle_build_package_architecture" = 'all' ]; then
			local name="$_swaddle_build_swaddleName $description"
		else
			local name="$_swaddle_build_swaddleName ${_swaddle_build_package_translatedArchitecture} $description"
		fi
		
		case "$compressor" in
			
			none)
				local mimeType="$(file --brief --mime "$compressedFileName")"
				local unwantedEnding='; charset=binary'
				if core_variable_endsWith "$mimeType" "$unwantedEnding"; then
					mimeType="$(core_variable_allButLastN "$mimeType" ${#unwantedEnding})"
				fi
				local descriptiveName="$name"
			;;
			
			*)
				local mimeType="$(compress_mimeType "$compressor")"
				local descriptiveName="$name ($(compress_properName "$compressor") compressed)"
			;;
			
		esac
		
		swaddle_publishers_publish "$descriptiveName" "$compressedFileName" "$mimeType"
	}
	
	swaddle_compress_variants 'swaddle_file' 'compressions' "$_swaddle_build_package_file_filePath" _swaddle_build_package_file_compress_callback 'gzip' 'lrzip'
}
