swaddle_build_package_tar_registerConfiguration()
{
	configure_register Value Boolean swaddle_tar bomb 'no'
	configure_register Array TarCompression swaddle_tar compressions
}

swaddle_build_package_tar()
{
	core_functions_execute _swaddle_build_package_tar_functions "$@"
}

core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_tar_computeTarVersion
swaddle_build_package_tar_computeTarVersion()
{
	local epoch="$(configure_getConfigurationSetting swaddle epoch)"
	local version="$(configure_getConfigurationSetting swaddle version)"
	local iteration="$(configure_getConfigurationSetting swaddle iteration)"
	if [ -z "$epoch" ]; then
		_swaddle_build_package_tar_version="$version"-"$iteration"
	elif [ "$epoch" = '0' ]; then
		_swaddle_build_package_tar_version="$version"-"$iteration"
	else
		_swaddle_build_package_tar_version="$epoch":"$version"-"$iteration"
	fi
}

core_dependency_requires '*' tar mv
core_functions_register _swaddle_build_package_tar_functions swaddle_build_package_tar_createTarball
swaddle_build_package_tar_createTarball()
{
	local baseName="${_swaddle_build_swaddleName}_${_swaddle_build_package_tar_version}_${_swaddle_build_package_deb_architecture}"
	_swaddle_build_package_tar_tarballFileName="$_swaddle_repository_tar_parentPath"/"$baseName".tar
	local options
	local options_initialised
	local tarFileName
	core_variable_array_initialise options
	core_variable_array_append options \
		--create \
		--file "$_swaddle_build_package_tar_tarballFileName" \
		--numeric-owner
	
	if core_variable_isTrue "$(configure_getConfigurationSetting swaddle_tar bomb)"; then
		core_variable_array_append options --directory "$_swaddle_build_package_root" .
	else
		_swaddle_build_package_tar_createTarball_makeNewRoot()
		{
			mv "$_swaddle_build_package_root" "$_swaddle_build_package_temporaryFolderPath"/"$baseName"
		}
		swaddle_fakeroot "$_swaddle_build_package_rootFakerootFilePath" "$_swaddle_build_package_rootFakerootFilePath" _swaddle_build_package_tar_createTarball_makeNewRoot
		core_variable_array_append options --directory "$_swaddle_build_package_temporaryFolderPath"/"$baseName" .
	fi
	
	_swaddle_build_package_tar_createTarball_fakeroot()
	{
		swaddle_fakeroot "$_swaddle_build_package_rootFakerootFilePath" "$_swaddle_build_package_rootFakerootFilePath" tar "$@"
	}
	
	 core_variable_array_passToFunctionAsArguments options _swaddle_build_package_tar_createTarball_fakeroot
	 
	swaddle_digest_file "$tarballFilePath"
}

core_dependency_requires '*' tar mv gzip bzip2 xz lzip lzop
core_functions_register _swaddle_build_package_tar_functions swaddle_build_package_tar_compress
swaddle_build_package_tar_compress()
{
	_swaddle_build_package_tar_compress_callback()
	{
		local compression="$core_variable_array_element"
		case "$compression" in
			
			gzip)
				compressedFilePath="$_swaddle_build_package_tar_tarballFileName".gz
				gzip -9 -c -q -f -n "$_swaddle_build_package_tar_tarballFileName" >"$compressedFilePath"
			;;
			
			bzip2)
				compressedFilePath="$_swaddle_build_package_tar_tarballFileName".bz2
				bzip2 -9 -c -q -f "$_swaddle_build_package_tar_tarballFileName" >"$compressedFilePath"
			;;
			
			lzma)
				compressedFilePath="$_swaddle_build_package_tar_tarballFileName".lzma
				lzma -9 -c -q -f "$_swaddle_build_package_tar_tarballFileName" >"$compressedFilePath"
			;;
			
			xz)
				compressedFilePath="$_swaddle_build_package_tar_tarballFileName".xz
				xz -9 -c -q -f -e "$_swaddle_build_package_tar_tarballFileName" >"$compressedFilePath"
			;;
			
			lzip)
				compressedFilePath="$_swaddle_build_package_tar_tarballFileName".lz
				lzip -9 -c -q -f "$_swaddle_build_package_tar_tarballFileName" >"$compressedFilePath"
			;;
			
			lzop)
				compressedFilePath="$_swaddle_build_package_tar_tarballFileName".lzo
				lzop -9 -c -q -f "$_swaddle_build_package_tar_tarballFileName" >"$compressedFilePath"
			;;
			
		esac
		
		swaddle_digest_file "$compressedFilePath"
	}
	
	local configurationSettingValue
	_configure_configurationSettingValue 'swaddle_tar' 'compressions'
	if core_variable_array_isEmpty "$configurationSettingValue"; then
		local core_variable_array_element=gzip
		_swaddle_build_package_tar_compress_callback
	else
		core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_tar_compress_callback
	fi
}

configure_validateTarCompression()
{
	case "$1" in

		gzip|bzip2|lzma|xz|lzip|lzop)
			:
		;;

		*)
			core_exitError $core_commandLine_exitCode_CONFIG "The configuration setting '$configurationSettingName' ('$1') is not a valid compression (it must be one of 'gzip', 'bzip2', 'lzma', 'xz', 'lzip', 'lzop')."
		;;
		
	esac
}
