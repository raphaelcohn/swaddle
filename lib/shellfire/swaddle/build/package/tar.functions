core_usesIn swaddle webserverFiles

swaddle_build_package_tar_registerConfiguration()
{
	configure_register Value Boolean swaddle_tar bomb 'no'
	configure_register Array TarCompression swaddle_tar compressions
}

swaddle_build_package_tar()
{
	core_functions_execute _swaddle_build_package_tar_functions "$@"
}

core_functions_register _swaddle_build_package_tar_functions swaddle_build_package_tar_computeTarVersion
swaddle_build_package_tar_computeTarVersion()
{
	local epoch="$(configure_getValue swaddle epoch)"
	local version="$(configure_getValue swaddle version)"
	local iteration="$(configure_getValue swaddle iteration)"
	if [ -z "$epoch" ]; then
		_swaddle_build_package_tar_version="$version"-"$iteration"
	elif [ "$epoch" = '0' ]; then
		_swaddle_build_package_tar_version="$version"-"$iteration"
	else
		_swaddle_build_package_tar_version="$epoch":"$version"-"$iteration"
	fi
}

core_dependency_requires '*' tar mv
core_functions_register _swaddle_build_package_tar_functions swaddle_build_package_tar_createTarball
swaddle_build_package_tar_createTarball()
{
	local repositoryName="$(configure_getValue swaddle repository_name)"
	local tarballParentPath="$_swaddle_repository_parentPath"/"$repositoryName"
	
	mkdir -m 0755 -p "$tarballParentPath"
	swaddle_touch_setMtimeAndAtime "$tarballParentPath"
	
	local baseName="${_swaddle_build_swaddleName}_${_swaddle_build_package_tar_version}_${_swaddle_build_package_translatedArchitecture}"
	_swaddle_build_package_tar_tarballFileName="$tarballParentPath"/"$baseName".tar
	
	swaddle_compress_variants_clean "$_swaddle_build_package_tar_tarballFileName"
	
	if core_variable_isTrue "$(configure_getValue swaddle_tar bomb)"; then
		local directory="$_swaddle_build_package_root"
		local contents=.
	else
		swaddle_simulateroot_execute mv "$_swaddle_build_package_root" "$_swaddle_build_package_temporaryFolderPath"/"$baseName"
		
		local directory="$_swaddle_build_package_temporaryFolderPath"
		local contents="$baseName"
	fi
	
	swaddle_simulateroot_execute tar \
		--create \
		--file "$_swaddle_build_package_tar_tarballFileName" \
		--numeric-owner \
		--directory "$directory" \
		"$contents"
	
	swaddle_simulateroot_ownAsExecutingUser "$_swaddle_build_package_tar_tarballFileName"
	
	swaddle_touch_setMtimeAndAtime "$_swaddle_build_package_tar_tarballFileName"
}

core_usesIn swaddle compress
core_functions_register _swaddle_build_package_tar_functions swaddle_build_package_tar_compress
swaddle_build_package_tar_compress()
{
	_swaddle_build_package_tar_compress_callback()
	{
		case "$compressor" in
			
			# Also application/x-gtar for tar.*
			none)
				local mimeType="application/x-tar"
				local name="$_swaddle_build_swaddleName tarball"
			;;
			
			*)
				local mimeType="$(swaddle_compress_mimeType "$compressor")"
				local uppercaseFileCompression="$(printf '%s' "$compressor" | tr 'a-z' 'A-Z')"
				local name="$_swaddle_build_swaddleName tarball ($uppercaseFileCompression compressed)"
			;;
			
		esac
		
		swaddle_publishers_publish "$name" "$compressedFileName" "$mimeType"
	}
	
	swaddle_compress_variants 'swaddle_tar' 'compressions' "$_swaddle_build_package_tar_tarballFileName" _swaddle_build_package_tar_compress_callback 'gzip' 'lrzip'
}
