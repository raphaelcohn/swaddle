swaddle_build_package_rpm_files()
{
	pushd "$_swaddle_build_package_root"
	
		set +f
		local rpmFilePath
		for rpmFilePath in *
		do
			set -f
			if [ ! -e "$rpmFilePath" ]; then
				continue
			fi
			
			swaddle_build_package_rpm_files_outputDirective "$rpmFilePath" 1>&2
			
		done
		set -f
	popd
}

swaddle_build_package_rpm_files_outputDirective()
{
	local rpmFilePath="$1"
	
	if [ -L "$rpmFilePath" ]; then
		swaddle_build_package_rpm_files_outputDirective_symlink
		return 0
	fi
	
	if [ ! -d "$rpmFilePath" ]; then
		swaddle_build_package_rpm_files_outputDirective_file
	fi
	
	swaddle_build_package_rpm_files_outputDirective_directoryAndRecurseIfRequired
}

swaddle_build_package_rpm_files_outputDirective_symlink()
{
	swaddle_build_package_rpm_files_writeFileEntry "$rpmFilePath"
}

swaddle_build_package_rpm_files_outputDirective_file()
{
	if   swaddle_build_package_rpm_files_writeDirectivesIfRpmFilePathSpecial "$rpmFilePath" '%ghost' ghost_files; then
		return 0
	elif swaddle_build_package_rpm_files_writeDirectivesIfRpmFilePathSpecial "$rpmFilePath" '%doc' doc_files; then
		return 0
	elif swaddle_build_package_rpm_files_writeDirectivesIfRpmFilePathSpecial "$rpmFilePath" '%config(noreplace)' unreplaceable_config_files; then
		return 0
	elif swaddle_build_package_rpm_files_writeDirectivesIfRpmFilePathSpecial "$rpmFilePath" '%config' replaceable_config_files; then
		return 0
	else
		swaddle_build_package_rpm_files_writeFileEntry "$rpmFilePath"
	fi
}

# Generated from  rpm -ql filesytem  on CentOS 7
core_snippet embed raw rpm_excluded_paths
swaddle_build_package_rpm_files_outputDirective_directoryAndRecurseIfRequired()
{
	# insert docdir here (we're not going to bother)
	
	if core_variable_isUnset swaddle_build_package_rpm_files_rpmExcludedPaths; then
		local TMP_FILE
		core_temporaryFiles_newFileToRemoveOnExit
		swaddle_build_package_rpm_files_rpmExcludedPaths="$TMP_FILE"
		
		core_snippet_retrieve rpm_excluded_paths false "$swaddle_build_package_rpm_files_rpmExcludedPaths"
		
		_swaddle_build_package_rpm_files_outputDirective_directoryAndRecurseIfRequired_callback()
		{
			printf '%s\n' "$core_variable_array_element"
		}
		configure_iterateOverArrayWithDefaultsIfEmpty swaddle_rpm excluded_directories _swaddle_build_package_rpm_files_outputDirective_directoryAndRecurseIfRequired_callback >>"$swaddle_build_package_rpm_files_rpmExcludedPaths"
	fi
	
	local include=true
	local excludedPath
	while IFS='' read -r excludedPath
	do
		if [ "$excludedPath" = /"$rpmFilePath" ]; then
			include=false
			break
		fi
	done <"$swaddle_build_package_rpm_files_rpmExcludedPaths"

	if $include; then
		swaddle_build_package_rpm_files_writeFileEntry "$rpmFilePath" '%dir'
	fi
	
	# recurse
	set +f
	for rpmFilePath in "$rpmFilePath"/*
	do
		set -f
		swaddle_build_package_rpm_files_outputDirective "$rpmFilePath"
	done
	set -f
}

swaddle_build_package_rpm_files_writeDirectivesIfRpmFilePathSpecial()
{
	local rpmFilePath="$1"
	local directive="$2"
	local valueName="$3"
	
	_swaddle_build_package_rpm_files_writeDirectivesIfRpmFilePathSpecial_callback()
	{
		local potentiallyMatchingFilePath
		for potentiallyMatchingFilePath in "$@"
		do
			if [ "$potentiallyMatchingFilePath" = /"$rpmFilePath" ]; then
				return 0
			fi
		done
		return 1
	}
	
	if configure_callFunctionWithDefaultsIfEmpty swaddle_rpm "$valueName" _swaddle_build_package_rpm_files_writeDirectivesIfRpmFilePathSpecial_callback; then
		swaddle_build_package_rpm_files_writeFileEntry "$rpmFilePath" "$directive"
		return 0
	fi
	return 1
}

core_usesIn swaddle simulateroot
core_dependency_requires '*' stat sed
swaddle_build_package_rpm_files_writeFileEntry()
{
	local rpmFilePath="$1"
	
	local potentiallyShortMode
	local mode
	local user
	local group
	IFS=' ' read -r potentiallyShortMode user group <<-EOF
		$(swaddle_simulateroot_execute stat -c '%a %U %G' "$rpmFilePath")
	EOF
	if [ ${#potentiallyShortMode} -eq 3 ]; then
		mode="0${potentiallyShortMode}"
	else
		mode="$potentiallyShortMode"
	fi
	
	local escapedRpmFilePath="$(printf '%s' "${rpmFilePath}" | sed -e 's;\[;\[\[\];g' -e 's;\*;\[\*\];g' -e 's;\?;\[\?\];g' -e 's;\%;\[\%\];g')"
	if [ -d "$rpmFilePath" ]; then
		escapedRpmFilePath="$escapedRpmFilePath"/
	fi
	
	if [ $# -eq 2 ]; then
		local directive="$2"
		printf '%s(%s, %s, %s) %s /%s\n' '%attr' "$mode" "$user" "$group" "$directive" "$escapedRpmFilePath"
	else
		printf '%s(%s, %s, %s) /%s\n' '%attr' "$mode" "$user" "$group" "$escapedRpmFilePath"
	fi
}
