# This file is part of swaddle. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT. No part of swaddle, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of swaddle. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT.


core_usesIn core/variable array
core_usesIn swaddle touch
core_usesIn swaddle configure
core_usesIn swaddle/build/package/rpm files

swaddle_build_package_rpm_registerConfiguration()
{
	configure_register Array NotEmpty swaddle_rpm depends
	configure_register Array NotEmpty swaddle_rpm depends_before_install
	configure_register Array NotEmpty swaddle_rpm depends_after_install
	configure_register Array NotEmpty swaddle_rpm depends_before_remove
	configure_register Array NotEmpty swaddle_rpm depends_after_remove
	configure_register Array NotEmpty swaddle_rpm depends_pre_transaction
	configure_register Array NotEmpty swaddle_rpm depends_post_transaction
	configure_register Array NotEmpty swaddle_rpm depends_verify
	configure_register Array NotEmpty swaddle_rpm provides
	configure_register Array NotEmpty swaddle_rpm conflicts
	configure_register Array NotEmpty swaddle_rpm replaces
	# See https://fedoraproject.org/wiki/Packaging:AutoProvidesAndRequiresFiltering
	configure_register Array NotEmpty swaddle_rpm regex_filter_from_provides
	configure_register Array NotEmpty swaddle_rpm regex_filter_from_requires
		
	configure_register Array NotEmpty swaddle_rpm ghost_files
	configure_register Array NotEmpty swaddle_rpm doc_files
	configure_register Array NotEmpty swaddle_rpm unreplaceable_config_files
	configure_register Array NotEmpty swaddle_rpm replaceable_config_files
	configure_register Array NotEmpty swaddle_rpm excluded_directories
	
	configure_register Value RpmDigest swaddle_rpm digest 'sha512'
	configure_register Value RpmCompression swaddle_rpm compression 'xz'
	configure_register Value RpmGroup swaddle_rpm category 'Applications/System'
	configure_register Value Boolean swaddle_rpm auto_req_prov 'yes'
	configure_register Value Boolean swaddle_rpm auto_req 'yes'
	configure_register Value Boolean swaddle_rpm auto_prov 'yes'
}

core_usesIn swaddle/build/generators manpage copyinreadme copyright
swaddle_build_package_rpm_generateContent()
{
	swaddle_build_generators_manpage_generate no '/usr'
	configure swaddle_rpm doc_files "/usr/share/man/man7/${_swaddle_build_swaddleName}.7"
	
	swaddle_build_generators_copyinreadme_generate no '/usr' README
	configure swaddle_rpm doc_files "/usr/share/doc/${_swaddle_build_swaddleName}/README"
	
	swaddle_build_generators_copyright_generate no '/usr' copyright
	configure swaddle_rpm doc_files "/usr/share/doc/${_swaddle_build_swaddleName}/copyright"
}

swaddle_build_package_rpm()
{
	local repositoryName="$(configure_getValue swaddle repository_name)"
	local _swaddle_repository_yum_repositoryPath="$_swaddle_repository_parentPath"/"$repositoryName"
	
	core_functions_execute _swaddle_build_package_rpm_functions "$@"
}

core_functions_register _swaddle_build_package_rpm_functions swaddle_build_package_rpm_setSpecFilePath
swaddle_build_package_rpm_setSpecFilePath()
{
	_swaddle_build_package_rpm_specFile="$_swaddle_build_package_temporaryFolderPath"/"$_swaddle_build_swaddleName".spec
}

core_functions_register _swaddle_build_package_rpm_functions swaddle_build_package_rpm_generateSpecFile
core_snippet_embed raw swaddle_rpm_spec_template
swaddle_build_package_rpm_generateSpecFile()
{
	core_snippet_retrieveAndSourceAsHereDoc swaddle_rpm_spec_template >"$_swaddle_build_package_rpm_specFile"
	
	swaddle_touch_setMtimeAndAtime "$_swaddle_build_package_rpm_specFile"
	
	# Now that the spec file exists, we need to remove root permissions so rpmbuild's %clean will not fail
	swaddle_simulateroot_ownAsExecutingUser "$_swaddle_build_package_root"
}

core_usesIn swaddle webserverFiles
core_dependency_requires '*' rpmbuild mkdir ln rm chmod
core_functions_register _swaddle_build_package_rpm_functions swaddle_package_rpm_rpmbuild
swaddle_package_rpm_rpmbuild()
{
	mkdir -m 0755 -p "$_swaddle_repository_yum_repositoryPath"
	
	local rpmbuildTemporaryScriptsPath="$_swaddle_build_package_temporaryFolderPath"/rpmbuild.tmp
	mkdir -m 0700 -p "$rpmbuildTemporaryScriptsPath"
	
	local options
	local options_initialised
	core_variable_array_initialise options
	
	core_variable_array_append options '-bb'
	
	case "$(core_init_verbosity)" in
		
		0)
			:
		;;
		
		1|2)
			core_variable_array_append options -v
		;;
		
		*)
			core_variable_array_append options -vv
		;;
		
	esac
	
	# RPM Signing is very, very broken
	# See, for instance, http://serverfault.com/questions/624888/bad-signatures-or-nokey-errors-on-rpms-i-just-signed or the 'schitzoid' comment in https://bugzilla.redhat.com/show_bug.cgi?id=86012
	# This is useful https://technosorcery.net/blog/2010/10/10/pitfalls-with-rpm-and-gpg/
	# - gpg-agent doesn't work, whatsoever
	# - empty passphrases are still requested (as rpm doesn't work with gpg properly)
	# - some RPM versions default to gpg2 but fail with it
	# - gpg 2.1 doesn't work at all because of security improvements to passphrases
	# - RPM only works with GPG v3 signatures (not the v4+ that are now common)
	# - RPM only works with a 2048-bit RSA key
	# - rpmbuild on CentOS 5 expects _gpg_name in $HOME/.rpmmacros and ignores any setting of --macros OR setting in the spec file

	_swaddle_package_rpm_rpmbuild_rpmMacrosCleanUp()
	{
		if [ -f "$HOME"/.rpmmacros."${_program_name}".$$ ]; then
			ln -f  "$HOME"/.rpmmacros."${_program_name}".$$ "$HOME"/.rpmmacros
			rm -rf "$HOME"/.rpmmacros."${_program_name}".$$
		fi
	}
	
	if core_variable_isTrue "$(swaddle_configure_sign)"; then
		
		local gpg="$(core_variable_escapeSingleQuotes "$(core_compatibility_which gpg)")"
		local home="$(core_variable_escapeSingleQuotes "$(configure_getValue swaddle keyring)")"
		local keyName="$(core_variable_escapeSingleQuotes "$(swaddle_configure_signer)")"
		
		# We use a local wrapper script because RPM makes an awful mess of parsing complex command lines which may contain embedded spaces
		# Going forward, we can probably use this to ensure gpg-agent is used
		local TMP_FILE
		core_temporaryFiles_newFileToRemoveOnExit
		local gpgProxyBecauseRpmIsAwful="$TMP_FILE"
		printf '%s' "#!/usr/bin/env sh
plainTextFileName=\"\$1\"
signatureFileName=\"\$2\"
export GNUPGHOME='$home'
export LC_ALL=C
exec $gpg --quiet --no-options --home '$home' --force-v3-sigs --digest-algo=sha1 --batch --no-verbose --no-armor --passphrase-fd 3 --no-secmem-warning --local-user '$keyName' --sign --detach-sign --output \"\$signatureFileName\" \"\$plainTextFileName\"
" >"$gpgProxyBecauseRpmIsAwful"
		chmod +x "$gpgProxyBecauseRpmIsAwful"
		if [ $(core_init_verbosity) -gt 1 ]; then
			cat "$gpgProxyBecauseRpmIsAwful" 1>&2
		fi
				
		if [ -f "$HOME"/.rpmmacros ]; then
			ln -f  "$HOME"/.rpmmacros "$HOME"/.rpmmacros."${_program_name}".$$
			rm -rf "$HOME"/.rpmmacros
		fi
		core_trap_addOnCleanUp _swaddle_package_rpm_rpmbuild_rpmMacrosCleanUp
		
		# Very, very weirdly, the first argument after $gpgProxyBecauseRpmIsAwful is not passed on RPM4.
		printf '%s' "%_signature gpg
%__gpg_sign_cmd $gpgProxyBecauseRpmIsAwful aaaa %{__plaintext_filename} %{__signature_filename} xxxx
" >"$HOME"/.rpmmacros
		if [ $(core_init_verbosity) -gt 1 ]; then
			cat "$HOME"/.rpmmacros 1>&2
		fi
		printf '%s: %s\n' "$_program_name" "About to build RPM - you will be asked for the passphrase for your GPG key '$(swaddle_configure_signer)', even if using gpg-agent (and even if it doesn't have one)!"
		
		core_variable_array_append options --sign
	fi
	
	core_variable_array_append options \
		--target "${_swaddle_build_package_translatedArchitecture}-redhat-linux" \
		--define "buildroot $_swaddle_build_package_root" \
		--define "_topdir $_swaddle_build_package_temporaryFolderPath" \
		--define "_sourcedir $_swaddle_build_package_temporaryFolderPath" \
		--define "_rpmdir $_swaddle_repository_yum_repositoryPath" \
		--define "_tmppath $rpmbuildTemporaryScriptsPath"
	core_variable_array_append options "$_swaddle_build_package_rpm_specFile"

	if [ "$(core_init_verbosity)" -gt 1 ]; then
		if ! core_variable_array_passToFunctionAsArguments options rpmbuild; then
			core_message FAIL "rpmbuild failed"
			exit $core_commandLine_exitCode_SOFTWARE
		fi
	else
		if ! core_variable_array_passToFunctionAsArguments options rpmbuild 1>/dev/null 2>/dev/null; then 
			core_message FAIL "rpmbuild failed (run again with  --verbose 2  to find out why)"
			exit $core_commandLine_exitCode_SOFTWARE
		fi
	fi
	
	if core_variable_isTrue "$(swaddle_configure_sign)"; then
		_swaddle_package_rpm_rpmbuild_rpmMacrosCleanUp
	fi
	
	# Compute file name; weirdly Epoch is omitted from it (cf Debian)!
	local rpmVersion="$(configure_getValue swaddle version)"
	local rpmRelease="$(_swaddle_build_package_rpm_release)"
	local rpmFileName="$_swaddle_build_swaddleName"-"$rpmVersion"-"$rpmRelease"."$_swaddle_build_package_translatedArchitecture"
	
	set +f
	set -- "$_swaddle_repository_yum_repositoryPath"/"$_swaddle_build_package_translatedArchitecture"/"$rpmFileName".rpm
	set -f
	local rpmFilePath="$1"
	swaddle_touch_setMtimeAndAtime "$rpmFilePath"
	
	# RPM files can be compressed A LOT more; at least 10Kb is possible
	
	swaddle_touch_setMtimeAndAtime "$_swaddle_repository_yum_repositoryPath"/"$_swaddle_build_package_translatedArchitecture"
	swaddle_touch_setMtimeAndAtime "$_swaddle_repository_yum_repositoryPath"
	
	swaddle_publishers_publish "${_swaddle_build_swaddleName} ${_swaddle_build_package_translatedArchitecture} package (RPM)" "$rpmFilePath" 'application/x-redhat-package-manager'
}

_swaddle_build_package_rpm_digestAlgorithm()
{
	case "$(configure_getValue swaddle_rpm digest)" in
		
		md5)
			printf '%s' 1
		;;
		
		sha1)
			printf '%s' 2
		;;
		
		sha224)
			printf '%s' 11
		;;
		
		sha256)
			printf '%s' 8
		;;
		
		sha384)
			printf '%s' 9
		;;
		
		sha512)
			printf '%s' 10
		;;
		
	esac
	
	# Also, the following exist:-
	# RIPEMD-128  105
	# RIPEMD-160  3
	# RIPEMD-256  111
	# RIPEMD-320  112
	# Jenkins  109
	# CRC-32  106
	# ADLER-32  107
	# CRC-64  108
	# MD2  5
	# MD4  104
	# TIGER-192  6
	# CRC-32  106
}

_swaddle_build_package_rpm_compression()
{
	case "$(configure_getValue swaddle_rpm compression)" in
		
		none)
			printf '%s' 'w0.gzdio'
		;;
		
		gzip)
			printf '%s' 'w9.gzdio'
		;;
		
		bzip2)
			printf '%s' 'w9.bzdio'
		;;
		
		lzma)
			# Level 7 in Fedora's suggestions
			printf '%s' 'w9.lzdio'
		;;
		
		xz)
			# Level 7 in Fedora's suggestions; FPM uses level 2
			printf '%s' 'w9.xzdio'
		;;
		
	esac
}

_swaddle_build_package_rpm_filterFrom()
{
	local tagName="%filter_from_${1}"
	local configurationSettingName="$2"

	local namespace='swaddle_rpm'
	local configurationSettingValue
	_configure_configurationSettingValue "$namespace" "$configurationSettingName"
	
	_swaddle_build_package_rpm_filterFrom_callback()
	{
		local regex="$core_variable_array_element"
		printf '%s %s\n' "$tagName" "$regex"
	}
	
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_rpm_filterFrom_callback
}

_swaddle_build_package_rpm_filterSetup()
{
	local namespace='swaddle_rpm'
	local configurationSettingName
	local configurationSettingValue
	local doSetup=0
	for configurationSettingName in "$@"
	do
		_configure_configurationSettingValue "$namespace" "$configurationSettingName"
		if ! core_variable_array_isEmpty "$configurationSettingValue"; then
			doSetup=1
			break
		fi
	done
	
	if [ $doSetup -eq 0 ]; then
		return 0
	fi
	
	echo $doSetup
	printf '%s\n' '%filter_setup'
}

_swaddle_build_package_rpm_yesNo()
{
	if core_variable_isTrue "$(configure_getValue swaddle_rpm "$1")"; then
		printf 'yes'
	else
		printf 'no'
	fi
}

_swaddle_build_package_rpm_release()
{
	local iteration="$(configure_getValue swaddle iteration)"
	printf '%s' $((iteration))
}

core_dependency_requires '*' head
_swaddle_build_package_rpm_summaryDescription()
{
	local summary="$(configure_getValue swaddle_package description | head -n 1 )"
	if [ -z "$summary" ]; then
		core_message FAIL "configure value 'swaddle_package description' has a blank first line which can't be used for a summary"
	fi
	
	printf '%s' "$summary"
}

_swaddle_build_package_rpm_licence()
{
	local configurationSettingValue="$(configure_getValue swaddle licence)"
	
	case "$configurationSettingValue" in
		
		public-domain)
			printf '%s' 'Public Domain'
			return 0
		;;
		
		unlicensed)
			printf '%s' 'Unlicensed'
			return 0
		;;
		
		licensed)
			printf '%s' 'Licensed'
			return 0
		;;
		
	esac
	
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	# embedded in validate.functions
	core_snippet_retrieve licences no "$TMP_FILE"
	local validValuesFilePath="$TMP_FILE"

	local spdxIdentifier
	local spdxName
	local fedoraIdentifier
	local found=0
	while IFS="$(printf '\t')" read -r spdxIdentifier spdxName fedoraIdentifier
	do
		if [ "$configurationSettingValue" = "$spdxIdentifier" ]; then
			printf '%s' "$fedoraIdentifier"
			rm "$validValuesFilePath"
			return 0
		fi
	done <"$validValuesFilePath"
	
	if [ -n "$spdxIdentifier" ]; then
		if [ "$configurationSettingValue" = "$spdxIdentifier" ]; then
			printf '%s' "$fedoraIdentifier"
			rm "$validValuesFilePath"
			return 0
		fi
	fi
	
	core_message WARN "The configuration setting 'swaddle licence' (SPDX '$configurationSettingValue') has no Fedora licence code equivalent."
	printf '%s' "Unknown"
	rm "$validValuesFilePath"
}

_swaddle_build_package_rpm_bugUrl()
{
	if swaddle_build_package_rpm_versionIsGreaterThanOrEqualTo 4.8.0; then
		printf 'BugURL: %s' "$(swaddle_configure_bugsUrl)"
	else
		printf '%s' '#BugURL not supported on this version of rpm'
	fi
}

core_usesIn version
core_dependency_requires '*' rpm cut
swaddle_build_package_rpm_versionIsGreaterThanOrEqualTo()
{
	local versionToTest="$1"
	local rpmbuildVersion="$(rpm --version | cut -d' ' -f3)"
	version_isGreaterThanOrEqualTo "$rpmbuildVersion" "$versionToTest"
}

_swaddle_build_package_rpm_iterateDependencies()
{
	local rpmTag="$1"
	local configurationSettingName="$2"

	local namespace='swaddle_rpm'
	local configurationSettingValue
	_configure_configurationSettingValue
	
	_swaddle_build_package_rpm_iterateDependencies_callback()
	{
		local dependency="$core_variable_array_element"
		printf '%s: %s\n' "$rpmTag" "$dependency"
	}
	
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_rpm_iterateDependencies_callback
}

core_dependency_requires '*' sed
_swaddle_build_package_rpm_formatDescription()
{
	sed -e 's/^\w*$/ \./g' <<EOF
$(configure_getValue swaddle_package description)
EOF
}

core_dependency_requires '*' cat
_swaddle_build_package_rpm_script()
{
	local rpmScriptType="$1"
	local scriptType="$2"
	local scriptTypePath="$_swaddle_build_sourcePath"/"$_swaddle_build_package_kind"/scripts/"$scriptType"
	
	if ! core_path_isReadableAndSearchableFolderPath "$scriptTypePath"; then
		return 0
	fi
	
	set +f
	set -- "$scriptTypePath"/*
	set -f
	if [ ! -e "$1" ]; then
		return 0
	fi
	
	# https://fedoraproject.org/wiki/How_to_create_an_RPM_package
	# $1 is passed to this script as a number
	# For pre and post, 1 for first install, 2+ for upgrade
	# For preun and postun, 0 is when last version is removed (1 is for upgrade)
	# For verify, not used
	# For pretrans and posttrans, always 0
	
	printf '%s\n' "%${rpmScriptType}"
	local scriptFile
	for scriptFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$scriptFile"; then
			cat "$scriptFile"
			printf '\n'
		fi
	done
}

_swaddle_build_package_rpm_trigger_printIfValid()
{
	if [ -z "$dependency" ]; then
		return 0
	fi
	
	if core_variables_startsWith "$dependency" '#'; then
		return 0
	fi
	
	if [ $isAfterFirst -eq 1 ]; then
		printf ', '
	fi
	
	printf '%s' "$dependency"
}

_swaddle_build_package_rpm_trigger()
{
	local rpmScriptType="$1"
	local scriptType="$2"
	local scriptTypePath="$_swaddle_build_sourcePath"/"$_swaddle_build_package_kind"/scripts/"$scriptType"
	
	if ! core_path_isReadableAndSearchableFolderPath "$scriptTypePath"; then
		return 0
	fi
	
	set +f
	set -- "$scriptTypePath"/*.depends
	set -f
	if [ ! -e "$1" ]; then
	
		set +f
		set -- "$scriptTypePath"/*.sh
		set -f
		if [ ! -e "$1" ]; then
			core_message WARN "No depends files for trigger '$scriptType' (but sh files are present)"
			return 0
		fi
		
		return 0
	fi
	
	printf '%s -- ' "$rpmScriptType"
	local dependency
	local dependsFile
	local isAfterFirst=0
	for dependsFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$dependsFile"; then
			
			while IFS='' read -r dependency
			do
				_swaddle_build_package_rpm_trigger_printIfValid
				isAfterFirst=1
			done <"$dependsFile"
			if [ -n "$dependency" ]; then
				_swaddle_build_package_rpm_trigger_printIfValid
			fi
		fi
	done
	printf '\n'
	
	set +f
	set -- "$scriptTypePath"/*.sh
	set -f
	if [ ! -e "$1" ]; then
		core_message WARN "No sh files for trigger '$scriptType' (but depends files are present)"
		return 0
	fi
	
	local scriptFile
	for scriptFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$scriptFile"; then
			cat "$scriptFile"
			printf '\n'
		fi
	done
}
