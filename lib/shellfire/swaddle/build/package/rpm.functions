core_usesIn core/variable array

swaddle_build_package_rpm_registerConfiguration()
{
	configure_register Array NotEmpty swaddle_rpm depends
	configure_register Array NotEmpty swaddle_rpm depends_before_install
	configure_register Array NotEmpty swaddle_rpm depends_after_install
	configure_register Array NotEmpty swaddle_rpm depends_before_remove
	configure_register Array NotEmpty swaddle_rpm depends_after_remove
	configure_register Array NotEmpty swaddle_rpm depends_pre_transaction
	configure_register Array NotEmpty swaddle_rpm depends_post_transaction
	configure_register Array NotEmpty swaddle_rpm depends_verify
	configure_register Array NotEmpty swaddle_rpm provides
	configure_register Array NotEmpty swaddle_rpm conflicts
	configure_register Array NotEmpty swaddle_rpm replaces
	# See https://fedoraproject.org/wiki/Packaging:AutoProvidesAndRequiresFiltering
	configure_register Value Boolean swaddle_rpm autoDepends 'yes'
	configure_register Array NotEmpty swaddle_rpm regexFilterFromProvides
	configure_register Array NotEmpty swaddle_rpm regexFilterFromRequires
		
	configure_register Array NotEmpty swaddle_rpm unreplaceableConfigFiles
	configure_register Array NotEmpty swaddle_rpm replaceableConfigFiles
	configure_register Array NotEmpty swaddle_rpm packageFolderPaths

	configure_register Value Digest swaddle_rpm digest 'sha512'
	configure_register Value Compression swaddle_rpm compression 'xz'
	configure_register Value RpmGroup swaddle_rpm category 'Applications/System'
	configure_register Value Boolean swaddle_rpm sign 'yes'
	configure_register Value Boolean swaddle_rpm autoReqProv 'yes'
	configure_register Value Boolean swaddle_rpm autoReq 'yes'
	configure_register Value Boolean swaddle_rpm autoProv 'yes'
	
	
	configure_register Value NotEmpty swaddle_rpm changelog
}

swaddle_build_package_rpm()
{
	# Validate that config files and package folder paths are all valid
	
	core_functions_execute _swaddle_build_package_rpm_functions "$@"
}

core_functions_register _swaddle_build_package_rpm_functions swaddle_build_package_rpm_validateConfigFiles
swaddle_build_package_rpm_validateConfigFiles()
{
	_swaddle_build_package_rpm_validateConfigFiles_callback()
	{
		local configFile="$core_variable_array_element"
		if core_variable_doesNotStartWith "$configFile" '/'; then
			core_exitError $core_commandLine_exitCode_CONFIG "The $what file '$configFile' does not start with a '/'"
		fi
		if core_variable_endsWith "$configFile" '/'; then
			core_exitError $core_commandLine_exitCode_CONFIG "The $what file '$configFile' ends with a '/'"
		fi
		local absoluteConfigFilePath="$_swaddle_build_package_root"/"$configFile"
		if [ -L "$absoluteConfigFilePath" ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "The $what file '$configFile' is a symlink"
		fi
		if [ ! -f "$absoluteConfigFilePath" ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "The $what file '$configFile' does not exist or is not a file"
		fi
	}
	
	local what
	local configurationSettingValue
	
	what="unreplaceableConfigFiles"
	_configure_configurationSettingValue 'swaddle_rpm' "$what"
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_rpm_validateConfigFiles_callback

	what="replaceableConfigFiles"
	_configure_configurationSettingValue 'swaddle_rpm' "$what"
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_rpm_validateConfigFiles_callback
}

core_functions_register _swaddle_build_package_rpm_functions swaddle_build_package_rpm_validatePackageFolders
swaddle_build_package_rpm_validatePackageFolders()
{
	_swaddle_build_package_rpm_validatePackageFolders_callback()
	{
		local packageFolder="$core_variable_array_element"
		if core_variable_doesNotStartWith "$packageFolder" '/'; then
			core_exitError $core_commandLine_exitCode_CONFIG "The $what folder '$packageFolder' does not start with a '/'"
		fi
		if core_variable_endsWith "$packageFolder" '/'; then
			core_exitError $core_commandLine_exitCode_CONFIG "The $what folder '$packageFolder' ends with a '/'"
		fi
		local absoluteConfigFolderPath="$_swaddle_build_package_root"/"$configFile"
		if [ -L "$absoluteConfigFolderPath" ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "The $what folder '$packageFolder' is a symlink"
		fi
		if [ ! -d "$absoluteConfigFolderPath" ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "The $what file '$packageFolder' does not exist or is not a file"
		fi
	}
	
	local what
	local configurationSettingValue
	
	what="packageFolderPaths"
	_configure_configurationSettingValue 'swaddle_rpm' "$what"
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_rpm_validatePackageFolders_callback
}

core_functions_register _swaddle_build_package_rpm_functions swaddle_build_package_rpm_setSpecFilePath
swaddle_build_package_rpm_setSpecFilePath()
{
	_swaddle_build_package_rpm_specFile="$_swaddle_build_package_temporaryFolderPath"/"$_swaddle_build_swaddleName".spec
}

core_functions_register _swaddle_build_package_rpm_functions swaddle_build_package_rpm_generateSpecFile
core_snippet_embed raw swaddle_rpm_spec_template
swaddle_build_package_rpm_generateSpecFile()
{
	core_snippet_retrieveAndSourceAsHereDoc swaddle_rpm_spec_template >"$_swaddle_build_package_rpm_specFile"
}

core_dependency_requires '*' rpmbuild mkdir mv
core_functions_register _swaddle_build_package_rpm_functions swaddle_package_rpm_rpmbuild
swaddle_package_rpm_rpmbuild()
{
	# Could this be outputFolder?
	local rpmbuildParentOutputFolderPath="$_swaddle_build_package_temporaryFolderPath"/rpms-by-arch
	mkdir -m 0700 -p "$rpmbuildParentOutputFolderPath"
	
	local rpmbuildTemporaryScriptsPath="$_swaddle_build_package_temporaryFolderPath"/rpmbuild.tmp
	mkdir -m 0700 -p "$rpmbuildTemporaryScriptsPath"
	
	local options
	local options_initialised
	core_variable_array_initialise options
	
	core_variable_array_append options '-bb'
	
	case "$(core_init_verbosity)" in
		
		0|1)
			:
		;;
		
		2)
			core_variable_array_append options -v
		;;
		
		*)
			core_variable_array_append options -vv
		;;
		
	esac
	
	if core_variable_isTrue "$(configure_getConfigurationSetting swaddle_rpm sign)"; then
		core_variable_array_append options --sign
	fi
	
	local architecture="$(_swaddle_build_package_rpm_architecture)"
	core_variable_array_append options \
		--target "$architecture" \
		--define "buildroot $_swaddle_build_package_root" \
		--define "_topdir $_swaddle_build_package_temporaryFolderPath" \
		--define "_sourcedir $_swaddle_build_package_temporaryFolderPath" \
		--define "_rpmdir $rpmbuildParentOutputFolderPath" \
		--define "_tmppath $rpmbuildTemporaryScriptsPath"
	
	core_variable_array_append options "$_swaddle_build_package_rpm_specFile"
	
	if [ "$(core_init_verbosity)" -gt 0 ]; then
		core_variable_array_passToFunctionAsArguments options rpmbuild
	else
		core_variable_array_passToFunctionAsArguments options rpmbuild 1>/dev/null 2>/dev/null
	fi
	
	local rpmOutputPath="$swaddle_outputPath"/packages/rpm
	mkdir -m 0755 -p "$rpmOutputPath"
	
	set +f
	mv "$rpmbuildParentOutputFolderPath"/"$architecture"/*.rpm "$rpmOutputPath"
	set -f
}

_swaddle_build_package_rpm_architecture()
{
	local architecture="$(configure_getConfigurationSetting swaddle architecture)"
	case "$architecture" in
		
		all|noarch)
			printf '%s' 'noarch'
		;;
		
		amd64|x86_64)
			printf '%s' 'x86_64'
		;;
		
		*)
			printf '%s' "$architecture"
		;;
		
	esac
}

_swaddle_build_package_rpm_digestAlgorithm()
{
	case "$(configure_getConfigurationSetting swaddle_rpm digest)" in
		
		md5)
			printf '%s' 1
		;;
		
		sha1)
			printf '%s' 2
		;;
		
		sha256)
			printf '%s' 8
		;;
		
		sha384)
			printf '%s' 9
		;;
		
		sha512)
			printf '%s' 10
		;;
		
	esac
}

_swaddle_build_package_rpm_compression()
{
	case "$(configure_getConfigurationSetting swaddle_rpm compression)" in
		
		none)
			printf '%s' 'w0.gzdio'
		;;
		
		gzip)
			printf '%s' 'w9.gzdio'
		;;
		
		bzip2)
			printf '%s' 'w9.bzdio'
		;;
		
		lzma)
			# Level 7 in Fedora's suggestions
			printf '%s' 'w9.lzdio'
		;;
		
		xz)
			# Level 7 in Fedora's suggestions; FPM uses level 2
			printf '%s' 'w9.xzdio'
		;;
		
	esac
}

_swaddle_build_package_rpm_filterFrom()
{
	local tagName="%filter_from_${1}"
	local configurationSettingName="$2"

	local namespace='swaddle_rpm'
	local configurationSettingValue
	_configure_configurationSettingValue "$namespace" "$configurationSettingName"
	
	_swaddle_build_package_rpm_filterFrom_callback()
	{
		local regex="$core_variable_array_element"
		printf '%s %s\n' "$tagName" "$regex"
	}
	
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_rpm_filterFrom_callback
}

_swaddle_build_package_rpm_filterSetup()
{
	local namespace='swaddle_rpm'
	local configurationSettingName
	local configurationSettingValue
	local doSetup=0
	for configurationSettingName in "$@"
	do
		_configure_configurationSettingValue "$namespace" "$configurationSettingName"
		if ! core_variable_array_isEmpty "$configurationSettingValue"; then
			doSetup=1
			break
		fi
	done
	
	if [ $doSetup -eq 0 ]; then
		return 0
	fi
	
	echo $doSetup
	printf '%s\n' '%filter_setup'
}

_swaddle_build_package_rpm_yesNo()
{
	if core_variable_isTrue "$(configure_getConfigurationSetting swaddle_rpm "$1")"; then
		printf 'yes'
	else
		printf 'no'
	fi
}

_swaddle_build_package_rpm_release()
{
	local iteration="$(configure_getConfigurationSetting swaddle iteration)"
	printf '%s' $((iteration))
}

core_dependency_requires '*' head
_swaddle_build_package_rpm_summaryDescription()
{
	printf '%s' "$(configure_getConfigurationSetting swaddle description)" | head -n 1
}

_swaddle_build_package_rpm_iterateDependencies()
{
	local rpmTag="$1"
	local configurationSettingName="$2"

	local namespace='swaddle_rpm'
	local configurationSettingValue
	_configure_configurationSettingValue
	
	_swaddle_build_package_rpm_iterateDependencies_callback()
	{
		local dependency="$core_variable_array_element"
		printf '%s: %s\n' "$rpmTag" "$dependency"
	}
	
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_rpm_iterateDependencies_callback
}

core_dependency_requires '*' sed
_swaddle_build_package_rpm_formatDescription()
{
	sed -e 's/^\w*$/ \./g' <<EOF
$(configure_getConfigurationSetting swaddle description)
EOF
}

core_dependency_requires '*' cat
_swaddle_build_package_rpm_script()
{
	local rpmScriptType="$1"
	local scriptType="$2"
	local scriptTypePath="$_swaddle_build_packagesPath"/"$_swaddle_build_package_kind"/scripts/"$scriptType"
	
	if ! core_path_isReadableAndSearchableFolderPath "$scriptTypePath"; then
		return 0
	fi
	
	set +f
	set -- "$scriptTypePath"/*
	set -f
	if [ ! -e "$1" ]; then
		return 0
	fi
	
	# https://fedoraproject.org/wiki/How_to_create_an_RPM_package
	# $1 is passed to this script as a number
	# For pre and post, 1 for first install, 2+ for upgrade
	# For preun and postun, 0 is when last version is removed (1 is for upgrade)
	# For verify, not used
	# For pretrans and posttrans, always 0
	
	printf '%s\n' "%${rpmScriptType}"
	local scriptFile
	for scriptFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$scriptFile"; then
			cat "$scriptFile"
			printf '\n'
		fi
	done
}

_swaddle_build_package_rpm_trigger_printIfValid()
{
	if [ -z "$dependency" ]; then
		return 0
	fi
	
	if core_variables_startsWith "$dependency" '#'; then
		return 0
	fi
	
	if [ $isAfterFirst -eq 1 ]; then
		printf ', '
	fi
	
	printf '%s' "$dependency"
}

_swaddle_build_package_rpm_trigger()
{
	local rpmScriptType="$1"
	local scriptType="$2"
	local scriptTypePath="$_swaddle_build_packagesPath"/"$_swaddle_build_package_kind"/scripts/"$scriptType"
	
	if ! core_path_isReadableAndSearchableFolderPath "$scriptTypePath"; then
		return 0
	fi
	
	set +f
	set -- "$scriptTypePath"/*.depends
	set -f
	if [ ! -e "$1" ]; then
	
		set +f
		set -- "$scriptTypePath"/*.sh
		set -f
		if [ ! -e "$1" ]; then
			core_message WARN "No depends files for trigger '$scriptType' (but sh files are present)"
			return 0
		fi
		
		return 0
	fi
	
	printf '%s -- ' "$rpmScriptType"
	local dependency
	local dependsFile
	local isAfterFirst=0
	for dependsFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$dependsFile"; then
			
			while IFS='' read -r dependency
			do
				_swaddle_build_package_rpm_trigger_printIfValid
				isAfterFirst=1
			done <"$dependsFile"
			if [ -n "$dependency" ]; then
				_swaddle_build_package_rpm_trigger_printIfValid
			fi
		fi
	done
	printf '\n'
	
	set +f
	set -- "$scriptTypePath"/*.sh
	set -f
	if [ ! -e "$1" ]; then
		core_message WARN "No sh files for trigger '$scriptType' (but depends files are present)"
		return 0
	fi
	
	local scriptFile
	for scriptFile in "$@"
	do
		if core_path_isReadableNonEmptyFilePath "$scriptFile"; then
			cat "$scriptFile"
			printf '\n'
		fi
	done
}

_swaddle_build_package_rpm_files_computeRpmPath()
{
	local fileName="$(core_compatibility_basename "$objectPath")"
	rpmPath="$relativePath"/"$fileName"
}

_swaddle_build_package_rpm_files_writeAttr()
{
	local potentiallyShortMode
	local mode
	local user
	local group
	IFS=' ' read -r potentiallyShortMode user group <<-EOF
		$(stat -c '%a %U %G' "$objectPath")
	EOF
	if [ ${#potentiallyShortMode} -eq 3 ]; then
		mode="0${potentiallyShortMode}"
	else
		mode="$potentiallyShortMode"
	fi
	printf '%%attr(%s, %s, %s) ' "$mode" "$user" "$group"
}

_swaddle_build_package_rpm_files_writeAdjustedPath()
{
	local trailingSlashIfAny="$1"
	local adjustedRpmPath="${rpmPath}${trailingSlashIfAny}"
	printf '"%s"\n' "$adjustedRpmPath" | sed -e 's;\[;\[\[\];g' -e 's;\*;\[\*\];g' -e 's;\?;\[\?\];g' -e 's;\%;\[\%\];g'
}

_swaddle_build_package_rpm_files_isSpecial()
{
	[ "$core_variable_array_element" = "$rpmPath" ]
}

_swaddle_build_package_rpm_files_writeFolder()
{
	local rpmPath
	_swaddle_build_package_rpm_files_computeRpmPath

	local configurationSettingValue
	_configure_configurationSettingValue 'swaddle_rpm' 'packageFolderPaths'
	if core_variable_array_iterateShortcut "$configurationSettingValue" _swaddle_build_package_rpm_files_isSpecial; then
		printf '%%dir '
	fi
	
	_swaddle_build_package_rpm_files_writeAttr
	_swaddle_build_package_rpm_files_writeAdjustedPath '/'
	
	_swaddle_build_package_rpm_files_recurse "$objectPath" "$rpmPath"
}

core_dependency_requires '*' stat rm sed
_swaddle_build_package_rpm_files_writeFile()
{
	local rpmPath
	_swaddle_build_package_rpm_files_computeRpmPath

	local configurationSettingValue
	_configure_configurationSettingValue 'swaddle_rpm' 'unreplaceableConfigFiles'
	local configFileCount=0
	if core_variable_array_iterateShortcut "$configurationSettingValue" _swaddle_build_package_rpm_files_isSpecial; then
		printf '%%config(noreplace) '
		configFileCount=1
	fi
	_configure_configurationSettingValue 'swaddle_rpm' 'replaceableConfigFiles'
	if core_variable_array_iterateShortcut "$configurationSettingValue" _swaddle_build_package_rpm_files_isSpecial; then
		if [ $configFileCount -eq 1 ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "Config file '$rpmPath' specified in both 'unreplaceableConfigFiles' and 'replaceableConfigFiles'"
		printf '%%config '
	fi
	
	_swaddle_build_package_rpm_files_writeAttr
	_swaddle_build_package_rpm_files_writeAdjustedPath ''
}

_swaddle_build_package_rpm_files()
{
	_swaddle_build_package_rpm_files_recurse "$_swaddle_build_package_root" ''
}

_swaddle_build_package_rpm_files_recurse()
{
	local currentFolderPath="$1"
	local relativePath="$2"
	
	set +f
	local objectPath
	local basename
	for objectPath in "$currentFolderPath"/*
	do
		set -f
		if [ ! -e "$objectPath" ]; then
			continue
		fi
		
		basename="$(core_compatibility_basename "$objectPath")"
		if core_variable_endsWith "$basename" ".swaddle-settings"; then
			core_exitError $core_commandLine_exitCode_CONFIG "swaddle-settings without matching parent '$objectPath'"
		fi
	
		if [ -L "$objectPath" ]; then
			_swaddle_build_package_rpm_files_writeFile
		elif [ -d "$objectPath" ]; then
			_swaddle_build_package_rpm_files_writeFolder
		else
			_swaddle_build_package_rpm_files_writeFile
		fi
	
	done
	set -f
}




# Some rules on the GROUP TAG: https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/Packagers_Guide/chap-Packagers_Guide-Spec_File_Reference-Preamble.html
# Derived from /usr/share/doc/rpm-4.8.0/ on Centos 6.5
core_snippet_embed raw swaddle_rpm_group
configure_validateRpmGroup()
{
	configure_validateValue group "$1"
	
	if core_variable_endsWith "$_swaddle_build_swaddleName" '-doc'; then
		if [ "$1" != 'Documentation' ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "The configuration setting '$configurationSettingName' ('$1') ends in '-doc' so its rpm_group must be 'Documentation', not '$1'."
		fi
	fi
}
