core_usesIn swaddle touch
core_usesIn swaddle configure

swaddle_build_package_deb_registerConfiguration()
{
	# Also used by apt as defaults for when values are missing
	# common other values are 18m, 5y and 3y
	configure_register Value NotEmpty swaddle_deb supported '9m'
	configure_register Value DebSection swaddle_deb section 'misc'
	configure_register Value DebPriority swaddle_deb priority 'extra'
		
	configure_register Value DebComponent swaddle_deb component 'multiverse'
	
	configure_register Value DebMultiArch swaddle_deb multiarch 'no'
	configure_register Value DebCompression swaddle_deb compression 'xz'
		
	configure_register Value Boolean swaddle_deb essential 'no'
	configure_register Value Boolean swaddle_deb build_essential 'no'
	
	configure_register Array NotEmpty swaddle_deb uploaders
	configure_register Array NotEmpty swaddle_deb depends
	configure_register Array NotEmpty swaddle_deb pre_depends
	configure_register Array NotEmpty swaddle_deb recommends
	configure_register Array NotEmpty swaddle_deb suggests
	configure_register Array NotEmpty swaddle_deb breaks
	configure_register Array NotEmpty swaddle_deb conflicts
	configure_register Array NotEmpty swaddle_deb provides
	configure_register Array NotEmpty swaddle_deb replaces
	configure_register Array NotEmpty swaddle_deb enhances
	configure_register Array NotEmpty swaddle_deb built_using
	
	# eg Original-Maintainer: xyz <xyz@mail.com>
	configure_register Array NotEmpty swaddle_deb extra_control_fields

	#http://www.debian.org/doc/debian-policy/ch-sharedlibs.html#s-shlibs
	configure_register Array NotEmpty swaddle_deb shlibs
	configure_register Array NotEmpty swaddle_deb config_files
	configure_register Array NotEmpty swaddle_deb triggers_activate
	configure_register Array NotEmpty swaddle_deb triggers_activate_noawait
	configure_register Array NotEmpty swaddle_deb triggers_interest
	configure_register Array NotEmpty swaddle_deb triggers_interest_noawait
	
	configure_register Array DebTask swaddle_deb tasks
	configure_register Array NotEmpty swaddle_deb tags
	
	core_TODO "We don't yet support debconf and templates, as, in our view, they're evil."
}

swaddle_build_package_deb()
{
	local multiarch="$(configure_getValue swaddle_deb multiarch)"
	if [ "$_swaddle_build_package_translatedArchitecture" = 'all' ]; then
		if [ "$multiarch" = 'same' ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "A deb package can't have Architecture 'all' and also Multi-Arch 'same'."
		fi
	fi
	core_functions_execute _swaddle_build_package_deb_functions "$@"
}

core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_computeDebianVersion
swaddle_build_package_deb_computeDebianVersion()
{
	local epoch="$(configure_getValue swaddle epoch)"
	local version="$(configure_getValue swaddle version)"
	local iteration="$(configure_getValue swaddle iteration)"
	if [ -z "$epoch" ]; then
		_swaddle_build_package_deb_debianVersion="$version"-"$iteration"
	elif [ "$epoch" = '0' ]; then
		_swaddle_build_package_deb_debianVersion="$version"-"$iteration"
	else
		_swaddle_build_package_deb_debianVersion="$epoch":"$version"-"$iteration"
	fi
}

core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlFolder
swaddle_build_package_deb_createControlFolder()
{
	_swaddle_build_package_deb_controlFolderPath="$_swaddle_build_package_temporaryFolderPath"/control
	mkdir -m 0755 -p "$_swaddle_build_package_deb_controlFolderPath"
}

core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createConffiles
swaddle_build_package_deb_createConffiles()
{
	_swaddle_build_package_deb_createConffiles_callback()
	{
		local configFile="$core_variable_array_element"
		if core_variable_doesNotStartWith "$configFile" '/'; then
			core_exitError $core_commandLine_exitCode_CONFIG "The configFiles file '$configFile' does not start with a '/'"
		fi
		if core_variable_endsWith "$configFile" '/'; then
			core_exitError $core_commandLine_exitCode_CONFIG "The configFiles file '$configFile' ends with a '/'"
		fi
		local absoluteConfigFilePath="$_swaddle_build_package_root"/"$configFile"
		if [ -L "$absoluteConfigFilePath" ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "The configFiles file '$configFile' is a symlink"
		fi
		if [ ! -f "$absoluteConfigFilePath" ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "The configFiles file '$configFile' does not exist or is not a file"
		fi
		printf '%\n' "$configFile"
	}
	
	local confFilesPath="$_swaddle_build_package_deb_controlFolderPath"/conffiles
	
	local configurationSettingValue
	_configure_configurationSettingValue 'swaddle_deb' 'config_files'
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_deb_createConffiles_callback >"$confFilesPath"
	
	if [ ! -s "$confFilesPath" ]; then
		rm "$confFilesPath"
	fi
}

core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlShlibs
swaddle_build_package_deb_createControlShlibs()
{
	local namespace='swaddle_deb'
	local configurationSettingValue
	_configure_configurationSettingValue "$namespace" shlibs
	
	local shlibsFilePath="$_swaddle_build_package_deb_controlFolderPath"/shlibs
	
	_swaddle_build_package_deb_createControlShlibs_callback()
	{
		# eg 'libapt-private 0.0 apt'
		local dependency="$core_variable_array_element"
		printf '%s\n' "$dependency"
	}
	
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_deb_createControlShlibs_callback >"$shlibsFilePath"
	
	if [ ! -s "$shlibsFilePath" ]; then
		rm "$shlibsFilePath"
	fi
}

core_dependency_requires '*' rm
core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlTriggers
swaddle_build_package_deb_createControlTriggers()
{
	local triggersFilePath="$_swaddle_build_package_deb_controlFolderPath"/triggers
	local configurationSettingValue
	local triggerKind
	
	_swaddle_build_package_deb_createControlTriggers_callback()
	{
		local triggerPath="$core_variable_array_element"
		printf '%s %s\n' "$triggerKind" "$triggerPath"
	}
	
	{
		triggerKind=activate
		_configure_configurationSettingValue 'swaddle_deb' "triggers_$triggerKind"
		core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_deb_createControlTriggers_callback
		
		_configure_configurationSettingValue 'swaddle_deb' "triggers_${triggerKind}_noawait"
		triggerKind="$triggerKind"-noawait
		core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_deb_createControlTriggers_callback
		
		triggerKind=interest
		_configure_configurationSettingValue 'swaddle_deb' "triggers_$triggerKind"
		core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_deb_createControlTriggers_callback
		
		_configure_configurationSettingValue 'swaddle_deb' "triggers_${triggerKind}_noawait"
		triggerKind="$triggerKind"-noawait
		core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_deb_createControlTriggers_callback
	} >"$triggersFilePath"
	
	if [ ! -s "$triggersFilePath" ]; then
		rm "$triggersFilePath"
	fi
}

core_usesIn swaddle digest
core_dependency_requires '*' stat
core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlMd5sumsAndCalculateInstalledSize
swaddle_build_package_deb_createControlMd5sumsAndCalculateInstalledSize()
{
	_swaddle_build_package_deb_createControlMd5sums_recurse()
	{
		local parentPath="$1"
		local relativePath="$2"
		local entry

		local digest
		local uselessFileName
		
		pushd "$parentPath"
			
			set +f
			for entry in *
			do
				set -f
				if [ ! -e "$entry" ]; then
					continue
				fi
				if [ -L "$entry" ]; then
					continue
				fi
				if [ -d "$entry" ]; then
					_swaddle_build_package_deb_createControlMd5sums_recurse "$entry" "$relativePath"/"$entry"
					continue
				fi
				if [ -f "$entry" ]; then
					local digest="$(swaddle_digest md5 "$entry")"
					if [ -z "$relativePath" ]; then
						printf '%s  %s\n' "$digest" "$entry"
					else
						printf '%s  %s\n' "$digest" "$relativePath"/"$entry"
					fi
					
					size="$(stat -c '%s' "$entry")"
					_swaddle_build_package_deb_installedSizeInBytes=$((_swaddle_build_package_deb_installedSizeInBytes+size))
				fi
			done
			set -f
			
		popd
	}
	
	_swaddle_build_package_deb_installedSizeInBytes=0
	local size
	
	_swaddle_build_package_deb_createControlMd5sums_recurse "$_swaddle_build_package_root" '' >"$_swaddle_build_package_deb_controlFolderPath"/md5sums
}

core_dependency_requires '*' cat
core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlScripts
swaddle_build_package_deb_createControlScripts()
{
	_swaddle_build_package_deb_createControlScript()
	{
		local scriptKind="$1"
		local scriptTypePath="$_swaddle_build_sourcePath"/"$_swaddle_build_package_kind"/scripts/"$scriptKind"
	
		if ! core_path_isReadableAndSearchableFolderPath "$scriptTypePath"; then
			return 0
		fi
	
		set +f
		set -- "$scriptTypePath"/*
		set -f
		if [ ! -e "$1" ]; then
			return 0
		fi
		
		{
			printf '#!/bin/sh\n'
	
			# https://fedoraproject.org/wiki/How_to_create_an_RPM_package
			# $1 is passed to this script as a number
			# For pre and post, 1 for first install, 2+ for upgrade
			# For preun and postun, 0 is when last version is removed (1 is for upgrade)
			# For verify, not used
			# For pretrans and posttrans, always 0
	
			printf '%s\n' "%${rpmScriptType}"
			local scriptFile
			for scriptFile in "$@"
			do
				if core_path_isReadableNonEmptyFilePath "$scriptFile"; then
					cat "$scriptFile"
					printf '\n'
				fi
			done
		} >"$_swaddle_build_package_deb_controlFolderPath"/"$scriptKind"
		chmod +x "$_swaddle_build_package_deb_controlFolderPath"/"$scriptKind"
	}
	
	_swaddle_build_package_deb_createControlScript preinst
	_swaddle_build_package_deb_createControlScript postinst
	_swaddle_build_package_deb_createControlScript prerm
	_swaddle_build_package_deb_createControlScript postrm
}

core_dependency_requires '*' cat
core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlFile
swaddle_build_package_deb_createControlFile()
{
	local controlFile="$_swaddle_build_package_deb_controlFolderPath"/control
	
	{
		cat <<-EOF
			Package: ${_swaddle_build_swaddleName}
			Version: ${_swaddle_build_package_deb_debianVersion}
			Source: ${_swaddle_build_swaddleName}
			Architecture: ${_swaddle_build_package_translatedArchitecture}
			Maintainer: $(swaddle_configure_maintainer)
			Installed-Size: $(_swaddle_build_package_deb_installedSize)
			Essential: $(configure_getValue swaddle_deb essential)
			Build-Essential: $(configure_getValue swaddle_deb build_essential)
		EOF
		_swaddle_build_package_deb_commaSeparatedControlField Uploaders uploaders
		_swaddle_build_package_deb_commaSeparatedControlField Depends depends
		_swaddle_build_package_deb_commaSeparatedControlField Pre-Depends pre_depends
		_swaddle_build_package_deb_commaSeparatedControlField Recommends recommends
		_swaddle_build_package_deb_commaSeparatedControlField Suggests suggests
		_swaddle_build_package_deb_commaSeparatedControlField Breaks breaks
		_swaddle_build_package_deb_commaSeparatedControlField Conflicts conflicts
		_swaddle_build_package_deb_commaSeparatedControlField Enhances enhances
		_swaddle_build_package_deb_commaSeparatedControlField Task tasks
		_swaddle_build_package_deb_commaSeparatedControlField Task tags
		cat <<-EOF
			Section: $(configure_getValue swaddle_deb section)
			Priority: $(configure_getValue swaddle_deb priority)
			Homepage: $(configure_getValue swaddle url)
			Bugs: $(swaddle_configure_bugsUrl)
			Origin: $(configure_getValue swaddle vendor)
			Supported: $(configure_getValue swaddle_deb supported)
		EOF
		_swaddle_build_package_deb_commaSeparatedControlField Built-Using built_using
		if [ "$_swaddle_build_package_translatedArchitecture" != 'all' ]; then
			_swaddle_build_package_deb_commaSeparatedControlField Multi-Arch "$(configure_getValue swaddle_deb multiarch)"
		fi
		_swaddle_build_package_deb_extraControlFields
		_swaddle_build_package_deb_description
		
	} >"$controlFile"
}

core_dependency_requires '*' tar rm
core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_tarControl
swaddle_build_package_deb_tarControl()
{
	local filePath
	set +f
	for filePath in "$_swaddle_build_package_deb_controlFolderPath"/*
	do
		set -f
		
		if [ ! -e "$filePath" ]; then
			continue
		fi
		
		if [ -x "$filePath" ]; then
			chmod 0755 "$filePath"
		else
			chmod 0644 "$filePath"
		fi
		
		swaddle_touch_setMtimeAndAtime "$filePath"
		
	done
	set -f
	
	local tarball="$_swaddle_build_package_temporaryFolderPath"/control.tar
	tar \
		--create \
		--file "$tarball" \
		--no-acls \
		--owner 0 \
		--group 0 \
		--numeric-owner \
		--directory "$_swaddle_build_package_deb_controlFolderPath" \
		.
	
	swaddle_compress_xz "$tarball"
	rm "$tarball"
	
	_swaddle_build_package_deb_controlTarballFileName='control.tar.xz'
	_swaddle_build_package_deb_permissionsForAr "$_swaddle_build_package_temporaryFolderPath"/"$_swaddle_build_package_deb_controlTarballFileName"
}

core_snippet_embed raw swaddle_deb_copyright_template
core_dependency_requires '*' cp
swaddle_build_package_deb_createDataCopyright()
{
	local copyrightFile="$_swaddle_build_package_root"/usr/share/doc/"$_swaddle_build_swaddleName"/copyright
	if [ -e "$copyrightFile" ]; then
		return 0
	fi
	
	local temporaryCopyrightFile
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	temporaryCopyrightFile="$temporaryCopyrightFile"

	core_snippet_retrieveAndSourceAsHereDoc swaddle_deb_copyright_template >"$temporaryCopyrightFile"
	swaddle_simulateroot_execute cp -p "$temporaryCopyrightFile" "$copyrightFile"
	swaddle_touch_setMtimeAndAtime "$temporaryCopyrightFile"
	swaddle_simulateroot_execute chown 0:0 "$copyrightFile"
}

core_dependency_requires '*' tar rm
core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_tarData
swaddle_build_package_deb_tarData()
{
	local options
	local options_initialised

	local tarball="$_swaddle_build_package_temporaryFolderPath"/data.tar

	swaddle_simulateroot_execute tar \
		--create \
		--file "$tarball" \
		--no-acls \
		--numeric-owner \
		--directory "$_swaddle_build_package_root" \
		.

	local compression="$(configure_getValue swaddle_deb compression)"
	if [ "$compression" = 'none' ]; then
		_swaddle_build_package_deb_dataTarballFileName='data.tar'
	else
		swaddle_compress_$compression "$tarball"
		_swaddle_build_package_deb_dataTarballFileName="data.tar$(swaddle_compress_extension "$compression")"
		swaddle_simulateroot_ownAsExecutingUser "$tarball"
		rm "$tarball"
	fi

	_swaddle_build_package_deb_permissionsForAr "$_swaddle_build_package_temporaryFolderPath"/"$_swaddle_build_package_deb_dataTarballFileName"
}

core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createDebianBinary
swaddle_build_package_deb_createDebianBinary()
{
	local _swaddle_build_package_deb_debianBinaryFilePath="$_swaddle_build_package_temporaryFolderPath"/debian-binary
	printf '2.0\n' > "$_swaddle_build_package_deb_debianBinaryFilePath"
	
	_swaddle_build_package_deb_permissionsForAr "$_swaddle_build_package_deb_debianBinaryFilePath"
}

# ar records uid, gid, mode and timestamp
core_dependency_requires '*' chmod chown
_swaddle_build_package_deb_permissionsForAr()
{
	local filePath="$1"
	
	swaddle_touch_setMtimeAndAtime "$filePath"
	chmod 0644 "$filePath"
	swaddle_simulateroot_execute chown 0:0 "$filePath"
}

core_usesIn swaddle webserverFiles
core_dependency_requires '*' mkdir ar
core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createDeb
swaddle_build_package_deb_createDeb()
{
	local poolDebFile="${_swaddle_build_swaddleName}_${_swaddle_build_package_deb_debianVersion}_${_swaddle_build_package_translatedArchitecture}".deb
	local poolSource="$_swaddle_build_swaddleName"
	local poolAZ
	_swaddle_build_package_deb_poolAZ
	local poolComponent="$(configure_getValue swaddle_deb component)"
	
	local parentPath="$_swaddle_repository_parentPath"/pool/"$poolComponent"/"$poolAZ"/"$poolSource"
	mkdir -m 0755 -p "$parentPath"
	
	local debFilePath="$parentPath"/"$poolDebFile"
	
	pushd "$_swaddle_build_package_temporaryFolderPath"
	
		swaddle_simulateroot_execute ar -q -c "$debFilePath" \
			debian-binary \
			"$_swaddle_build_package_deb_controlTarballFileName" \
			"$_swaddle_build_package_deb_dataTarballFileName"

		swaddle_simulateroot_ownAsExecutingUser "$debFilePath"
		
		rm -rf \
			debian-binary \
			"$_swaddle_build_package_deb_controlTarballFileName" \
			"$_swaddle_build_package_deb_dataTarballFileName"
	popd
	
	# Oddly, debian packages can actually be compressed further (this is because they are 'ar' archives)
	
	swaddle_touch_setMtimeAndAtime "$debFilePath"
	
	swaddle_publishers_publish "${_swaddle_build_swaddleName} package (Debian)" "$debFilePath" 'application/vnd.debian.binary-package'
}

_swaddle_build_package_deb_poolAZ()
{
	case "$poolSource" in
		
		lib*)
			local withoutLib="$(core_variable_allButFirstN "$poolSource" 3)"
			poolAZ="lib$(core_variable_firstCharacter "$poolSource")"
		;;
		
		*)
			poolAZ="$(core_variable_firstCharacter "$poolSource")"
		;;
		
	esac
	
}

_swaddle_build_package_deb_installedSize()
{
	local modulus=$((_swaddle_build_package_deb_installedSizeInBytes%1024))
	local divided=$((_swaddle_build_package_deb_installedSizeInBytes/1024))
	if [ $modulus -eq 0 ]; then
		printf '%s' $divided
	else
		printf '%s' $((divided+1))
	fi
}

_swaddle_build_package_deb_commaSeparatedControlField()
{
	local controlFieldName="$1"
	local configurationSettingName="$2"

	local namespace='swaddle_deb'
	local configurationSettingValue
	_configure_configurationSettingValue "$namespace" "$configurationSettingName"
	
	if ! core_variable_array_isEmpty "$configurationSettingValue"; then
		return
	fi
	
	local isAfterFirst=0
	_swaddle_build_package_deb_commaSeparatedControlField_callback()
	{
		local controlFieldValuePiece="$core_variable_array_element"
		if [ $isAfterFirst -eq 1 ]; then
			printf '%s' ','
		else
			printf '%s:' "$controlFieldName"
			isAfterFirst=1
		fi
		printf ' %s' "$controlFieldValuePiece"
	}
	
	if [ $isAfterFirst -eq 1 ]; then
		printf '\n'
	fi
	
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_deb_commaSeparatedControlField_callback
}

_swaddle_build_package_deb_extraControlFields()
{
	local namespace='swaddle_deb'
	local configurationSettingValue
	_configure_configurationSettingValue "$namespace" 'extra_control_fields'
	
	_swaddle_build_package_deb_extraControlFields_callback()
	{
		local controlFieldNameAndValueColonSpaceSeparated="$core_variable_array_element"
		printf '%s\n' "$controlFieldNameAndValueColonSpaceSeparated"
	}
	
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_deb_extraControlFields_callback
}

core_dependency_requires '*' sed
_swaddle_build_package_deb_description()
{
	local isFirst=1
	local line
	configure_getValue swaddle_package description | sed -e 's/^\w*$/\./g' | while IFS='' read -r line
	do
		if [ $isFirst -eq 1 ]; then
			printf 'Description:'
			isFirst=0
		fi
		printf ' %s\n' "$line"
	done
	if [ -n "$line" ]; then
		if [ $isFirst -eq 1 ]; then
			printf 'Description:'
			isFirst=0
		fi
		printf ' %s\n' "$line"
	fi
}
