swaddle_build_package_deb_registerConfiguration()
{
	#configure_register Array NotEmpty swaddle_deb build_depends
	configure_register Array NotEmpty swaddle_deb pre_depends
	configure_register Array NotEmpty swaddle_deb depends
	configure_register Array NotEmpty swaddle_deb provides
	configure_register Array NotEmpty swaddle_deb conflicts
	configure_register Array NotEmpty swaddle_deb replaces
	
	#http://www.debian.org/doc/debian-policy/ch-sharedlibs.html#s-shlibs
	configure_register Array NotEmpty swaddle_deb shlibs
	
	configure_register Value Compression swaddle_deb compression 'xz'
	
	configure_register Value NotEmpty swaddle_deb changelog
}

swaddle_build_package_deb()
{
	core_functions_execute _swaddle_build_package_deb_functions "$@"
}

core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createDebianBinary
swaddle_build_package_deb_createDebianBinary()
{
	local _swaddle_build_package_deb_debianBinaryFilePath="$_swaddle_build_package_temporaryFolderPath"/debian-binary
	printf '2.0\n' > "$_swaddle_build_package_deb_debianBinaryFilePath"
	local _swaddle_build_package_deb_workspaceFolderPath="$_swaddle_build_package_temporaryFolderPath"/workspace
	mkdir -m 0755 -p "$"
}

core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlFolder
swaddle_build_package_deb_createControlFolder()
{
	# needs to be tar'd up with NO parent folder
	local _swaddle_build_package_deb_controlFolderPath="$_swaddle_build_package_temporaryFolderPath"/control
	mkdir -m 0755 -p "$_swaddle_build_package_deb_controlFolderPath"
}


# conffiles
# control
# preinst postinst prerm postrm (shell script, chmod +x)



core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlConffiles
swaddle_build_package_deb_createControlConffiles()
{
	_swaddle_build_package_deb_createControlConffiles_recurse()
	{
		local parentPath="$1"
		local relativePath="$2"
		local entry

		local digest
		local uselessFileName
		
		pushd "$parentPath"
			
			set +f
			for entry in *
			do
				set -f
				if [ ! -e "$entry" ]; then
					continue
				fi
				
				if core_variable_endsWith "$(core_compatibility_basename "$objectPath")" '.swaddle-settings'; then
					core_exitError $core_commandLine_exitCode_CONFIG "swaddle-settings without matching parent '$entry'"
				fi
				
				if [ -L "$entry" ]; then
					continue
				fi
				
				if [ -d "$entry" ]; then
					_swaddle_build_package_deb_createControlConffiles_recurse "$entry" "$relativePath"/"$entry"
					continue
				fi
				
				if core_path_isReadableNonEmptyFilePath "$entry"; then
					
					
					md5sum "$entry" | IFS=' ' read -r digest uselessFileName
					if [ -z "$relativePath" ]; then
						printf '%s  %s\n' "$digest" "$entry"
					else
						printf '%s  %s\n' "$digest" "$relativePath"/"$entry"
					fi
				fi
			done
			set -f
			
		popd
	}
	
	_swaddle_build_package_deb_createControlConffiles_recurse "$_swaddle_build_package_root" '/' >"$_swaddle_build_package_deb_controlFolderPath"/conffiles
}

core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlShlibs
swaddle_build_package_deb_createControlShlibs()
{
	local namespace='swaddle_deb'
	local configurationSettingValue
	_configure_configurationSettingValue "$namespace" shlibs
	
	local shlibsFilePath="$_swaddle_build_package_deb_controlFolderPath"/shlibs
	printf '' >"$shlibsFilePath"
	
	_swaddle_build_package_deb_createControlShlibs_callback()
	{
		# eg 'libapt-private 0.0 apt'
		local dependency="$core_variable_array_element"
		printf '%s\n' "$dependency"
	}
	
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_deb_createControlShlibs_callback >"$_swaddle_build_package_deb_controlFolderPath"/shlibs
}

core_dependency_requires '*' md5sum
core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlMd5sums
swaddle_build_package_deb_createControlMd5sums()
{
	_swaddle_build_package_deb_createControlMd5sums_recurse()
	{
		local parentPath="$1"
		local relativePath="$2"
		local entry

		local digest
		local uselessFileName
		
		pushd "$parentPath"
			
			set +f
			for entry in *
			do
				set -f
				if [ ! -e "$entry" ]; then
					continue
				fi
				if [ -L "$entry" ]; then
					continue
				fi
				if [ -d "$entry" ]; then
					_swaddle_build_package_deb_createControlMd5sums_recurse "$entry" "$relativePath"/"$entry"
					continue
				fi
				if [ -f "$entry" ]; then
					md5sum "$entry" | IFS=' ' read -r digest uselessFileName
					if [ -z "$relativePath" ]; then
						printf '%s  %s\n' "$digest" "$entry"
					else
						printf '%s  %s\n' "$digest" "$relativePath"/"$entry"
					fi
				fi
			done
			set -f
			
		popd
	}
	
	_swaddle_build_package_deb_createControlMd5sums_recurse "$_swaddle_build_package_root" '' >"$_swaddle_build_package_deb_controlFolderPath"/md5sums
}

core_dependency_requires '*' cat
core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlScripts
swaddle_build_package_deb_createControlScripts()
{
	_swaddle_build_package_deb_createControlScript()
	{
		local scriptKind="$1"
		local scriptTypePath="$_swaddle_build_packagesPath"/"$_swaddle_build_package_kind"/scripts/"$scriptKind"
	
		if ! core_path_isReadableAndSearchableFolderPath "$scriptTypePath"; then
			return 0
		fi
	
		set +f
		set -- "$scriptTypePath"/*
		set -f
		if [ ! -e "$1" ]; then
			return 0
		fi
		
		{
			printf '#!/bin/sh\n'
	
			# https://fedoraproject.org/wiki/How_to_create_an_RPM_package
			# $1 is passed to this script as a number
			# For pre and post, 1 for first install, 2+ for upgrade
			# For preun and postun, 0 is when last version is removed (1 is for upgrade)
			# For verify, not used
			# For pretrans and posttrans, always 0
	
			printf '%s\n' "%${rpmScriptType}"
			local scriptFile
			for scriptFile in "$@"
			do
				if core_path_isReadableNonEmptyFilePath "$scriptFile"; then
					cat "$scriptFile"
					printf '\n'
				fi
			done
		} >"$_swaddle_build_package_deb_controlFolderPath"/"$scriptKind"
		chmod +x "$_swaddle_build_package_deb_controlFolderPath"/"$scriptKind"
	}
	
	_swaddle_build_package_deb_createControlScript preinst
	_swaddle_build_package_deb_createControlScript postinst
	_swaddle_build_package_deb_createControlScript prerm
	_swaddle_build_package_deb_createControlScript postrm
}

core_functions_register _swaddle_build_package_deb_functions swaddle_build_package_deb_createControlFile
swaddle_build_package_deb_createControlFile()
{
	# debian-binary
	
	# Contents of control.tar.gz
	cat >/dev/null <<-EOF
	
	EOF
	
	# Contents of data.tar.gz
	
	
	cat <<-EOF
		Source: ${_swaddle_build_swaddleName}
		Section:
		Priority
		Maintainer:
		Uploaders: ARRAY
		Homepage:
		$(_swaddle_build_package_deb_dependencies 'Build-Depends' build_depends)
		Standards-Version: 3.8.4.0
		XBCS-Component: multiverse
	
		Package: ${_swaddle_build_swaddleName}
		Architecture: $(_swaddle_build_package_deb_architecture)
		$(_swaddle_build_package_deb_dependencies 'Pre-Depends' pre_depends)
		$(_swaddle_build_package_deb_dependencies 'Depends' depends)
		$(_swaddle_build_package_deb_dependencies 'Provides' provides)
		$(_swaddle_build_package_deb_dependencies 'Replaces' replaces)
		$(_swaddle_build_package_deb_dependencies 'Conflicts' conflicts)
	EOF
	
	
}

_swaddle_build_package_deb_architecture()
{
	local architecture="$(configure_getConfigurationSetting swaddle architecture)"
	case "$architecture" in
		
		all|noarch)
			printf '%s' 'all'
		;;
		
		amd64|x86_64)
			printf '%s' 'amd64'
		;;
		
		*)
			printf '%s' "$architecture"
		;;
		
	esac
}

_swaddle_build_package_deb_dependencies()
{
	local dependencyName="$1"
	local configurationSettingName="$2"

	local namespace='swaddle_deb'
	local configurationSettingValue
	_configure_configurationSettingValue "$namespace" "$configurationSettingName"
	
	if ! core_variable_array_isEmpty "$configurationSettingValue"; then
		return
	fi
	
	local isAfterFirst=0
	_swaddle_build_package_deb_dependencies_callback()
	{
		local dependency="$core_variable_array_element"
		if [ $isAfterFirst -eq 1 ]; then
			printf '%s' ','
		else
			printf '%s:' "$dependencyName"
			isAfterFirst=1
		fi
		printf ' %s' "$dependency"
	}
	printf '\n'
	# ${misc:Depends}, ${shlibs:Depends}
	
	core_variable_array_iterate "$configurationSettingValue" _swaddle_build_package_deb_dependencies_callback
}
