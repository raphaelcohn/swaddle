# This file is part of raphaelcohn swaddle. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT. No part of raphaelcohn swaddle, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2014-2015 The developers of raphaelcohn swaddle. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT.


core_usesIn core functions variable variable/array
core_usesIn swaddle configure repository build/package

swaddle_build_all()
{
	local swaddle="$core_variable_array_element"
	core_functions_execute _swaddle_build_functions "$@"
}

core_functions_register _swaddle_build_functions swaddle_build_setSwaddleName
swaddle_build_setSwaddleName()
{
	_swaddle_build_swaddleName="$(core_compatibility_basename "$swaddle")"
}

core_functions_register _swaddle_build_functions swaddle_build_setSourcePath
swaddle_build_setSourcePath()
{
	_swaddle_build_sourcePath="$swaddle_swaddlingPath"/"$swaddle"
}

core_dependency_requires '*' rm sudo mkdir
core_functions_register _swaddle_build_functions swaddle_build_createTemporaryFolder
swaddle_build_createTemporaryFolder()
{
	_swaddle_build_temporaryFolderPath="$_swaddle_temporaryFolderPath"/swaddle/"$_swaddle_build_swaddleName"
	rm -rf "$_swaddle_build_temporaryFolderPath" 2>/dev/null || true
	if [ -d "$_swaddle_build_temporaryFolderPath" ]; then
		sudo -p "Please enter the password for %p to forcibly remove '$_swaddle_build_temporaryFolderPath': " rm -rf "$_swaddle_build_temporaryFolderPath" 2>/dev/null || true
	fi
	mkdir -m 0700 -p "$_swaddle_build_temporaryFolderPath"
}

core_functions_register _swaddle_build_functions swaddle_build_packages
swaddle_build_packages()
{
	local count=0
	local _swaddle_build_package_kind
	for _swaddle_build_package_kind in tar zip 7z file rar deb rpm
	do
		if ! core_path_isReadableAndSearchableFolderPath "$_swaddle_build_sourcePath"/"$_swaddle_build_package_kind"; then
			continue
		fi
		
		swaddle_build_packagesPackageKindToRepositoryPath
		swaddle_build_packagesByArchitecture
				
		count=$((count+1))
	done
	
	if [ $count -eq 0 ]; then
		core_message WARN "No package kinds (tar, deb, rpm, zip, 7z) in '$_swaddle_build_sourcePath' for swaddle '$_swaddle_build_swaddleName"
	fi
}

swaddle_build_packagesPackageKindToRepositoryPath()
{
	local repositoryName="$(configure_getValue swaddle repository_name)"
	local repositoryKind
	case "$_swaddle_build_package_kind" in
		
		deb)
			repositoryKind=apt
		;;
		
		rpm)
			repositoryKind=yum
		;;
		
		*)
			repositoryKind=files
		;;
		
	esac
	
	swaddle_repository_setParentPath
}

swaddle_build_packagesByArchitecture()
{
	local architecturesToBuild
	local architecturesToBuild_initialised
	core_variable_array_initialise architecturesToBuild

	local pathContainingPackageFiles
	local weAreBuildingTheAllArchitecture=0
	local weAreBuildingSpecificArchitecturesOtherThanAll=0
	for pathContainingPackageFiles in "$_swaddle_build_sourcePath"/skeleton "$_swaddle_build_sourcePath"/body "$_swaddle_build_sourcePath"/"$_swaddle_build_package_kind"/body "$_swaddle_build_sourcePath"/"$_swaddle_build_package_kind"/skeleton
	do
		if ! core_path_isReadableAndSearchableFolderPath "$pathContainingPackageFiles"; then
			continue
		fi
		
		pushd "$pathContainingPackageFiles"
		
			set +f
			for potentialArchitecture in *
			do
				set -f
				if [ ! -e "$potentialArchitecture" ]; then
					# Legitimate, but rather odd
					continue
				fi
				
				case "$potentialArchitecture" in
					
					any)
						:
					;;
					
					all)
						core_variable_array_appendUniquely architecturesToBuild all
						weAreBuildingTheAllArchitecture=1
					;;
					
					*)
						core_variable_array_appendUniquely architecturesToBuild "$potentialArchitecture"
						weAreBuildingSpecificArchitecturesOtherThanAll=1
					;;
					
				esac
				
			done
			set -f
		popd
		
	done

	if [ $weAreBuildingSpecificArchitecturesOtherThanAll -eq 1 ]; then
		if [ $weAreBuildingTheAllArchitecture -eq 1 ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "We are building specific architectures '$(core_variable_array_string architecturesToBuild ' ')'; it is not logical to also build the 'all' architecture"
		fi
	fi
	
	# Default to building 'all'
	if [ $weAreBuildingSpecificArchitecturesOtherThanAll -eq 0 ]; then
		if [ $weAreBuildingTheAllArchitecture -eq 0 ]; then
			core_variable_array_append architecturesToBuild 'all'
			weAreBuildingTheAllArchitecture=1
		fi
	fi
	
	_swaddle_build_packagesByArchitecture_callback()
	{
		swaddle_build_package "$core_variable_array_element"
	}
	
	core_variable_array_iterate architecturesToBuild _swaddle_build_packagesByArchitecture_callback
}
