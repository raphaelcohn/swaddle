core_usesIn swaddle compress digest

swaddle_webserverFiles_registerConfiguration()
{
	configure_register Array WebserverFilesDigest swaddle_web digests
	configure_register Value Boolean swaddle_web nginx 'no'
	configure_register Value NotEmpty swaddle_web pandoc_format 'html5'
	configure_register Value Any swaddle_web pandoc_template ''
	configure_register Value NotEmpty swaddle_web index_name 'index.html'
}

swaddle_webserverFiles_createFrom()
{
	local filePath="$1"
	local shouldCompress="$2"
	
	swaddle_webserverFiles_index "$filePath"
	
	swaddle_webserverFiles_contentMd5ForNginx "$filePath"
	
	if core_variable_isTrue "$shouldCompress"; then
		swaddle_webserverFiles_compressForNginx "$filePath"
	fi
}

swaddle_webserverFiles_contentMd5ForNginx()
{
	local filePath="$1"
	
	if core_variable_isTrue "$(configure_getConfigurationSetting swaddle_web nginx)"; then
		# The purpose of this is to allow the 'Content-MD5' HTTP header to be served
		swaddle_digest_file md5 "$filePath"
	fi
}

swaddle_webserverFiles_compressForNginx()
{
	local filePath="$1"
	
	if core_variable_isTrue "$(configure_getConfigurationSetting swaddle_web nginx)"; then
		swaddle_compress_gzip "$filePath"
		swaddle_webserverFiles_contentMd5ForNginx "$filePath".gz
	fi
}

core_snippet_embed raw css
core_dependency_requires '*' pandoc rm mv cat
swaddle_webserverFiles_createIndices()
{
	local folderPath="$1"
	local parentFolderPath="$2"
	
	local inputFilePath="$folderPath"/index.md
	
	local hasChildren=no
	pushd "$folderPath"

		_swaddle_webserverFiles_index_createInitialMarkdown
		
		set +f
		local childFolder
		for childFolder in *
		do
			set -f
			if [ -d "$childFolder" ]; then
				hasChildren=yes
				if [ ! -L "$childFolder" ]; then
					if [ -z "$parentFolderPath" ]; then
						swaddle_webserverFiles_createIndices "$childFolder" "$childFolder"
					else
						swaddle_webserverFiles_createIndices "$childFolder" "$parentFolderPath / $childFolder"
					fi
				fi
				swaddle_webserverFiles_index "$childFolder" '-'
			fi
		done
		set -f
		
	popd
	
	cat "$inputFilePath".tmp >>"$inputFilePath"
	rm "$inputFilePath".tmp
	
	{
		printf '|[`Parent Directory â†©`](../ "Move up to the parent directory")|\n'
	}>>"$inputFilePath"
	
	local toFormat="$(configure_getConfigurationSetting swaddle_web pandoc_format)"
	local template="$(configure_getConfigurationSetting swaddle_web pandoc_template)"
	local destinationFileName="$(configure_getConfigurationSetting swaddle_web index_name)"
	local outputFilePath="$folderPath"/"$destinationFileName"
	
	local options
	local options_initialised
	
	core_variable_array_initialise options
	
	core_variable_array_append options \
		--from=markdown \
		--to="$toFormat" \
		-o "$outputFilePath".tmp
	
	if [ -n "$template" ]; then
		core_variable_array_append options \
			--template="$template"
	else
		local TMP_FILE
		core_temporaryFiles_newFileToRemoveOnExit
		core_snippet_retrieve css yes "$TMP_FILE"
		mv "$TMP_FILE" "$TMP_FILE".css
		core_variable_array_append options --standalone --self-contained --css "$TMP_FILE".css
	fi
	
	core_variable_array_append options "$inputFilePath"
	
	core_variable_array_passToFunctionAsArguments options pandoc
	
	rm "$inputFilePath"
	mv "$outputFilePath".tmp "$outputFilePath"
	swaddle_touch_setMtimeAndAtime "$outputFilePath"
	swaddle_webserverFiles_compressForNginx "$outputFilePath"
}

core_dependency_requires '*' date stat cat
swaddle_webserverFiles_index()
{
	local filePath="$1"
	local dirname="$(core_compatibility_dirname "$filePath")"
	local indexFilePath="$dirname"/index.md.tmp
	
	local fileName="$(core_compatibility_basename "$filePath")"

	local title="$fileName"
	if [ -d "$filePath" ]; then
		local url="${fileName}"/
		fileName="${fileName}"/
	else
		url="$fileName"
	fi
	
	local timestamp="$(stat -c '%Y' "$filePath")"
	local date="$(date -u -d @$timestamp +'%a, %d %h %Y %H:%M:%S %Z')"
	if [ $# -eq 2 ]; then
		local indexName="$(configure_getConfigurationSetting swaddle_web index_name)"
		local statFilePath="$filePath"/"$indexName"
		local signatureFilePath="$fileName"/"$indexName".asc
	else
		local statFilePath="$filePath"
		local signatureFilePath="$filePath".asc
	fi
	local size="$(stat -c '%s' "$statFilePath")"
	
	{
		printf '|[`%s`](%s "%s")|`%s`|`%s`|' "$fileName" "$url" "$title" "$date" "$size"
		
		if core_variable_isTrue "$(swaddle_configure_sign)"; then
			swaddle_digest_signFile "$statFilePath"
			printf '[`Signature`](%s "%s")|' "$signatureFilePath" "GPG Signature using signing key $(swaddle_configure_signer)"
		else
			printf '%s|' '-'
		fi
	
		# Defaults
		set -- 'sha1' 'sha256'
		
		_swaddle_webserverFiles_index_digestColumnsCallback()
		{
			printf '`'
			swaddle_digest "$core_variable_array_element" "$statFilePath"
			printf '`|'
		}
		configure_iterateOverArrayWithDefaultsIfEmpty 'swaddle_web' 'digests' _swaddle_webserverFiles_index_digestColumnsCallback "$@"
		printf '\n'
		
	} >>"$indexFilePath"
}

core_dependency_requires '*' sed
_swaddle_webserverFiles_index_createInitialMarkdown()
{
	local folderName="$(core_compatibility_basename "$(pwd)")"
	local timestamp="$(swaddle_configure_timestamp)"
	local releaseDate="$(date -u -d @$timestamp +'%a, %d %h %Y %H:%M:%S %Z')"
	
	# Defaults
	set -- 'sha1' 'sha256'

	_swaddle_webserverFiles_index_createInitialMarkdown_digestColumnNamesCallback()
	{
		swaddle_digest_name "$core_variable_array_element"
		printf '|'
	}
	
	_swaddle_webserverFiles_index_createInitialMarkdown_digestColumnAlignmentCallback()
	{
		local width=${#core_variable_array_element}
		printf ':'
		# yes, this is correct
		local index=1
		while [ $index -lt $width ]
		do
			printf '-'
			index=$((index+1))
		done
		printf '|'
	}

	if core_variable_isTrue "$(swaddle_configure_sign)"; then
	
		local keyserver="$(configure_getConfigurationSetting swaddle keyserver)"
		if [ -z "$keyserver" ]; then
			local signatureMarkdown="Signed using the key \`$(swaddle_configure_signer)\` with fingerprint \`$(swaddle_gpg_exportSigningKeyFingerprint)\`."
		else
			local keyserverWithHttpProtocol="$(printf '%s' "$keyserver" | sed -e s/^hkp/http/g)"
			local signatureMarkdown="Signed using the key \`$(swaddle_configure_signer)\` with fingerprint [\`$(swaddle_gpg_exportSigningKeyFingerprint)\`]($keyserverWithHttpProtocol/pks/lookup?op=get&search=0x$(swaddle_gpg_exportSigningKeyFingerprint) \"Retrieve key '$(swaddle_gpg_exportSigningKeyFingerprint)' from keyserver\")."
		fi
	else
		local signatureMarkdown="Signatures are unavailable."
	fi
	
	local indexPath="/ $parentFolderPath /"
	if [ "$indexPath" = '/  /' ]; then
		indexPath='/'
	fi
	
	{
		printf '%s' "% Index of ${indexPath}
% $(swaddle_configure_maintainer)
% ${releaseDate}
Table:This repository was created using [swaddle](https://github.com/raphaelcohn/swaddle \"swaddle, the standalone generator, from source control to complete archive\"), the one tool you need to create DEBs, RPMs, tarballs, apt and yum repositories from source control on Linux and Mac OS X, using [fatten](https://github.com/shellfire-dev/fatten \"Fattening allows you to develop modular shell scripts then bundle them up into one multi-platform copy-and-run script\") and [shellfire](https://github.com/shellfire-dev \"Shellfire provides modular, re-usable shell script libraries which are battle-tested for platform-gotchas with bash, pdksh, AIX sh, dash, Busybox and others.\").

|Name|Last Modified|Size (bytes)|Signature^[${signatureMarkdown}]|"
		
		configure_iterateOverArrayWithDefaultsIfEmpty 'swaddle_web' 'digests' _swaddle_webserverFiles_index_createInitialMarkdown_digestColumnNamesCallback "$@"
		printf '\n|:---|:------------|---:|:--------|'
		
		configure_iterateOverArrayWithDefaultsIfEmpty 'swaddle_web' 'digests' _swaddle_webserverFiles_index_createInitialMarkdown_digestColumnAlignmentCallback "$@"
		printf '\n'
		
	} >index.md
}
