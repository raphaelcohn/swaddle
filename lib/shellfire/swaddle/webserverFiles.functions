# This file is part of swaddle. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT. No part of swaddle, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright © 2014-2015 The developers of swaddle. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/swaddle/master/COPYRIGHT.


core_usesIn swaddle compress digest date

swaddle_webserverFiles_registerConfiguration()
{
	configure_register Array WebserverFilesDigest swaddle_web digests
	configure_register Array Any swaddle_web pandoc_options
	configure_register Value NotEmpty swaddle_web index_name 'index.html'
	configure_register Value Boolean swaddle_web use_index_name_in_directory_links yes
}

core_snippet_embed raw css
swaddle_webserverFiles_create()
{
	local useIndexNameInDirectoryLinks="$(configure_getValue swaddle_web use_index_name_in_directory_links)"
	local sign="$(swaddle_configure_sign)"
	local maintainer="$(swaddle_configure_maintainer)"
	local indexFileName="$(configure_getValue swaddle_web index_name)"
	local inputFileName=index.md
	
	if [ "$inputFileName" = "$indexFileName" ]; then
		inputFileName="$inputFileName".tmp
	fi
	
	local releaseDate
	swaddle_webserverFiles_releaseDate
	
	local parentUrlMarkdown
	swaddle_webserverFiles_parentUrlMarkdown
	
	local signatureMarkdown
	swaddle_webserverFiles_signatureMarkdown
	
	local cssToEmbedFilePath
	swaddle_webserverFiles_extractDefaultCss
	
	# If serving up GitHub Pages, and there is no index.{html,markdown,md,textile}, then the user gets an unhelpful 404
	# However, many GitHub Pages uses will use Jekyll later on (or beforehand), and we need to integrate with them (and so NOT overwrite a Jekyll-derived file)
	local rootFolderPath
	if _swaddle_webserverFiles_createRootIndexHtmlIfNoneExists; then
		rootFolderPath="$swaddle_outputPath"
		set --
	else
		rootFolderPath="$_swaddle_outputDownloadPath"
		set -- "$_swaddle_downloadFolderName"
	fi
	swaddle_webserverFiles_createIndices "$rootFolderPath" "$@"
	
	# Top-level index.html is not signed otherwise
	swaddle_digest_signFile "$rootFolderPath"/"$indexFileName"
}

# This functions creates a naive index so that GitHub Pages users have a link
core_dependency_requires '*' grep
_swaddle_webserverFiles_createRootIndexHtmlIfNoneExists()
{
	# Jekyll is present (index.html index.markdown index.md index.textile are reserved)
	if [ -f "$swaddle_outputPath"/_config.yml ]; then
		return 1
	fi
	
	local indexFilePath="$swaddle_outputPath"/"$indexFileName"
	if [ ! -f "$indexFilePath" ]; then
		return 0
	fi
	
	# index.html exists. Is it ours?
	grep -q "$(_swaddle_webserverFiles_index_uniqueTextIdentifyingIndexHtmlAsOurs)" "$indexFilePath"
}

core_dependency_requires '*' rm
swaddle_webserverFiles_createIndices()
{
	local folderPath="$1"
	shift 1
	# remaining values are parentFolderName s
	
	local inputFilePath="$folderPath"/"$inputFileName"
	local indexFilePath="$folderPath"/"$indexFileName"
	
	_swaddle_webserverFiles_index_createInitialMarkdown "$@" >"$inputFilePath"
	
	pushd "$folderPath"
		
		set +f
		local child
		for child in *
		do
			set -f
			
			if [ "$child" = "$inputFileName" ]; then
				continue
			fi
			
			if [ -d "$child" ]; then
				if [ ! -L "$child" ]; then
					swaddle_webserverFiles_createIndices "$folderPath"/"$child" "$@" "$child"
				fi
				
				swaddle_webserverFiles_index "$child" "$@" >>"$inputFilePath"
				
			elif [ -f "$child" ]; then
				
				swaddle_webserverFiles_index "$child" "$@" >>"$inputFilePath"
					
			fi
			
		done
		set -f
		
	popd
	
	# Only for non-root indices
	if [ $# -gt 0 ]; then
		printf '\n%s\n' "$parentUrlMarkdown" >>"$inputFilePath"
	fi

	# Generate with pandoc
	configure_callFunctionWithDefaultsIfEmpty 'swaddle_web' 'pandoc_options' swaddle_webserverFiles_pandoc --to=html5 --standalone --self-contained --css "$cssToEmbedFilePath"
	
	rm "$inputFilePath"
	swaddle_touch_setMtimeAndAtime "$indexFilePath"
}

core_dependency_requires '*' stat
swaddle_webserverFiles_index()
{
	local filePath="$1"
	shift 1
	# remaining values are parentFolderName s
	
	local fileName="$(core_compatibility_basename "$filePath")"
	
	if [ -d "$filePath" ]; then
		local statFilePath="$filePath"/"$indexFileName"
	else
		local statFilePath="$filePath"
	fi
	
	if core_variable_endsWith "$statFilePath" '.asc'; then
		return 0
	fi
	local signatureFilePath="$statFilePath".asc
	
	if [ -d "$filePath" ]; then
		local linkText="$fileName/"
		
		if core_variable_isTrue "$useIndexNameInDirectoryLinks"; then
			local url="$fileName"/"$indexFileName"
		else
			local url="$fileName"/
		fi
		
		local linkTitle="Index of /"
		local parentFolderName
		for parentFolderName in "$@" "$fileName"
		do
			linkTitle="$linkTitle $parentFolderName /"
		done
	else
		local linkText="$fileName"
		
		local url="$fileName"
		
		local linkTitle="Download file /"
		local parentFolderName
		for parentFolderName in "$@"
		do
			linkTitle="$linkTitle $parentFolderName /"
		done
		linkTitle="$linkTitle $fileName"
	fi
	
	local date="$(swaddle_date_formatTimestampAsHumanReadable "$(stat -c '%Y' "$filePath")")"
	local size="$(stat -c '%s' "$statFilePath")"
	
	
	printf '|[`%s`](%s "%s")|`%s`|`%s`|' "$linkText" "$url" "$linkTitle" "$date" "$size"
	
	if core_variable_isTrue "$sign"; then
		swaddle_digest_signFile "$statFilePath"
		printf '[`Signature`](%s "%s")|' "$signatureFilePath" "GPG Signature using signing key $(swaddle_configure_signer)"
	else
		printf '%s|' '-'
	fi
	
	_swaddle_webserverFiles_index_digestColumnsCallback()
	{
		printf '`'
		swaddle_digest "$core_variable_array_element" "$statFilePath"
		printf '`|'
	}
	swaddle_webserverFiles_iterateOverDigests _swaddle_webserverFiles_index_digestColumnsCallback
	
	printf '\n'
}

swaddle_webserverFiles_iterateOverDigests()
{
	local callback="$1"
	configure_iterateOverArrayWithDefaultsIfEmpty 'swaddle_web' 'digests' "$callback" 'sha1' 'sha256'
}

_swaddle_webserverFiles_index_uniqueTextIdentifyingIndexHtmlAsOurs()
{
	printf '%s' "swaddle, the standalone generator, from source control to complete archive"
}

_swaddle_webserverFiles_index_createInitialMarkdown()
{
	# values are parentFolderName s
	local indexPath='/'
	local parentFolderName
	local parentUrl
	local index=1
	local count=$#
	for parentFolderName in "$@"
	do
		if [ $index -eq $count ]; then
			indexPath="$indexPath $parentFolderName /"
		else
			local parentUrl=''
			local difference=$((count-index))
			while [ $difference -ne 0 ]
			do
				parentUrl="${parentUrl}../"
				difference=$((difference-1))
			done
			
			if core_variable_isTrue "$useIndexNameInDirectoryLinks"; then
				parentUrl="${parentUrl}${indexFileName}"
			fi
			
			indexPath="$indexPath [$parentFolderName]($parentUrl \"Up to $parentFolderName\") /"
		fi
		
		index=$((index+1))
	done
	
	local folderName="$(core_compatibility_basename "$(pwd)")"
	
	printf '%s' "% Index of ${indexPath}
% ${maintainer}
% ${releaseDate}
Table:This repository was created using [swaddle](https://github.com/raphaelcohn/swaddle \"$(_swaddle_webserverFiles_index_uniqueTextIdentifyingIndexHtmlAsOurs)\"), the one tool you need to create DEBs, RPMs, tarballs, apt and yum repositories from source control on Linux and Mac OS X, using [fatten](https://github.com/shellfire-dev/fatten \"Fattening allows you to develop modular shell scripts then bundle them up into an one multi-platform copy-and-run script\") and [shellfire](https://github.com/shellfire-dev/shellfire \"Shellfire provides modular, re-usable shell script libraries which are battle-tested for platform-gotchas with bash, pdksh, AIX sh, dash, Busybox and others.\").

|Name|Last Modified|Size|Signature^[${signatureMarkdown}]|"

	_swaddle_webserverFiles_index_createInitialMarkdown_digestColumnNamesCallback()
	{
		swaddle_digest_name "$core_variable_array_element"
		printf '|'
	}
	swaddle_webserverFiles_iterateOverDigests _swaddle_webserverFiles_index_createInitialMarkdown_digestColumnNamesCallback
	
	_swaddle_webserverFiles_index_createInitialMarkdown_digestColumnAlignmentCallback()
	{
		local width=${#core_variable_array_element}
		printf ':'
		# yes, this is correct
		local index=1
		while [ $index -lt $width ]
		do
			printf '-'
			index=$((index+1))
		done
		printf '|'
	}
	printf '\n|:---|:------------|---:|:--------|'
	swaddle_webserverFiles_iterateOverDigests _swaddle_webserverFiles_index_createInitialMarkdown_digestColumnAlignmentCallback
	printf '\n'
}

core_dependency_requires '*' date
swaddle_webserverFiles_releaseDate()
{
	releaseDate="$(swaddle_date_formatTimestampAsHumanReadable "$(swaddle_configure_timestamp)")"
}

swaddle_webserverFiles_parentUrlMarkdown()
{
	local parentUrl
	if core_variable_isTrue "$useIndexNameInDirectoryLinks"; then
		parentUrl="../$indexFileName"
	else
		parentUrl="../"
	fi
	parentUrlMarkdown="[\`Parent Directory ↩\`](${parentUrl} \"Move up to the parent directory\")"
}

core_dependency_requires '*' sed
swaddle_webserverFiles_signatureMarkdown()
{
	if core_variable_isTrue "$sign"; then
	
		local keyserver="$(configure_getValue swaddle keyserver)"
		if [ -z "$keyserver" ]; then
			signatureMarkdown="Signed using the key \`$(swaddle_configure_signer)\` with fingerprint \`$(swaddle_gpg_exportSigningKeyFingerprint)\`."
		else
			local keyserverWithHttpProtocol="$(printf '%s' "$keyserver" | sed -e s/^hkp/http/g)"
			signatureMarkdown="Signed using the key \`$(swaddle_configure_signer)\` with fingerprint [\`$(swaddle_gpg_exportSigningKeyFingerprint)\`]($keyserverWithHttpProtocol/pks/lookup?op=get&search=0x$(swaddle_gpg_exportSigningKeyFingerprint) \"Retrieve key '$(swaddle_gpg_exportSigningKeyFingerprint)' from keyserver\")."
		fi
	else
		signatureMarkdown="Signatures are unavailable."
	fi
}

core_dependency_requires '*' mv
swaddle_webserverFiles_extractDefaultCss()
{
	# Extract css to use if no default template
	local TMP_FILE
	core_temporaryFiles_newFileToRemoveOnExit
	core_snippet_retrieve css yes "$TMP_FILE"
	# Pandoc moans about content-type detection otherwise!
	cssToEmbedFilePath="$TMP_FILE".css
	mv "$TMP_FILE" "$cssToEmbedFilePath"
}

core_dependency_requires '*' pandoc
swaddle_webserverFiles_pandoc()
{
	pandoc --from=markdown "$@" -o "$indexFilePath" "$inputFilePath"
}
