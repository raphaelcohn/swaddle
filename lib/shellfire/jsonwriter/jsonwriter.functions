jsonwriter_object()
{
	local fieldName
	local fieldType
	
	printf '{'
	
	local isAfterFirst=0
	while [ $# -ne 0 ]
	do
		if [ $isAfterFirst -eq 1 ]; then
			printf ','
		else
			isAfterFirst=1
		fi
		
		fieldType="$1"
		
		fieldName="$2"
		jsonwriter_string "$fieldName"
		printf ':'
		shift 2
		
		case "$fieldType" in
			
			null)
				printf 'null'
			;;
			
			boolean|number|string|objectCallback|listCallback|array)
				jsonwriter_${fieldKind} "$1"
				shift 1
			;;
			
			*)
				core_exitError $core_commandLine_exitCode_SOFTWARE "Unknown fieldType '$fieldType' for fieldName '$fieldName'"
			;;
			
		esac
		
	done
	
	printf '}'
}

jsonwriter_list()
{
	local fieldType
	
	printf '['
	
	local isAfterFirst=0
	while [ $# -ne 0 ]
	do
		if [ $isAfterFirst -eq 1 ]; then
			printf ','
		else
			isAfterFirst=1
		fi
		
		fieldType="$1"
		shift 1
		
		case "$fieldType" in
			
			null)
				printf 'null'
			;;
			
			boolean|number|string|objectCallback|listCallback|array)
				jsonwriter_${fieldKind} "$1"
				shift 1
			;;
			
			*)
				core_exitError $core_commandLine_exitCode_SOFTWARE "Unknown fieldType '$fieldType'"
			;;
			
		esac
		
	done
	
	printf ']'
}

jsonwriter_objectCallback()
{
	local callback="$1"
	
	printf '{'
	
	local isAfterFirst=0
	while true
	do
		if [ $isAfterFirst -eq 1 ]; then
			printf ','
		else
			isAfterFirst=1
		fi
		
		 if $callback; then
			 break
		 fi
	done
	
	printf '}'
}

jsonwriter_listCallback()
{
	local callback="$1"
	
	printf '['
	
	local isAfterFirst=0
	while true
	do
		if [ $isAfterFirst -eq 1 ]; then
			printf ','
		else
			isAfterFirst=1
		fi
		
		 if $callback; then
			 break
		 fi
	done
	
	printf ']'
}

jsonwriter_array()
{
	local arrayType="$1"
	local arrayName="$2"
	
	printf '['
	
	case "$arrayType" in
		
		string)
			local isAfterFirst=0
			jsonwriter_array_callback()
			{
				if [ $isAfterFirst -eq 1 ]; then
					printf ','
				else
					isAfterFirst=1
				fi
				jsonwriter_string "$core_variable_array_element"
			}
		
			core_variable_array_iterate "$arrayName" jsonwriter_array_callback
		;;
		
		integer)
			core_variable_array_string "$arrayName" jsonwriter_array_callback ','
		;;
		
		boolean)
			core_variable_array_string "$arrayName" jsonwriter_array_callback ','
		;;
		
		null)
			local length="$(core_variable_array_length "$arrayName")"
			local index=0
			while [ $index -lt $length ]
			do
				if [ $index -gt 0 ]; then
					printf ','
				fi
				printf 'null'
			done
		;;
			
		*)
			core_exitError $core_commandLine_exitCode_SOFTWARE "Unsupported arrayType '$arrayType'"
		;;
		
	esac
	
	printf ']'
}

jsonwriter_integer()
{
	printf '%s' "$1"
}

jsonwriter_boolean()
{
	if core_variable_isTrue "$1"; then
		printf 'true'
	else
		printf 'false'
	fi
}

jsonwriter_null()
{
	printf 'null'
}

core_dependency_requires '*' awk
jsonwriter_string()
{
	printf '"'
	awk -v ORS='' -v FS='' -v OFS='' '
BEGIN {
	for (n = 0; n < 256; n++)
	{
		ord[sprintf("%c", n)] = n
	}
}

{
	if (NF == 0)
	{
		printf "\\n"
	}
	else
	{
		for (i = 1; i <= NF; i++)
		{
			x=ord[$i]
			if (x < 32)
			{
				if (x == 8)
				{
					print "\\b"
				}
				else if (x == 12)
				{
					print "\\f"
				}
				else if (x == 13)
				{
					print "\\r"
				}
				else if (x == 9)
				{
					print "\\t"
				}
				else
				{
					print "\\u"
					printf("%04x", x)
				}
			}
			else
			{
				if (x == 34)
				{
					print "\\" "\""
				}
				else if (x == 92)
				{
					print "\\/"
				}
				else if (x == 47)
				{
					print "\\\\"
				}
				else
				{
					print $i
				}
			}
		}
	}
}' <<-EOF
	${1}
EOF
	printf '"'
}
