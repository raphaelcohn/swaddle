#!/usr/bin/env sh

_program()
{
	core_usesIn core temporaryFiles variable/array
	core_usesIn swaddle swaddles
	
	swaddle()
	{
		swaddle_swaddles_all
	}
}

_program_name='swaddle'
_program_version='unversioned'
_program_package_or_build=''
_program_copyright='(c) 2014 Raphael Cohn'
_program_licence='MIT'
_program_written_by='Raphael Cohn'
_program_path="$([ "${_program_fattening_program_path+set}" = 'set' ] && printf '%s\n' "$_program_fattening_program_path" || ([ "${0%/*}" = "${0}" ] && printf '%s\n' '.' || printf '%s\n' "${0%/*}"))"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='swaddle'

_program_commandLine_parseInitialise()
{
	:
}

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="[OPTION]... -- [SWADDLE]..."
	_program_commandLine_helpMessage_description="Builds packages by 'swaddling' them."
	_program_commandLine_helpMessage_options="
  -s, --swaddles-path PATH    Path to swaddles (package definitions).
                              Defaults to current working directory:-
                              $(pwd)
  -o, --output-path PATH      Path to use when creating packages.
                              Created if it doesn't exist.
                              Defaults to current working directory:-
                              $(pwd)
  -t, --temporary-path PATH   Path to use when creating packages.
                              Override if using very large packages,
                              as we use rsync to reduce cumulative builds.
                              Created if it doesn't exist.
                              Defaults to:-
                              ${TMPDIR}"
    _program_commandLine_helpMessage_optionsSpacing='     '
	_program_commandLine_helpMessage_configurationKeys="
  swaddle_swaddlesPath   Equivalent to --swaddles-path
  swaddle_outputPath     Equivalent to --output-path
  swaddle_temporaryPath  Equivalent to --temporary-path
"
	_program_commandLine_helpMessage_examples="
  ${_program_name} -s /some/path -- some-package
"
}

_program_commandLine_optionExists()
{
	case "$optionName" in
		
		s|swaddles-path)
			echo 'yes-argumented'
		;;
		
		o|output-path)
			echo 'yes-argumented'
		;;
		
		t|temporary-path)
			echo 'yes-argumented'
		;;
		
	esac
}

_program_commandLine_processOptionWithArgument()
{
	case "$optionName" in
		
		s|swaddles-path)
			core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			swaddle_swaddlesPath="$optionValue"
		;;
		
		o|output-path)
			core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			swaddle_outputPath="$optionValue"
		;;
		
		t|temporary-path)
			core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			swaddle_temporaryPath="$optionValue"
		;;
		
	esac
}

_program_commandLine_handleNonOptions()
{
	core_variable_array_initialise swaddle_swaddles
	
	local swaddle
	for swaddle in "$@"
	do
		core_variable_array_append swaddle_swaddles "$swaddle"
	done
}

_program_commandLine_validate()
{
	if core_variable_isSet swaddle_swaddlesPath; then
		core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_CONFIG 'configuration setting' 'swaddle_swaddlesPath' "$swaddle_swaddlesPath"
	else
		core_message INFO "Defaulting --swaddles-path to current working directory"
		swaddle_swaddlesPath="$(pwd)"
	fi
	
	if core_variable_isSet swaddle_outputPath; then
		core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_CONFIG 'configuration setting' 'swaddle_outputPath' "$swaddle_outputPath"
	else
		core_message INFO "Defaulting --output-path to current working directory"
		swaddle_outputPath="$(pwd)"
	fi
	
	if core_variable_isSet swaddle_temporaryPath; then
		core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_CONFIG 'configuration setting' 'swaddle_temporaryPath' "$swaddle_temporaryPath"
	fi
	
	local potentialSwaddle
	if core_variable_array_isEmpty swaddle_swaddles; then
		pushd "$swaddle_swaddlesPath"
			
			set +f
			for potentialSwaddle in *
			do
				set +f
				if [ "$potentialSwaddle" = 'swaddles.conf.d' ]; then
					continue
				fi
				if core_path_isReadableAndSearchableFolderPath "$potentialSwaddle"; then
					core_variable_array_append swaddle_swaddles "$potentialSwaddle"
				fi
			done
			set -f
			
		popd
		if core_variable_array_isEmpty swaddle_swaddles; then
			core_message WARN "There are no swaddles in '$swaddle_swaddlesPath'"
		fi
	else
		_program_commandLine_validate_swaddles()
		{
			potentialSwaddle="$core_variable_array_element"
			if ! core_path_isReadableAndSearchableFolderPath "$swaddle_swaddlesPath"/"$potentialSwaddle"; then
				core_exitError $core_commandLine_exitCode_USAGE "The swaddle '$potentialSwaddle' is not a readable, searchable folder in the swaddle path '$swaddle_swaddlesPath'"
			fi
		}
		core_variable_array_iterate swaddle_swaddles _program_commandLine_validate_swaddles
	fi
}

# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
