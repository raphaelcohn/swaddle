#!/usr/bin/env sh

_program()
{
	core_usesIn core temporaryFiles variable/array
	core_usesIn swaddle validate package
	
	core_dependency_requires '*' mkdir
	swaddle_createTemporaryFolder()
	{
		if core_variable_isUnset swaddle_temporaryPath; then
			local TMP_FOLDER
			core_temporaryFiles_newFolderToRemoveOnExit
			swaddle_temporaryPath="$TMP_FOLDER"
		else
			mkdir -m 0700 -p "$swaddle_temporaryPath"
		fi
	}
	
	core_dependency_requires '*' rm mkdir
	swaddle_createEmptyFolderSoWeCanLeverageRsyncToRemoveBody()
	{
		swaddle_emptyFolderSoWeCanLeverageRsyncToRemoveBodyPath="$swaddle_temporaryPath"/empty
		rm -rf "$swaddle_emptyFolderSoWeCanLeverageRsyncToRemoveBodyPath" 2>/dev/null || true
		mkdir -m 0700 -p "$swaddle_emptyFolderSoWeCanLeverageRsyncToRemoveBodyPath"
	}
	
	core_dependency_requires '*' mkdir
	swaddle_createPackagesFolder()
	{
		swaddle_temporaryPackagesFolderPath="$swaddle_temporaryPath"/packages
		mkdir -m 0700 -p "$swaddle_temporaryPackagesFolderPath"
	}
	
	core_dependency_requires '*' mkdir
	swaddle_createOutputFolder()
	{
		mkdir -m 0700 -p "$swaddle_outputPath"
	}
	
	swaddle_buildPackages()
	{
		core_variable_array_iterate swaddle_packages swaddle_package_build
	}
	
	swaddle()
	{
		swaddle_createTemporaryFolder
		swaddle_createEmptyFolderSoWeCanLeverageRsyncToRemoveBody
		swaddle_createPackagesFolder
		swaddle_createOutputFolder
		swaddle_buildPackages
	}
}

_program_name='swaddle'
_program_version='unversioned'
_program_package_or_build=''
_program_copyright='(c) 2014 Raphael Cohn'
_program_licence='MIT'
_program_written_by='Raphael Cohn'
_program_path="$([ "${_program_fattening_program_path+set}" = 'set' ] && printf '%s\n' "$_program_fattening_program_path" || ([ "${0%/*}" = "${0}" ] && printf '%s\n' '.' || printf '%s\n' "${0%/*}"))"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='swaddle'

_program_commandLine_parseInitialise()
{
	:
}

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="[OPTION]... -- [PACKAGE]..."
	_program_commandLine_helpMessage_description="Builds packages by 'swaddling' them."
	_program_commandLine_helpMessage_options="
  -s, --swaddle-path PATH     Path to use when swaddling packages.
                              Defaults to current working directory:-
                              $(pwd)
  -o, --output-path PATH      Path to use when creating packages.
                              Created if it doesn't exist.
                              Defaults to current working directory:-
                              $(pwd)
  -t, --temporary-path PATH   Path to use when creating packages,
                              defaults to ${TMPDIR:=/tmp}.
                              Override if using very large packages,
                              as we use rsync to reduce cumulative builds.
                              Created if it doesn't exist.
"
	_program_commandLine_helpMessage_examples="
  ${_program_name} -s /some/path -- some-package
"
}

_program_commandLine_optionExists()
{
	case "$optionName" in
		
		s|swaddle-path)
			echo 'yes-argumented'
		;;
		
		o|output-path)
			echo 'yes-argumented'
		;;
		
		t|temporary-path)
			echo 'yes-argumented'
		;;
		
	esac
}

_program_commandLine_processOptionWithArgument()
{
	case "$optionName" in
		
		s|swaddle-path)
			core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			swaddle_swaddlePath="$optionValue"
		;;
		
		o|output-path)
			core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			swaddle_outputPath="$optionValue"
		;;
		
		t|temporary-path)
			swaddle_validate_temporaryPath $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			swaddle_temporaryPath="$optionValue"
		;;
		
	esac
}

_program_commandLine_handleNonOptions()
{
	core_variable_array_initialise swaddle_packages
	
	local package
	for package in "$@"
	do
		core_variable_array_append swaddle_packages "$package"
	done
}

_program_commandLine_validate()
{
	if core_variable_isSet swaddle_swaddlePath; then
		core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_CONFIG 'configuration setting' 'swaddle_swaddlePath' "$swaddle_swaddlePath"
	else
		core_message INFO "Defaulting --swaddle-path to current working directory"
		swaddle_swaddlePath="$(pwd)"
	fi
	
	if core_variable_isSet swaddle_outputPath; then
		core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_CONFIG 'configuration setting' 'swaddle_outputPath' "$swaddle_outputPath"
	else
		core_message INFO "Defaulting --output-path to current working directory"
		swaddle_outputPath="$(pwd)"
	fi
	
	if core_variable_isSet swaddle_temporaryPath; then
		swaddle_validate_temporaryPath $core_commandLine_exitCode_CONFIG 'configuration setting' 'swaddle_temporaryPath' "$swaddle_temporaryPath"
	fi
}

# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
